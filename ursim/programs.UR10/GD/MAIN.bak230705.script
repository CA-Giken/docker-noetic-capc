def MAINbak230705():
  global _hidden_verificationVariable=0
  set_target_payload(0.100000, [0.135000, 0.000000, 0.225000], [10.000000, 10.000000, 10.000000, 0.000000, 0.000000, 0.000000])
  set_tcp(p[0.0,0.09,0.42,1.894,0.0,0.0])
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  set_gravity([0.0, 0.0, 9.82])
  set_safety_mode_transition_hardness(1)
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_runstate_gp_boolean_output_to_value(0, 3)
  global DistPillar=0.43147
  global CandCnt=1
  global ReCaptZ=0.05
  global port=3000
  global socket_timeout=120
  global host="192.168.1.2"
  global is_popup=False
  global pBucket=[p[0.76675, 0.41225, 0.33894, 0, 0, -1.57945], p[-0.74031, -0.49126, 0.33578, 0, 0, 1.59794], p[0, 0, 0, 0, 0, 0]]
  global CaptStepZ=0.085
  global CaptIndex=[2, 0, 0]
  global pBucketM=p[-0.76064, -0.49997, 0.35503, 0, 0, 1.57135]
  global socket_name="vt"
  global rovi_err=0
  global SubPrgResult=100
  global CurrPos=p[-0.00406, -0.42101, 0.52959, 0.02118, 3.14068, -0.00624]
  global CurrPos_p=p[-0.00251, -0.33269, 0.10924, 0.02118, 3.14068, -0.00624]
  global ForceStartZ=0.40881
  global CutOffZ=0.17706
  global Sub3100_ZMax=0.74
  global ForceStartX=-0.90368
  global Sub3100_aRot=0.2
  global Sub3100_d=0.3
  global Sub3100_Option=90
  global Sub3100_a=0.2
  global Sub3100_XdV=0.1
  global Sub3100_XdRot=8
  global ZoneDistTh=0.05
  global BucketWidth=0.95
  global ZoneBucketGap=0
  global ZoneHomeX=0.2
  global UnloadZ=0.07
  global CaptPos=p[0.471, -0.42592, -0.06353, 3.14138, 0.03448, 0.00005]
  global BucketUpperPos=p[0.471, -0.42592, -0.06353, 3.14138, 0.03448, 0.00005]
  global Sub3100_GPII18=90
  global Zone6ThX=0.1
  global Zone6ThY=0.05
  global pCV=p[-0.00052, -0.00348, 0.00354, 0.00315, 0.00011, 0.00421]
  global CaptRowNo=4
  global CrankDepthFull=0.025
  global CrankDepth=0.42653
  global Y1=[1, 431.47031, 45.5174, -68.46002]
  global Y2=p[-0.07617, -0.03204, -0.10197, -0.04071, 0.05004, -1.8003]
  global EvacRadiusTh=0.3
  global EvacXTh=[-0.5, 0.5]
  global EvacYTh=[-0.8, 1]
  global EvacZTh=[-0.1, 0.1]
  global WorkPosNo=1
  global Zone1ZTh=0.1
  global ReCaptNo=0
  global DistPillarBak=0.43147
  global CaptIndexWk=0
  global PoseSub=p[-0.4503, -0.02686, -0.44095, -0.07243, -0.0016, -0.07827]
  global PoseAdd=p[0.26728, -0.9727, -0.01085, 2.19805, 2.2158, -0.02925]
  global RZTh=15
  global pBucketC=p[0.45, -0.8, 0.35, 0, 0, 3.1415]
  global ReCaptZWk=0
  global CheckMST=1
  global RZSub=0
  global DistPillarCOTh=0.16
  global DistPillarAPTh=0.26
  global CutOffZAdd=0.13154
  global CutOffZDef=0.09
  global Y8=0
  global BKWidth_Value=[961, 990, 0]
  global BKWidth_Name="/prepro/bucket_width"
  global LevelZ=0.04552
  global NeighborZ=-0.06846
  global Currpos_p_UF0=p[0.27608, 0.12821, 0.21855, -2.41145, 1.93882, 0.05247]
  global TCPSpeed=p[0, 0, 0, 0, 0, 0]
  global Sub3100_Xd=[0, 0, 0.1, 0, 0, 0]
  global Sub3100_q=2
  global Sub3100_e=1
  global Sub3100_t=0.5
  global IsShake=False
  global BeyondZ=0.2
  global ShakeCnt=-1
  global IsSteady_01=False
  global IsSteady_02=True
  global HandInZ=0.05
  global TCPSpeedThZ=0.0005
  global ShakeWaitSec=1
  global CutOffPos=p[-0.89188, 0.14195, 0.25599, 2.03718, 2.39155, 0]
  global RelMoveZ=0.075
  global ForceFeature=p[-0.74031, -0.49126, -0.00422, 0, 0, 1.59794]
  global ForceAxis=[1, 1, 1, 1, 1, 1]
  global ForceValue=[0, 0, 0, 0, 0, 0]
  global ForceType=2
  global ForceLimit=[0.01, 0.01, 0.035, 0.17453, 0.17453, 0.17453]
  global ForceStep=3
  global IsBLLoad=False
  global TM_BLLoad=0.5
  global Sub104__TiltZTh=[0.25, 0.4]
  global Sub104_TiltZTh=[-0.5, 0.5]
  global BucketDef=p[-0.74031, -0.49126, 0.33578, 0, 0, 1.59794]
  global ForceLimitZ=[0.015, 0.035, 0.035]
  global gGD_pos5=p[-0.71437, -0.02297, 0.45, 2.14, 2.284, -0.00006]
  global CutOffTCP=p[0, 0.09, 0.42, 0, 0, 0]
  global UseCutOffTCP=False
  global UseZSlide=False
  global UseBaseZRotate=True
  global BKWidth=0.942
  global Test01=1
  global CaptPointL_dX=0.185
  global CaptPointR_dX=0.185
  global UseShake=False
  global UseNewCaptPos=True
  global RZSupDegMin=[-5, 5]
  global RZSupForceVal=0
  global UseRZSuppress=True
  global TCPForce=p[-0.52759, 1.97664, -5.45446, 0.83477, 0.16565, -0.42646]
  global TCPForceBak=p[0.36594, -3.8929, 2.17533, -0.5195, 1.28126, -0.71831]
  global CVCorrDegMin=[-1, 1]
  global RZSupRatio=[1, 1]
  global RZSupOffset=[0, 0]
  global CVCorrRatio=[1.5, 1.5]
  global CVCorrOffset=[0, 0]
  global CVCorrRZVal=0
  global RYSub=-0.25574
  global UseCVCorr=True
  global RZSupForceRange=[-5, 5]
  global DistBKUpperTh=0.3
  global DistBKUpper=0.50776
  global StopSpeed=[0.001, 0.001, 0.001, 99999, 99999, 0.035]
  global RZSupRYRange=[-5, 5]
  global UseRZSupStep1=False
  global Bucket=p[0.32604,0.49174,0.0,-1.882900624652718E-5,2.8304179127934987E-5,-1.593185305749222]
  global BucketM=p[0.32604,0.49174,0.0,2.2353980716304163E-16,-3.5868426080024975E-16,-1.5931853071795856]
  global CV=p[0.0,0.0,0.0,0.0,0.0,0.0]
  global CaptPoint_C=p[-0.335,0.0,0.2915,-2.1962990605814006,-2.246289190961992,-5.664481053350347E-5]
  global CaptPoint_C2=p[0.32796661698047924,-0.010768520544682924,0.01931625281283378,2.2288103429550152,-2.213636886217198,8.598462540813273E-5]
  global CaptPoint_L=p[-0.335,-0.29,0.4,2.196198431950414,2.246349774520516,5.8693989933774055E-5]
  global CaptPoint_L2=p[0.327894307417917,-0.010799940826224014,0.01928712668893995,2.087717047309385,-2.0736781215133306,0.27365839887453103]
  global CaptPoint_R=p[-0.335,0.29,0.4,-2.1963472338807764,-2.2462285075856694,3.086531389441326E-5]
  global CaptPoint_R2=p[0.327926308680866,-0.010795166414457658,0.019300245403843563,-2.1186306375223185,2.1040550557443427,0.22023197678473694]
  global Capt_1BK_L=p[-0.395,-0.47,0.35,-2.1961210242572884,-2.2463362846055,-2.908274762447041E-4]
  global Capt_1BK_R=p[-0.395,0.51,0.35,2.196067754706757,2.246288285862388,2.8411291050601595E-5]
  global Capt_1BK_pos1=p[-0.4218793038724447,-0.003154429464978058,0.2915499891144615,-2.1963422029204875,-2.2438663520270015,-0.02197160668673838]
  global Capt_1BK_pos2=p[-0.42187829024618434,-0.0031710253373066375,0.29156503858953065,-2.196324918349679,-2.2439040699490773,-0.021928444416953782]
  global Capt_2BK_L=p[0.42186661528427194,0.4254738068040517,0.35042275762909847,2.239156309475874,-2.1837044610999294,0.002643817066643282]
  global Capt_2BK_R=p[0.4218208572756906,-0.5427676723257963,0.350372239919558,2.2392697861179327,-2.183553596194912,0.002410470905346486]
  global Capt_2BK_pos1=p[0.42193501458435656,0.004742683868356356,0.35045865974037793,2.2391012408536453,-2.1839704655717003,0.002677867056024068]
  global Capt_2BK_pos2=p[0.421903984494575,0.004707988774967922,0.35045218900915065,2.239114367170047,-2.183895515396197,0.002684056681074047]
  global Capt_CV_M=p[-0.04794223960540197,-0.559868557160475,0.1086937653706071,-0.022464429848058916,-3.141454018347238,4.0166993855964835E-4]
  global Capt_GD_M=p[-0.004053197679954899,-0.25261725691632436,-0.01970497430780127,0.0332779454553888,-3.140179196376707,-0.0034093680964018282]
  global HomePointL=p[-0.36789,-0.5117344641471838,0.78,-0.6278857271586024,3.0680899128661667,-8.649957362498864E-4]
  global Master_pos=p[0.121,-0.17,-0.0545,-0.020993616946531908,-3.141044973619201,0.0]
  global Master_posL=p[-0.003,-0.27,0.109,0.02094395102393583,3.0543261909900803,-5.235987755386035E-4]
  global Master_posR=p[-0.003,-0.27,0.109,-0.019810987664379186,-3.054193931591229,4.952746915529204E-4]
  global Master_pos_1=p[0.11094339812903395,-0.23710672065782984,0.08047378202276018,-0.05666752666458696,3.1228966394147033,0.01312068089365201]
  global PickPos=p[0.10830682331105715,-1.3709505888096256,-0.18404188875951455,-0.00622194000158997,2.880236948927292,-0.00383636509397631]
  global Solve=p[-0.00368,-0.0021000000000000003,0.25739999999999996,0.0,0.0,0.0]
  global TCP3100TL=p[0.0,0.08,0.42,1.8939999999999997,0.0,0.0]
  global TEST=p[0.1,0.0,0.2,0.0,0.0,0.0]
  global TEST_ROTSUP=p[-0.07293017509777999,-0.3201239472424659,0.14015840016860298,-0.014967413338418362,-3.108805898474534,-0.035972414862118114]
  global UF=p[0.0,0.0,0.0,0.0,0.0,0.0]
  global g1CV_posL1=p[0.05028133628211688,-0.4526481033729615,0.1221845548632916,-2.213335080948508,-2.1937561336067057,-0.3280056759040735]
  global g1CV_posR1=p[0.03743870476062511,-0.53119407812668,0.11301901343688614,2.073418671558482,2.153257467049566,0.11656306439039889]
  global g1GD_pos1=p[0.14857012745627257,-0.6379982996093139,0.2691918735517042,2.2060000000000084,2.220000000000009,-1.6896832945424516E-4]
  global g1GD_pos2=p[0.028634297882679793,-0.4702313285867709,0.450031657325677,2.202000000000001,2.215000000000001,-1.5473710220816903E-5]
  global g1GD_pos3=p[-0.1945307709581842,-0.42906455111749103,0.45,2.665999999999994,1.617999999999996,-7.112576237563512E-5]
  global g1GD_pos4=p[-0.25628841794770224,-0.020630481098425146,0.45,2.148716725221303,2.2918109407224354,-1.3854918368741778E-5]
  global g1GD_pos5=p[-0.714365317693782,-0.022971007293656684,0.45,2.1400000000000357,2.2840000000000384,-6.311428050357166E-5]
  global g1GD_pos5_NEAR=p[-0.5143300000000001,-0.023002183632447833,0.4499678963159493,2.1476150413314157,2.292837734093618,6.185870865614646E-5]
  global g1GD_posL1=p[-0.08276848269606216,-0.3996147100031649,0.1488453551331823,2.286527078917204,1.8420745504477611,0.33698451773695576]
  global g1GD_posL2=p[-0.3253977027403738,-0.3024804624281039,0.16332814085945146,2.72312820760317,0.9631021078169197,0.32447452035226126]
  global g1GD_posL3=p[-0.6791033397183219,0.06787475590683856,0.16337212788108813,2.1383125299263996,2.086116032377724,0.4536080263755059]
  global g1GD_posR1=p[-0.09893370538053747,-0.4999608954567234,0.14329885217724153,2.43311852414254,1.4238397520832589,0.08559216753941556]
  global g1GD_posR2=p[-0.3729565201882258,-0.3752983669473301,0.143299052800563,2.6951655216297596,0.8130506811102118,-0.02387549506099888]
  global g1GD_posR3=p[-0.7385929502572233,-0.029472684480355026,0.1499650660949685,2.0484522752014467,1.9493695704119496,0.18368227556562683]
  global g2CV_posL1=p[0.3409386496330911,-0.4656338066361442,0.1250074988128972,2.209372209162659,2.1945371304665926,0.3160714960040194]
  global g2CV_posR1=p[0.3400736278759575,-0.531334269888987,0.1183415684753657,2.07314649492589,2.1532617466521136,0.11638666128062146]
  global g2GD_pos1=p[0.2541383831722086,-0.6774928758666339,0.18519999999999998,-2.0375719953020583,-2.3889847960451758,-0.0020926217703189543]
  global g2GD_pos2=p[0.2548303032832998,-0.4395886120507379,0.2986557393825452,-1.8691601740155521,-2.5210138137905886,-0.00387894312889377]
  global g2GD_pos3=p[0.3379879014596998,-0.06467509721500111,0.3,-0.13681955358471554,3.138134920213652,0.0052602971824959885]
  global g2GD_pos4=p[0.31412137931928874,0.14047894136547145,0.3,1.0726627132331576,-2.952135651121033,-0.005044331815994264]
  global g2GD_pos5=p[0.596826867485263,0.012800854207951809,0.3,-2.250960447020382,2.191482163995288,-8.62049956035814E-5]
  global g2GD_pos5_NEAR=p[0.5968300000000001,0.0128,0.44997000000000004,2.250000000000808,-2.1920000000007867,0.0]
  global gCV_11_M=p[0.2895856132087369,-0.97134,-0.03048660701646616,2.115234988149259,2.1296507532834856,0.29072021263058895]
  global gCV_12_M=p[0.3399735651774522,-0.97134,-0.03049,2.1151309943729686,2.1296507532834803,0.29077185338225686]
  global gCV_13_M=p[0.3677028242565019,-0.8912043588518235,0.06406475497489328,2.0725171273330782,1.9964853271438565,0.36457536397978224]
  global gCV_1_M=p[0.26362,-0.97021,-0.01196,2.2010000000000076,2.210000000000009,-0.032522331028258945]
  global gCV_2_M=p[0.26362,-0.9702129826117811,0.02944,2.202000000000002,2.2110000000000025,-0.03211372558203525]
  global gCV_3_M=p[0.29099390607376485,-0.6570558385379063,0.0722153583041818,1.9884242634571576,2.2321538498123994,0.15249643504377583]
  global gCV_pos5=p[0.3400172856834047,-0.9722754606605235,-0.18287928563575456,2.073394561413637,2.1531827558666565,0.11639000988241816]
  global gGD_1_LM=p[0.02419,-0.7289500000000001,-0.11494,-0.010169347158913017,2.870767181856166,0.2884627079222753]
  global gGD_1_LM_RX=p[0.02416,-0.7290503881876362,-0.11492000000000001,0.3044368416109271,1.9674275598429376,-2.2260150226690767]
  global gGD_1_LM_RXF=p[0.02413503458160308,-0.74534,-0.11578000000000001,0.2411332216392182,1.7407173006243832,-2.3674279033231747]
  global gGD_1_M=p[0.023469999999999998,-0.72661,-0.11456000000000001,-0.029570847824802682,-3.12419917405015,-0.3106340785404749]
  global gGD_1_M_RX=p[0.023469999999999998,-0.7267389086136226,-0.11653,-0.01497665825746678,-2.067091763806016,2.343829767295237]
  global gGD_1_M_RXF=p[0.02415523713330076,-0.7453200000000001,-0.11578426509069895,-0.012477314995716382,-1.853515977408631,2.515027308648709]
  global gGD_1_RM=p[0.023629999999999998,-0.72653,-0.11331000000000001,-0.06253229749015264,-2.8808212567082414,-0.28238046714011755]
  global gGD_1_RM_RX=p[0.023710000000000002,-0.7266791760279572,-0.11328,0.25928042729790574,-1.9492131299374433,2.2165015837642534]
  global gGD_1_RM_RXF=p[0.024158234647744328,-0.74536,-0.11577,0.21548497967238725,-1.726437707763004,2.3373117534316665]
  global gGD_2_LM=p[0.02467,-0.67055,-0.11509,-0.010179461791212513,2.870955921048522,0.2878734195391217]
  global gGD_2_LM_RX=p[0.148,-0.5447000000000001,-0.0725,0.24799999999999858,1.9720000000000018,-2.179000000000001]
  global gGD_2_LM_RXF=p[0.02518,-0.6822999999999999,-0.11982,0.24121310672797797,1.7407223643292684,-2.3672997334921986]
  global gGD_2_M=p[0.02389,-0.6721900000000001,-0.11456000000000001,-0.029666521928107308,-3.1243201149134068,-0.3098990972493868]
  global gGD_2_M_RX=p[0.149,-0.54489,-0.0695,-0.004881318387378522,2.0862754787651396,-2.2981246967773203]
  global gGD_2_M_RXF=p[0.02469,-0.68228,-0.11781,-0.012625584579695818,-1.8536977166603092,2.514979910589354]
  global gGD_2_RM=p[0.02429,-0.66916,-0.11353,-0.06253008389277029,-2.880917079483223,-0.28230802316028863]
  global gGD_2_RM_RX=p[0.1505,-0.5443300000000001,-0.068,0.2959999999999995,-2.0130000000000017,2.209000000000002]
  global gGD_2_RM_RXF=p[0.02418,-0.68221,-0.11985,0.21545635593876583,-1.7267658137434814,2.337110041109278]
  global gGD_3_LM=p[0.024149999999999998,-0.63442,-0.00372,-0.010168641563882792,2.8709293839329573,0.28786844960240987]
  global gGD_3_LM_RX=p[0.148,-0.51554,-0.0725,0.24799999999999944,1.9709999999999999,-2.1789999999999994]
  global gGD_3_LM_RXF=p[0.02387752228160463,-0.5964211774687285,-0.05792315514989682,0.2704410553277331,1.9481847980902196,-2.214876983085744]
  global gGD_3_M=p[0.023940000000000003,-0.63613,-0.00522,-0.029962916255114207,-3.1241595671421933,-0.3100480455299553]
  global gGD_3_M_RX=p[0.149,-0.51525,-0.0695,-0.0048813183873774365,2.0862754787651414,-2.298124696777323]
  global gGD_3_M_RXF=p[0.02383447419609676,-0.5964085561522618,-0.0579509198373786,-0.014600929068906539,-2.066655165579624,2.3438719244209403]
  global gGD_3_RM=p[0.02428,-0.6347200000000001,-0.00846,-0.0624152449577923,-2.8809080008278345,-0.2823877130468296]
  global gGD_3_RM_RX=p[0.1505,-0.5151,-0.068,0.2959999999999995,-2.0130000000000017,2.209000000000002]
  global gGD_3_RM_RXF=p[0.023773322279514588,-0.5964087734876792,-0.05795139315103717,0.24060086319727583,-1.933030903056379,2.187075285864524]
  global gGD_4_LM=p[-0.011210304327025133,-0.5154273285739928,0.03,0.24806379354211447,1.9716743582538676,-2.178783821422816]
  global gGD_4_LM_RX=p[-0.12533199352487323,-0.6346108123799734,-0.003643920282847657,0.304552460658092,1.9670859988240124,-2.226395027960848]
  global gGD_4_RM=p[0.30796717945535684,-0.5151064262102534,0.03,0.29563155154414866,-2.013445679592415,2.2089997240372727]
  global gHome_Position=p[-0.0028799999999999997,-0.33081,0.1087,-0.02099958342773921,-3.141491282453575,3.986162810876369E-4]
  global gTAIHI_pos1=p[0.034435296708333146,-0.2890869270984411,0.28697762766096685,-0.9517096680276043,2.9907327255336362,-0.006242657270483182]
  global gTAIHI_pos2=p[0.46041690381401934,0.09562026346103787,0.3409455343940188,-2.575428180750575,1.7504967205574518,-0.009370784990557466]
  global gTAIHI_pos3=p[0.4777514786587304,0.10855417509450788,0.25667938190447326,-3.115092130529677,-0.059113053813058626,0.017060902648732133]
  global gTAIHI_pos4=p[0.47773948064032057,0.10853581553326999,-0.15133852019421468,-3.1151611852917296,-0.05914313994407087,0.017149581050184888]
  global gTAIHI_pos5=p[0.30588450070104545,0.17870028478253597,-0.38750721344025674,-3.115302721311487,-0.05927431563397507,0.01725874757592571]
  global p0507=p[-0.335,0.29,0.4,-2.152,-2.1999999999999993,-0.09000000000000297]
  rtde_set_watchdog("speed_slider_mask", 10.0, "ignore")
  # begin: URCap Installation Node
  #   Source: Ethernet/IP I/O Monitor URCap, 1.0.0, 
  #   Type: Ethernet/IP I/O Monitor
  conn = rpc_factory("xmlrpc", "http://127.0.0.1:" + to_str(61101) + "/RPC2")
  
  def show_monitor():
    return conn.eip_monitor.show()
  end
  # end: URCap Installation Node
  step_count_c95c41bc_98f4_4c2e_8e2b_6f280293629e = 0.0
  thread Step_Counter_Thread_efb81bfb_9b5b_4d6a_893e_876cd0a718ff():
    while (True):
      step_count_c95c41bc_98f4_4c2e_8e2b_6f280293629e = step_count_c95c41bc_98f4_4c2e_8e2b_6f280293629e + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_efb81bfb_9b5b_4d6a_893e_876cd0a718ff()
  global tm_104=0
  global tm_6102_01=0
  global tm_6102_02=0
  global tm_cutoff=0
  global tm_handin=0
  global tm_landed=0
  global tm_steady_104=0
  global tm_steady_105=0
  global TiltL_from_p=p[-.335019588584, -.289975007114, .399985554851, -2.196200212503, -2.246385363098, -.000059430764]
  global TiltL_to_p=p[-.335069456830, -.289996117888, .400008166038, 2.152127814879, 2.200006045058, -.090079174744]
  global SlideL0_from_p=p[.006558975951, -.389302015722, .060920696916, -.507304446373, 3.058645128813, -.014029590964]
  global SlideL0_to_p=p[.006579338814, -.439267377296, .060917626318, -.507307534755, 3.058607729011, -.013922978471]
  global SlideL1_from_p=p[-.004128046884, -.329517647850, .106532113051, -.022933334657, -3.138695067531, -.001916374829]
  global SlideL1_to_p=p[-.004138218470, -.279531354018, .106538287846, -.022782734989, -3.138664778506, -.001862746150]
  global TiltR_from_p=p[-.335032344249, .289971723575, .399991637943, -2.196364633080, -2.246236249122, .000144408138]
  global TiltR_to_p=p[-.335050949327, .289971951895, .400008831481, -2.152000507065, -2.199932875346, -.089805403410]
  global SlideR0_from_p=p[.006530663685, -.439223474389, .060879662232, -.507257792347, 3.058675656178, -.013724007697]
  global SlideR0_to_p=p[.006588957901, -.389288003310, .060942026835, -.507364990797, 3.058603375796, -.013956769517]
  global SlideR1_from_p=p[-.004120918278, -.279484505094, .106522274930, -.022863021218, -3.138702604731, -.002089794914]
  global SlideR1_to_p=p[-.004165133181, -.329432477472, .106436975922, -.022907205227, -3.138606071909, -.002218952223]
  global CaptPos0_p=p[.062940695952, -.648805201720, .499601675630, -.057956765798, 3.122671515713, .012933073207]
  global CaptPos0_q=[-1.2119177023517054, -1.5154119108668347, -1.9421818256378174, -1.2562483710101624, 1.5889158248901367, 0.3233448565006256]
  global tm_104_is_counting=False
  global tm_steady_105_is_counting=False
  global tm_steady_104_is_counting=False
  global tm_landed_is_counting=False
  global tm_6102_01_is_counting=False
  global tm_cutoff_is_counting=False
  global tm_6102_02_is_counting=False
  global tm_handin_is_counting=False
  thread Timer_Thread():
    while (True):
      if (tm_104_is_counting):
        tm_104 = tm_104 + get_steptime()
      end
      if (tm_steady_105_is_counting):
        tm_steady_105 = tm_steady_105 + get_steptime()
      end
      if (tm_steady_104_is_counting):
        tm_steady_104 = tm_steady_104 + get_steptime()
      end
      if (tm_landed_is_counting):
        tm_landed = tm_landed + get_steptime()
      end
      if (tm_6102_01_is_counting):
        tm_6102_01 = tm_6102_01 + get_steptime()
      end
      if (tm_cutoff_is_counting):
        tm_cutoff = tm_cutoff + get_steptime()
      end
      if (tm_6102_02_is_counting):
        tm_6102_02 = tm_6102_02 + get_steptime()
      end
      if (tm_handin_is_counting):
        tm_handin = tm_handin + get_steptime()
      end
      sync()
    end
  end
  run Timer_Thread()
  def SUB_001():
    $ 226 "SUB_001" "noBreak"
    $ 227 "荷重の設定: k10"
    set_target_payload(0.100000, [0.135000, 0.000000, 0.225000], [10.000000, 10.000000, 10.000000, 0.000000, 0.000000, 0.000000])
    $ 228 "MoveJ"
    $ 229 "gHome_Position" "breakAfter"
    set_tcp(p[0.0,0.09,0.42,0.0,0.0,0.0])
    movej(gHome_Position, a=0.5235987755982988, v=1.2217304763960306)
  end
  def SUB_002():
    $ 230 "SUB_002" "noBreak"
    $ 231 "If文 (WorkPosNo≟0)"
    if ((WorkPosNo == 0)):
      $ 232 "MoveL"
      $ 233 "g2GD_pos4" "breakAfter"
      set_tcp(p[0.0,0.09,0.42,0.0,0.0,0.0])
      movel(g2GD_pos4, a=0.07, v=0.25)
      $ 234 "MoveL"
      $ 235 "g2GD_pos5" "breakAfter"
      set_tcp(p[0.0,0.09,0.42,0.0,0.0,0.0])
      movel(g2GD_pos5, a=0.14, v=0.4)
      $ 236 "MoveL"
      $ 237 "g2GD_pos1" "breakAfter"
      set_tcp(p[0.0,0.09,0.42,0.0,0.0,0.0])
      movel(g2GD_pos1, a=0.14, v=0.5)
    else:
      $ 238 "ElseIf (WorkPosNo≟1)"
      if ((WorkPosNo == 1)):
        $ 239 "MoveL"
        $ 240 "g1GD_pos3" "breakAfter"
        set_tcp(p[0.0,0.09,0.42,0.0,0.0,0.0])
        movel(g1GD_pos3, a=0.07, v=0.25)
        $ 241 "MoveL"
        $ 242 "g1GD_pos2" "breakAfter"
        set_tcp(p[0.0,0.09,0.42,0.0,0.0,0.0])
        movel(g1GD_pos2, a=0.14, v=0.4)
        $ 243 "MoveL"
        $ 244 "g1GD_pos1" "breakAfter"
        set_tcp(p[0.0,0.09,0.42,0.0,0.0,0.0])
        movel(g1GD_pos1, a=0.14, v=0.5)
      end
    end
  end
  def SUB_101():
    $ 245 "SUB_101" "noBreak"
    $ 246 "INITIALIZE"
    $ 247 "荷重の設定: k10"
    set_target_payload(0.100000, [0.135000, 0.000000, 0.225000], [10.000000, 10.000000, 10.000000, 0.000000, 0.000000, 0.000000])
    $ 248 "BUCKET"
    $ 249 "SET_BUCKET_DEF()"
    SET_BUCKET_DEF()
    $ 250 "BucketUpperPos:=GET_BUCKET_UPPER()"
    global BucketUpperPos=GET_BUCKET_UPPER()
    $ 251 "MoveJ"
    $ 252 "BucketUpperPos" "breakAfter"
    set_tcp(p[0.0,0.09,0.42,0.0,0.0,0.0])
    movej(pose_trans(Bucket, BucketUpperPos), a=0.3490658503988659, v=0.6981317007977318)
  end
  def SUB_102():
    $ 253 "SUB_102" "noBreak"
    $ 254 "ROVI_RECIPE"
    $ 255 "If文 (not ROVI_RECIPE(GPII_WorkNo))"
    if ((not ROVI_RECIPE(read_input_integer_register(2)))):
      $ 256 "SubPrgResult:=rovi_err"
      global SubPrgResult=rovi_err
      $ 257 "待機: 999999.0"
      sleep(999999.0)
    end
    $ 258 "ROVI_PARAM"
    $ 259 "If文 ( not ROVI_PARAM(BKWidth_Name,BKWidth_Value[WorkPosNo]))"
    if ((  not  ROVI_PARAM(BKWidth_Name,BKWidth_Value[WorkPosNo]))):
      $ 260 "SubPrgResult:=rovi_err"
      global SubPrgResult=rovi_err
      $ 261 "待機: 999999.0"
      sleep(999999.0)
    end
    $ 262 "ROVI_RESET"
    $ 263 "If文 (not ROVI_RESET())"
    if ((not ROVI_RESET())):
      $ 264 "SubPrgResult:=rovi_err"
      global SubPrgResult=rovi_err
      $ 265 "待機: 999999.0"
      sleep(999999.0)
    end
    $ 266 "荷重の設定: k25"
    set_target_payload(0.100000, [0.135000, 0.000000, 0.225000], [25.000000, 25.000000, 25.000000, 0.000000, 0.000000, 0.000000])
    $ 267 "ROVI_CAPTURE"
    $ 268 "If文 ( not CHECK_CAPTPOS())"
    if ((  not  CHECK_CAPTPOS())):
      $ 269 "SubPrgResult:=802"
      global SubPrgResult=802
      $ 270 "待機: 999999.0"
      sleep(999999.0)
    end
    $ 271 "荷重の設定: k25"
    set_target_payload(0.100000, [0.135000, 0.000000, 0.225000], [25.000000, 25.000000, 25.000000, 0.000000, 0.000000, 0.000000])
    $ 272 "CaptPos:=GET_CAPTPOS()"
    global CaptPos=GET_CAPTPOS()
    $ 273 "MoveL"
    $ 274 "CaptPos" "breakAfter"
    set_tcp(p[0.0,0.09,0.42,0.0,0.0,0.0])
    movel(pose_trans(Bucket, CaptPos), a=0.14, v=0.4)
    $ 275 "待機: 1.0"
    sleep(1.0)
  end
  def SUB_103():
    $ 277 "SUB_103" "noBreak"
    $ 278 "荷重の設定: k25"
    set_target_payload(0.100000, [0.135000, 0.000000, 0.225000], [25.000000, 25.000000, 25.000000, 0.000000, 0.000000, 0.000000])
    $ 279 "ROVI_CAPTURE"
    $ 280 "CaptPos:=GET_CAPTPOS()"
    global CaptPos=GET_CAPTPOS()
    $ 281 "MoveL"
    $ 282 "CaptPos" "breakAfter"
    set_tcp(p[0.0,0.09,0.42,0.0,0.0,0.0])
    movel(pose_trans(Bucket, CaptPos), a=0.14, v=0.4)
    $ 283 "待機: 1.0"
    sleep(1.0)
  end
  def SUB_104RXFF():
    $ 443 "SUB_104RXFF" "noBreak"
    $ 444 "SET_BUCKET()"
    SET_BUCKET()
    $ 445 "ROVI_CAPTURE"
    $ 446 "If文 ( not ROVI_CAPTURE())"
    if ((  not  ROVI_CAPTURE())):
      $ 447 "SubPrgResult:=rovi_err"
      global SubPrgResult=rovi_err
      $ 448 "待機: 999999.0"
      sleep(999999.0)
    end
    $ 449 "CandCnt:=Y1[0]"
    global CandCnt=Y1[0]
    $ 450 "DistPillar:=Y1[1] / 1000.0"
    global DistPillar=Y1[1] / 1000.0
    $ 451 "LevelZ:=Y1[2] / 1000.0"
    global LevelZ=Y1[2] / 1000.0
    $ 452 "NeighborZ:=Y1[3] / 1000.0"
    global NeighborZ=Y1[3] / 1000.0
    $ 453 "If文 (GPII_PrgNo≠1203)"
    if ((read_input_integer_register(0) != 1203)):
      $ 454 "DistPillarBak:=DistPillar"
      global DistPillarBak=DistPillar
    end
    $ 455 "If文 (CandCnt<1)"
    if ((CandCnt<1)):
      $ 456 "SubPrgResult:=990"
      global SubPrgResult=990
      $ 457 "待機: 999999.0"
      sleep(999999.0)
    end
    $ 458 "ROVI_SOLVE"
    $ 459 "If文 (CandCnt>0)"
    if ((CandCnt>0)):
      $ 460 "Y2:=ROVI_SOLVE()"
      global Y2=ROVI_SOLVE()
      $ 461 "If文 (Y2[0]≟10000.)"
      if ((Y2[0] == 10000.)):
        $ 462 "SubPrgResult:=rovi_err"
        global SubPrgResult=rovi_err
        $ 463 "待機: 999999.0"
        sleep(999999.0)
      end
    end
    $ 464 "UF:=Y2"
    global UF=Y2
    $ 465 "PICK"
    $ 466 "荷重の設定: k10"
    set_target_payload(0.100000, [0.135000, 0.000000, 0.225000], [10.000000, 10.000000, 10.000000, 0.000000, 0.000000, 0.000000])
    $ 467 "BucketDef:=pBucket[WorkPosNo]"
    global BucketDef=pBucket[WorkPosNo]
    $ 468 "If文 (CaptIndexWk≟1)"
    if ((CaptIndexWk == 1)):
      $ 469 "If文 ((BucketDef[2]+Sub104_TiltZTh[0]<CurrPos[2]) and (CurrPos[2]<BucketDef[2]+Sub104_TiltZTh[1]))"
      if (((BucketDef[2]+Sub104_TiltZTh[0]<CurrPos[2])  and  (CurrPos[2]<BucketDef[2]+Sub104_TiltZTh[1]))):
        $ 470 "If文 (0≤DistPillar and DistPillar≤DistPillarAPTh)"
        if ((0 <= DistPillar  and  DistPillar <= DistPillarAPTh)):
          $ 471 "MoveL"
          $ 472 "TiltL" "breakAfter"
          set_tcp(p[0.0,0.09,0.42,0.0,0.0,0.0])
          movel(pose_add(get_target_tcp_pose(), pose_sub(TiltL_to_p, TiltL_from_p)), a=0.07, v=0.2)
        else:
          $ 473 "Else" "noBreak"
          $ 474 "If文 WorkPosNo≟0"
          if (WorkPosNo == 0):
            $ 475 "MoveL"
            $ 476 "SlideL0" "breakAfter"
            set_tcp(p[0.0,0.09,0.42,0.0,0.0,0.0])
            movel(pose_add(get_target_tcp_pose(), pose_sub(SlideL0_to_p, SlideL0_from_p)), a=0.07, v=0.2)
          else:
            $ 477 "Else" "noBreak"
            $ 478 "MoveL"
            $ 479 "SlideL1" "breakAfter"
            set_tcp(p[0.0,0.09,0.42,0.0,0.0,0.0])
            movel(pose_add(get_target_tcp_pose(), pose_sub(SlideL1_to_p, SlideL1_from_p)), a=0.07, v=0.2)
          end
        end
      end
    else:
      $ 480 "ElseIf (CaptIndexWk≟2)"
      if ((CaptIndexWk == 2)):
        $ 481 "If文 ((BucketDef[2]+Sub104_TiltZTh[0]<CurrPos[2]) and (CurrPos[2]<BucketDef[2]+Sub104_TiltZTh[1]))"
        if (((BucketDef[2]+Sub104_TiltZTh[0]<CurrPos[2])  and  (CurrPos[2]<BucketDef[2]+Sub104_TiltZTh[1]))):
          $ 482 "If文 (-DistPillarAPTh≤DistPillar and DistPillar≤0)"
          if ((-DistPillarAPTh <= DistPillar  and  DistPillar <= 0)):
            $ 483 "MoveL"
            $ 484 "TiltR" "breakAfter"
            set_tcp(p[0.0,0.09,0.42,0.0,0.0,0.0])
            movel(pose_add(get_target_tcp_pose(), pose_sub(TiltR_to_p, TiltR_from_p)), a=0.07, v=0.2)
          else:
            $ 485 "Else" "noBreak"
            $ 486 "If文 WorkPosNo≟0"
            if (WorkPosNo == 0):
              $ 487 "MoveL"
              $ 488 "SlideR0" "breakAfter"
              set_tcp(p[0.0,0.09,0.42,0.0,0.0,0.0])
              movel(pose_add(get_target_tcp_pose(), pose_sub(SlideR0_to_p, SlideR0_from_p)), a=0.07, v=0.2)
            else:
              $ 489 "Else" "noBreak"
              $ 490 "MoveL"
              $ 491 "SlideR1" "breakAfter"
              set_tcp(p[0.0,0.09,0.42,0.0,0.0,0.0])
              movel(pose_add(get_target_tcp_pose(), pose_sub(SlideR1_to_p, SlideR1_from_p)), a=0.07, v=0.2)
            end
          end
        end
      end
    end
    $ 492 "If文 (0≤DistPillar and DistPillar≤DistPillarAPTh)"
    if ((0 <= DistPillar  and  DistPillar <= DistPillarAPTh)):
      $ 493 "MoveL"
      $ 494 "gGD_4_LM" "breakAfter"
      set_tcp(p[0.0,0.09,0.42,1.894,0.0,0.0])
      movel(pose_trans(UF, gGD_4_LM), a=0.14, v=0.4)
      $ 495 "MoveL"
      $ 496 "gGD_3_LM_RX" "breakAfter"
      set_tcp(p[0.0,0.09,0.42,1.894,0.0,0.0])
      movel(pose_trans(UF, gGD_3_LM_RX), a=0.14, v=0.4)
      $ 497 "gGD_2_LM_RX" "breakAfter"
      set_tcp(p[0.0,0.09,0.42,1.894,0.0,0.0])
      movel(pose_trans(UF, gGD_2_LM_RX), a=0.14, v=0.4)
      $ 498 "設定 GPBO_BLStop=HI:Pulse 1.0"
      thread SinglePulse2244():
        write_output_boolean_register(14, True)
        sleep(1.0)
        write_output_boolean_register(14, False)
      end
      singlePulse2244 = run SinglePulse2244()
      $ 499 "待機: 0.5"
      sleep(0.5)
      $ 501 "tm_handin: リセット"
      tm_handin = 0
      $ 502 "tm_handin: 起動"
      tm_handin_is_counting = True
      $ 503 "設定 DO[1]=オン"
      set_standard_digital_out(1, True)
      $ 504 "フォース"
      sleep(0.02)
      zero_ftsensor()
      force_mode(tool_pose(), [1, 1, 1, 0, 0, 0], [0.0, 0.0, 20.0, 0.0, 0.0, 0.0], 2, [0.005, 0.005, 0.04, 0.3490658503988659, 0.3490658503988659, 0.3490658503988659])
      $ 505 "待機 ((Currpos_p_UF0[1]≤(gGD_2_LM_RX[1]-HandInZ)) or (tm_handin>GPII_TMHandIn))" "noBreak"
      while (not(((Currpos_p_UF0[1] <= (gGD_2_LM_RX[1]-HandInZ))  or  (tm_handin>read_input_integer_register(12))))):
        sync()
      end
      end_force_mode()
      stopl(5.0)
      $ 506 "tm_handin: 停止"
      tm_handin_is_counting = False
      $ 507 "設定 GPBO_BLStart=HI:Pulse 1.0"
      thread SinglePulse2245():
        write_output_boolean_register(15, True)
        sleep(1.0)
        write_output_boolean_register(15, False)
      end
      singlePulse2245 = run SinglePulse2245()
      $ 508 "設定 DO[1]=オフ"
      set_standard_digital_out(1, False)
    else:
      $ 509 "ElseIf (-DistPillarAPTh≤DistPillar and DistPillar≤0)"
      if ((-DistPillarAPTh <= DistPillar  and  DistPillar <= 0)):
        $ 510 "MoveL"
        $ 511 "gGD_4_RM" "breakAfter"
        set_tcp(p[0.0,0.09,0.42,1.894,0.0,0.0])
        movel(pose_trans(UF, gGD_4_RM), a=0.07, v=0.4)
        $ 512 "MoveL"
        $ 513 "gGD_3_RM_RX" "breakAfter"
        set_tcp(p[0.0,0.09,0.42,1.894,0.0,0.0])
        movel(pose_trans(UF, gGD_3_RM_RX), a=0.07, v=0.4)
        $ 514 "gGD_2_RM_RX" "breakAfter"
        set_tcp(p[0.0,0.09,0.42,1.894,0.0,0.0])
        movel(pose_trans(UF, gGD_2_RM_RX), a=0.07, v=0.4)
        $ 515 "設定 GPBO_BLStop=HI:Pulse 1.0"
        thread SinglePulse2246():
          write_output_boolean_register(14, True)
          sleep(1.0)
          write_output_boolean_register(14, False)
        end
        singlePulse2246 = run SinglePulse2246()
        $ 516 "待機: 0.5"
        sleep(0.5)
        $ 518 "tm_handin: リセット"
        tm_handin = 0
        $ 519 "tm_handin: 起動"
        tm_handin_is_counting = True
        $ 520 "設定 DO[1]=オン"
        set_standard_digital_out(1, True)
        $ 521 "フォース"
        sleep(0.02)
        zero_ftsensor()
        force_mode(tool_pose(), [1, 1, 1, 0, 0, 0], [0.0, 0.0, 20.0, 0.0, 0.0, 0.0], 2, [0.005, 0.005, 0.04, 0.3490658503988659, 0.3490658503988659, 0.3490658503988659])
        $ 522 "待機 ((Currpos_p_UF0[1]≤(gGD_2_RM_RX[1]-HandInZ)) or (tm_handin>GPII_TMHandIn))" "noBreak"
        while (not(((Currpos_p_UF0[1] <= (gGD_2_RM_RX[1]-HandInZ))  or  (tm_handin>read_input_integer_register(12))))):
          sync()
        end
        end_force_mode()
        stopl(5.0)
        $ 523 "tm_handin: 停止"
        tm_handin_is_counting = False
        $ 524 "設定 GPBO_BLStart=HI:Pulse 1.0"
        thread SinglePulse2247():
          write_output_boolean_register(15, True)
          sleep(1.0)
          write_output_boolean_register(15, False)
        end
        singlePulse2247 = run SinglePulse2247()
        $ 525 "設定 DO[1]=オフ"
        set_standard_digital_out(1, False)
      else:
        $ 526 "Else" "noBreak"
        $ 527 "MoveL"
        $ 528 "gGD_3_M_RX" "breakAfter"
        set_tcp(p[0.0,0.09,0.42,1.894,0.0,0.0])
        movel(pose_trans(UF, gGD_3_M_RX), a=0.07, v=0.4)
        $ 529 "gGD_2_M_RX" "breakAfter"
        set_tcp(p[0.0,0.09,0.42,1.894,0.0,0.0])
        movel(pose_trans(UF, gGD_2_M_RX), a=0.07, v=0.4)
        $ 530 "設定 GPBO_BLStop=HI:Pulse 1.0"
        thread SinglePulse2248():
          write_output_boolean_register(14, True)
          sleep(1.0)
          write_output_boolean_register(14, False)
        end
        singlePulse2248 = run SinglePulse2248()
        $ 531 "待機: 0.5"
        sleep(0.5)
        $ 533 "tm_handin: リセット"
        tm_handin = 0
        $ 534 "tm_handin: 起動"
        tm_handin_is_counting = True
        $ 535 "設定 DO[1]=オン"
        set_standard_digital_out(1, True)
        $ 536 "フォース"
        sleep(0.02)
        zero_ftsensor()
        force_mode(tool_pose(), [1, 1, 1, 0, 0, 0], [0.0, 0.0, 20.0, 0.0, 0.0, 0.0], 2, [0.005, 0.005, 0.04, 0.3490658503988659, 0.3490658503988659, 0.3490658503988659])
        $ 537 "ShakeCnt:=-1" "noBreak"
        global ShakeCnt=-1
        $ 538 "ループ ((Currpos_p_UF0[1]>(gGD_2_M_RX[1]-HandInZ)) and (tm_handin<GPII_TMHandIn))" "noBreak"
        while (((Currpos_p_UF0[1]>(gGD_2_M_RX[1]-HandInZ))  and  (tm_handin<read_input_integer_register(12)))):
          $ 539 "If文 UseShake" "noBreak"
          if (UseShake):
            $ 540 "If文 ShakeCnt<0" "noBreak"
            if (ShakeCnt<0):
              $ 541 "NOT_SHAKE" "noBreak"
              $ 542 "tm_104: 起動" "noBreak"
              tm_104_is_counting = True
              $ 543 "待機 tm_104>ShakeWaitSec" "noBreak"
              while (not(tm_104>ShakeWaitSec)):
                sync()
              end
              $ 544 "tm_104: 停止" "noBreak"
              tm_104_is_counting = False
              $ 545 "tm_104: リセット" "noBreak"
              tm_104 = 0
              $ 546 "ShakeCnt:=0" "noBreak"
              global ShakeCnt=0
            end
            $ 547 "IsShake:= False " "noBreak"
            global IsShake=  False  
            $ 548 "MONITOR_SPEED" "noBreak"
            $ 549 "tm_104: リセット" "noBreak"
            tm_104 = 0
            $ 550 "If文 norm(TCPSpeed[1])<TCPSpeedThZ" "noBreak"
            if (norm(TCPSpeed[1])<TCPSpeedThZ):
              $ 551 "IsShake:= True " "noBreak"
              global IsShake=  True  
              $ 552 "If文 ShakeCnt≟0" "noBreak"
              if (ShakeCnt == 0):
                $ 553 "tm_104: 起動" "noBreak"
                tm_104_is_counting = True
                $ 554 "ループ ((tm_104<1.0) and (IsShake≟ True ))" "noBreak"
                while (((tm_104<1.0)  and  (IsShake ==   True  ))):
                  $ 555 "If文 norm(TCPSpeed[1])≥TCPSpeedThZ" "noBreak"
                  if (norm(TCPSpeed[1]) >= TCPSpeedThZ):
                    $ 556 "IsShake:= False " "noBreak"
                    global IsShake=  False  
                  end
                end
                $ 557 "tm_104: 停止" "noBreak"
                tm_104_is_counting = False
              end
              $ 558 "ShakeCnt:=ShakeCnt+1" "noBreak"
              global ShakeCnt=ShakeCnt+1
            end
            $ 559 "SHAKE" "noBreak"
            $ 560 "If文 IsShake" "noBreak"
            if (IsShake):
              $ 561 "Sub3100_Option:=7" "noBreak"
              global Sub3100_Option=7
              $ 562 "ループ2回" "noBreak"
              u12523u12540u12503_8 = 0
              while (u12523u12540u12503_8 < 2):
                $ 563 "'7:RX+,8:RX-,9:RY+,10:RY-,11:RZ+,12:RZ-'" "noBreak"
                # '7:RX+,8:RX-,9:RY+,10:RY-,11:RZ+,12:RZ-'
                $ 564 "Sub3100_Xd:=[0.,0.,0.,0.,0.,0.]" "noBreak"
                global Sub3100_Xd=[0.,0.,0.,0.,0.,0.]
                $ 565 "Sub3100_q:=floor((Sub3100_Option-1) / 2)" "noBreak"
                global Sub3100_q=floor((Sub3100_Option-1) / 2)
                $ 566 "Sub3100_e:=1-((Sub3100_Option-1) % 2)*2" "noBreak"
                global Sub3100_e=1-((Sub3100_Option-1) % 2)*2
                $ 567 "Sub3100_t:=0.2" "noBreak"
                global Sub3100_t=0.2
                $ 568 "Sub3100_Xd[Sub3100_q]=d2r(Sub3100_XdRot/2.0)*Sub3100_e" "noBreak"
                Sub3100_Xd[Sub3100_q]= d2r (Sub3100_XdRot/2.0)*Sub3100_e
                $ 569 "speedl(Sub3100_Xd,Sub3100_aRot/2.0,Sub3100_t)" "noBreak"
                speedl(Sub3100_Xd,Sub3100_aRot/2.0,Sub3100_t)
                $ 570 "If文 Sub3100_Option≟7" "noBreak"
                if (Sub3100_Option == 7):
                  $ 571 "Sub3100_Option:=8" "noBreak"
                  global Sub3100_Option=8
                else:
                  $ 572 "Else" "noBreak"
                  $ 573 "Sub3100_Option:=7" "noBreak"
                  global Sub3100_Option=7
                end
                $ 574 "待機: 0.1" "noBreak"
                sleep(0.1)
                u12523u12540u12503_8 = u12523u12540u12503_8 + 1
              end
              $ 575 "IsShake:= False " "noBreak"
              global IsShake=  False  
            end
          end
          $ 576 "待機: 0.1" "noBreak"
          sleep(0.1)
        end
        end_force_mode()
        stopl(5.0)
        $ 577 "設定 DO[1]=オフ"
        set_standard_digital_out(1, False)
        $ 578 "tm_handin: 停止"
        tm_handin_is_counting = False
        $ 579 "設定 GPBO_BLStart=HI:Pulse 1.0"
        thread SinglePulse2249():
          write_output_boolean_register(15, True)
          sleep(1.0)
          write_output_boolean_register(15, False)
        end
        singlePulse2249 = run SinglePulse2249()
      end
    end
    $ 583 "tm_steady_104: リセット"
    tm_steady_104 = 0
    $ 584 "tm_steady_104: 起動"
    tm_steady_104_is_counting = True
    $ 585 "待機 is_steady()"
    while (not(is_steady())):
      sync()
    end
    $ 586 "tm_steady_104: 停止"
    tm_steady_104_is_counting = False
    $ 588 "If文 ( not GPBI_WorkExists)"
    if ((  not  read_input_boolean_register(9))):
      $ 589 "If文 (0≤DistPillar and DistPillar≤DistPillarAPTh)"
      if ((0 <= DistPillar  and  DistPillar <= DistPillarAPTh)):
        $ 590 "MoveL"
        $ 591 "gGD_2_LM_RX" "breakAfter"
        set_tcp(p[0.0,0.09,0.42,1.894,0.0,0.0])
        movel(pose_trans(UF, gGD_2_LM_RX), a=0.14, v=0.4)
        $ 592 "gGD_3_LM_RX" "breakAfter"
        set_tcp(p[0.0,0.09,0.42,1.894,0.0,0.0])
        movel(pose_trans(UF, gGD_3_LM_RX), a=0.14, v=0.4)
        $ 593 "MoveL"
        $ 594 "gGD_4_LM" "breakAfter"
        set_tcp(p[0.0,0.09,0.42,1.894,0.0,0.0])
        movel(pose_trans(UF, gGD_4_LM), a=0.14, v=0.4)
      else:
        $ 595 "ElseIf (-DistPillarAPTh≤DistPillar and DistPillar≤0)"
        if ((-DistPillarAPTh <= DistPillar  and  DistPillar <= 0)):
          $ 596 "MoveL"
          $ 597 "gGD_2_RM_RX" "breakAfter"
          set_tcp(p[0.0,0.09,0.42,1.894,0.0,0.0])
          movel(pose_trans(UF, gGD_2_RM_RX), a=0.07, v=0.4)
          $ 598 "gGD_3_RM_RX" "breakAfter"
          set_tcp(p[0.0,0.09,0.42,1.894,0.0,0.0])
          movel(pose_trans(UF, gGD_3_RM_RX), a=0.07, v=0.4)
          $ 599 "MoveL"
          $ 600 "gGD_4_RM" "breakAfter"
          set_tcp(p[0.0,0.09,0.42,1.894,0.0,0.0])
          movel(pose_trans(UF, gGD_4_RM), a=0.07, v=0.4)
        else:
          $ 601 "Else" "noBreak"
          $ 602 "MoveL"
          $ 603 "gGD_2_M_RX" "breakAfter"
          set_tcp(p[0.0,0.09,0.42,1.894,0.0,0.0])
          movel(pose_trans(UF, gGD_2_M_RX), a=0.07, v=0.4)
          $ 604 "gGD_3_M_RX" "breakAfter"
          set_tcp(p[0.0,0.09,0.42,1.894,0.0,0.0])
          movel(pose_trans(UF, gGD_3_M_RX), a=0.07, v=0.4)
        end
      end
      $ 605 "荷重の設定: k25"
      set_target_payload(0.100000, [0.135000, 0.000000, 0.225000], [25.000000, 25.000000, 25.000000, 0.000000, 0.000000, 0.000000])
      $ 606 "ROVI_CAPTURE"
      $ 607 "CaptPos:=GET_CAPTPOS()"
      global CaptPos=GET_CAPTPOS()
      $ 608 "MoveL"
      $ 609 "CaptPos" "breakAfter"
      set_tcp(p[0.0,0.09,0.42,0.0,0.0,0.0])
      movel(pose_trans(Bucket, CaptPos), a=0.14, v=0.4)
      $ 610 "待機: 1.0"
      sleep(1.0)
      $ 612 "SubPrgResult:=821"
      global SubPrgResult=821
      $ 613 "待機: 999999.0"
      sleep(999999.0)
    end
  end
  def SUB_105():
    $ 614 "SUB_105" "noBreak"
    $ 615 "UF:=Y2"
    global UF=Y2
    $ 616 "PICK"
    $ 617 "FREE_DRIVE"
    $ 618 "荷重の設定: k2"
    set_target_payload(0.100000, [0.135000, 0.000000, 0.225000], [2.000000, 2.000000, 2.000000, 0.000000, 0.000000, 0.000000])
    $ 619 "freedrive_mode()"
    freedrive_mode()
    $ 620 "設定"
    set_tcp(p[0.0,0.0,0.0,0.0,0.0,0.0])
    $ 621 "待機: 0.5"
    sleep(0.5)
    $ 622 "end_freedrive_mode()"
    end_freedrive_mode()
    $ 623 "ForceStartZ:=CurrPos_p[2]"
    global ForceStartZ=CurrPos_p[2]
    $ 624 "If文 LevelZ<0"
    if (LevelZ<0):
      $ 625 "CutOffZ:=0.0"
      global CutOffZ=0.0
    else:
      $ 626 "Else" "noBreak"
      $ 627 "CutOffZ:=LevelZ"
      global CutOffZ=LevelZ
    end
    $ 628 "CutOffZAdd:=NeighborZ+BeyondZ"
    global CutOffZAdd=NeighborZ+BeyondZ
    $ 630 "TCPForceBak:=TCPForce"
    global TCPForceBak=TCPForce
    $ 631 "tm_cutoff: リセット"
    tm_cutoff = 0
    $ 632 "tm_cutoff: 起動"
    tm_cutoff_is_counting = True
    $ 659 "設定 DO[3]=オン"
    set_standard_digital_out(3, True)
    $ 660 "FORCE_CUTOFF"
    $ 661 "荷重の設定: k1"
    set_target_payload(0.100000, [0.135000, 0.000000, 0.225000], [0.100000, 0.100000, 0.100000, 0.000000, 0.000000, 0.000000])
    $ 662 "待機: 0.02"
    sleep(0.02)
    $ 664 "ForceStep:=0"
    global ForceStep=0
    $ 665 "If文 (0≤DistPillar and DistPillar≤DistPillarCOTh)"
    if ((0 <= DistPillar  and  DistPillar <= DistPillarCOTh)):
      $ 666 "ForceValue:=[40,0,40,0,0,0]"
      global ForceValue=[40,0,40,0,0,0]
    else:
      $ 667 "ElseIf (-DistPillarCOTh≤DistPillar and DistPillar≤0)"
      if ((-DistPillarCOTh <= DistPillar  and  DistPillar <= 0)):
        $ 668 "ForceValue:=[-40,0,40,0,0,0]"
        global ForceValue=[-40,0,40,0,0,0]
      else:
        $ 669 "Else" "noBreak"
        $ 670 "ForceValue:=[0,0,40,0,0,0]"
        global ForceValue=[0,0,40,0,0,0]
      end
    end
    $ 671 "ForceFeature:=Bucket"
    global ForceFeature=Bucket
    $ 672 "CutOffZ:=CutOffZ+CutOffZAdd"
    global CutOffZ=CutOffZ+CutOffZAdd
    $ 673 "ループ tm_cutoff<GPII_TMCutOff"
    while (tm_cutoff<read_input_integer_register(13)):
      $ 674 "If文 WorkPosNo≟0"
      if (WorkPosNo == 0):
        $ 675 "ForceValue[5]=-GET_FORCE_VALUE_RZ(g2GD_pos5)"
        ForceValue[5]=-GET_FORCE_VALUE_RZ(g2GD_pos5)
      else:
        $ 676 "ElseIf WorkPosNo≟1"
        if (WorkPosNo == 1):
          $ 677 "ForceValue[5]=-GET_FORCE_VALUE_RZ(g1GD_pos5)"
          ForceValue[5]=-GET_FORCE_VALUE_RZ(g1GD_pos5)
        end
      end
      $ 678 "スイッチ文 ForceStep"
      switch_1 = ForceStep
      $ 679 "ケース 0"
      if (0 == switch_1):
        $ 680 "ForceStep:=1"
        global ForceStep=1
        $ 681 "ForceLimit:=[0.01,0.01,ForceLimitZ[ForceStep-1],d2r(10.),d2r(10.),d2r(10.)]"
        global ForceLimit=[0.01,0.01,ForceLimitZ[ForceStep-1], d2r (10.), d2r (10.), d2r (10.)]
        $ 682 "force_mode(ForceFeature,ForceAxis,ForceValue,ForceType,ForceLimit)"
        force_mode(ForceFeature,ForceAxis,ForceValue,ForceType,ForceLimit)
      elif (1 == switch_1):
        $ 683 "ケース 1"
        $ 684 "If文 GPBI_BLLoad1"
        if (read_input_boolean_register(10)):
          $ 685 "ForceStep:=2"
          global ForceStep=2
          $ 686 "ForceLimit:=[0.01,0.01,ForceLimitZ[ForceStep-1],d2r(10.),d2r(10.),d2r(10.)]"
          global ForceLimit=[0.01,0.01,ForceLimitZ[ForceStep-1], d2r (10.), d2r (10.), d2r (10.)]
          $ 687 "force_mode(ForceFeature,ForceAxis,ForceValue,ForceType,ForceLimit)"
          force_mode(ForceFeature,ForceAxis,ForceValue,ForceType,ForceLimit)
        else:
          $ 688 "ElseIf UseRZSuppress"
          if (UseRZSuppress):
            $ 689 "force_mode(ForceFeature,ForceAxis,ForceValue,ForceType,ForceLimit)"
            force_mode(ForceFeature,ForceAxis,ForceValue,ForceType,ForceLimit)
          end
        end
      elif (2 == switch_1):
        $ 690 "ケース 2"
        $ 691 "If文 GPBI_BLLoad2"
        if (read_input_boolean_register(11)):
          $ 692 "break"
          break
        end
        $ 693 "If文 CurrPos_p[2]>ForceStartZ+CutOffZ"
        if (CurrPos_p[2]>ForceStartZ+CutOffZ):
          $ 694 "ForceStep:=3"
          global ForceStep=3
          $ 695 "ForceValue[2]=0.0"
          ForceValue[2]=0.0
          $ 696 "ForceLimit:=[0.01,0.01,ForceLimitZ[ForceStep-1],d2r(10.),d2r(10.),d2r(10.)]"
          global ForceLimit=[0.01,0.01,ForceLimitZ[ForceStep-1], d2r (10.), d2r (10.), d2r (10.)]
          $ 697 "force_mode(ForceFeature,ForceAxis,ForceValue,ForceType,ForceLimit)"
          force_mode(ForceFeature,ForceAxis,ForceValue,ForceType,ForceLimit)
        else:
          $ 698 "ElseIf UseRZSuppress"
          if (UseRZSuppress):
            $ 699 "force_mode(ForceFeature,ForceAxis,ForceValue,ForceType,ForceLimit)"
            force_mode(ForceFeature,ForceAxis,ForceValue,ForceType,ForceLimit)
          end
        end
      elif (3 == switch_1):
        $ 700 "ケース 3"
        $ 701 "If文 GPBI_BLLoad2"
        if (read_input_boolean_register(11)):
          $ 702 "break"
          break
        end
        $ 703 "If文 (UseRZSuppress and (ForceValue[5]≠0.0))"
        if ((UseRZSuppress  and  (ForceValue[5] != 0.0))):
          $ 704 "force_mode(ForceFeature,ForceAxis,ForceValue,ForceType,ForceLimit)"
          force_mode(ForceFeature,ForceAxis,ForceValue,ForceType,ForceLimit)
        else:
          $ 705 "Else" "noBreak"
          $ 706 "If文 CHECK_SPEED(StopSpeed) and ((UseRZSuppress and (ForceValue[5]==0.0)) or ( not UseRZSuppress))"
          if (CHECK_SPEED(StopSpeed)  and  ((UseRZSuppress  and  (ForceValue[5]==0.0))  or  (  not  UseRZSuppress))):
            $ 707 "break"
            break
          end
        end
      end
      $ 712 "sync()"
      sync()
    end
    $ 713 "end_force_mode()"
    end_force_mode()
    $ 714 "stopl(5.0)"
    stopl(5.0)
    $ 718 "設定 DO[3]=オフ"
    set_standard_digital_out(3, False)
    $ 719 "待機 is_steady()"
    while (not(is_steady())):
      sync()
    end
    $ 720 "tm_cutoff: 停止"
    tm_cutoff_is_counting = False
    $ 721 "If文 (GPBI_BLLoad2)"
    if ((read_input_boolean_register(11))):
      $ 722 "SubPrgResult:=825"
      global SubPrgResult=825
      $ 723 "待機: 999999.0"
      sleep(999999.0)
    end
    $ 724 "If文 ( not GPBI_BLLoad1)"
    if ((  not  read_input_boolean_register(10))):
      $ 725 "SubPrgResult:=822"
      global SubPrgResult=822
      $ 726 "待機: 999999.0"
      sleep(999999.0)
    end
    $ 727 "荷重の設定: k10"
    set_target_payload(0.100000, [0.135000, 0.000000, 0.225000], [10.000000, 10.000000, 10.000000, 0.000000, 0.000000, 0.000000])
    $ 731 "tm_steady_105: リセット"
    tm_steady_105 = 0
    $ 732 "tm_steady_105: 起動"
    tm_steady_105_is_counting = True
    $ 733 "待機 is_steady()"
    while (not(is_steady())):
      sync()
    end
    $ 734 "tm_steady_105: 停止"
    tm_steady_105_is_counting = False
    $ 735 "設定 DO[0]=オン"
    set_standard_digital_out(0, True)
    $ 736 "FREE_DRIVE"
    $ 737 "freedrive_mode()"
    freedrive_mode()
    $ 738 "荷重の設定: k2"
    set_target_payload(0.100000, [0.135000, 0.000000, 0.225000], [2.000000, 2.000000, 2.000000, 0.000000, 0.000000, 0.000000])
    $ 739 "設定"
    set_tcp(p[0.0,0.0,0.0,0.0,0.0,0.0])
    $ 740 "待機: 1.5"
    sleep(1.5)
    $ 741 "end_freedrive_mode()"
    end_freedrive_mode()
    $ 742 "待機 is_steady()"
    while (not(is_steady())):
      sync()
    end
    $ 743 "設定 DO[0]=オフ"
    set_standard_digital_out(0, False)
    $ 744 "CV_CORR_RZ"
    $ 745 "If文 UseCVCorr"
    if (UseCVCorr):
      $ 746 "設定"
      set_tcp(p[0.0,0.09,0.42,0.0,0.0,0.0])
      $ 747 "sync()"
      sync()
      $ 748 "CurrPos_p=get_actual_tcp_pose()"
      CurrPos_p= get_actual_tcp_pose ()
      $ 749 "CurrposAligned:=p[0,0,0,0,0,0]"
      global CurrposAligned=p[0,0,0,0,0,0]
      $ 750 "CurrposAligned:=GET_ALIGNED_TCP(CurrposAligned)"
      global CurrposAligned=GET_ALIGNED_TCP(CurrposAligned)
      $ 751 "CVCorrRZVal:=GET_CVCORR_RZ(CurrposAligned)"
      global CVCorrRZVal=GET_CVCORR_RZ(CurrposAligned)
    end
    $ 752 "CUTOFF_POSE"
    $ 753 "If文 UseCutOffTCP"
    if (UseCutOffTCP):
      $ 754 "設定"
      set_tcp(p[0.0,0.09,0.42,0.0,0.0,0.0])
      $ 755 "CutOffPos:=p[0.,0.,0.,0.,0.,0.]"
      global CutOffPos=p[0.,0.,0.,0.,0.,0.]
      $ 756 "CutOffPos:=GET_ALIGNED_TCP(CutOffPos)"
      global CutOffPos=GET_ALIGNED_TCP(CutOffPos)
      $ 757 "CutOffTCP:=pose_trans(pose_inv(CurrPos),CutOffPos)"
      global CutOffTCP= pose_trans ( pose_inv (CurrPos),CutOffPos)
      $ 758 "設定"
      set_tcp(p[0.0,0.0,0.0,0.0,0.0,0.0])
      $ 759 "CutOffTCP:=pose_trans(get_tcp_offset(),CutOffTCP)"
      global CutOffTCP= pose_trans (get_tcp_offset(),CutOffTCP)
      $ 760 "設定"
      set_tcp(p[0.0,0.09,0.42,0.0,0.0,0.0])
    else:
      $ 761 "Else" "noBreak"
      $ 762 "設定"
      set_tcp(p[0.0,0.09,0.42,0.0,0.0,0.0])
      $ 763 "CutOffTCP:=get_tcp_offset()"
      global CutOffTCP=get_tcp_offset()
    end
  end
  def SUB_106():
    $ 764 "SUB_106" "noBreak"
    $ 765 "If文 GPBI_WorkExists"
    global thread_flag_765=0
    thread Thread_if_765():
      $ 766 "TRANSFER"
      $ 767 "If文 (WorkPosNo≟0)"
      if ((WorkPosNo == 0)):
        $ 768 "設定 DO[7]=オン"
        set_standard_digital_out(7, True)
        $ 769 "荷重の設定: k120"
        set_target_payload(0.100000, [0.135000, 0.000000, 0.225000], [120.000000, 120.000000, 120.000000, 0.000000, 0.000000, 0.000000])
        $ 770 "If文 UseBaseZRotate"
        if (UseBaseZRotate):
          $ 771 "設定"
          set_tcp(p[0.0,-0.16,0.42,0.0,0.0,0.0])
          $ 772 "sync()"
          sync()
          $ 773 "CurrPos_p=get_actual_tcp_pose()"
          CurrPos_p= get_actual_tcp_pose ()
          $ 774 "MoveL"
          $ 775 "PoseSub:=pose_sub(CurrPos_p,g2GD_pos5_NEAR)"
          global PoseSub= pose_sub (CurrPos_p,g2GD_pos5_NEAR)
          $ 776 "RZSub:=r2d(PoseSub[5])"
          global RZSub=r2d(PoseSub[5])
          $ 777 "If文 (norm(PoseSub[5])≥d2r(RZTh))"
          if ((norm(PoseSub[5]) >= d2r(RZTh))):
            $ 778 "PoseAdd:=pose_add(p[0,0,0,0,0,d2r(RZSub)],p[0,0,0,CurrPos_p[3],CurrPos_p[4],CurrPos_p[5]])"
            global PoseAdd= pose_add (p[0,0,0,0,0,d2r(RZSub)],p[0,0,0,CurrPos_p[3],CurrPos_p[4],CurrPos_p[5]])
            $ 779 "PoseAdd:=p[CurrPos_p[0],CurrPos_p[1],CurrPos_p[2],PoseAdd[3],PoseAdd[4],PoseAdd[5]]"
            global PoseAdd=p[CurrPos_p[0],CurrPos_p[1],CurrPos_p[2],PoseAdd[3],PoseAdd[4],PoseAdd[5]]
            $ 780 "PoseAdd" "breakAfter"
            set_tcp(p[0.0,-0.16,0.42,0.0,0.0,0.0])
            movel(PoseAdd, a=0.01, v=0.06)
          end
        else:
          $ 781 "Else" "noBreak"
          $ 782 "MoveL"
          $ 783 "PoseSub:=pose_sub(CurrPos, pose_trans(g2GD_pos5, pose_inv(get_tcp_offset())))"
          global PoseSub= pose_sub (CurrPos,  pose_trans (g2GD_pos5,  pose_inv (get_tcp_offset())))
          $ 784 "RZSub:=r2d(PoseSub[5])"
          global RZSub=r2d(PoseSub[5])
          $ 785 "If文 (norm(PoseSub[5])≥d2r(RZTh))"
          if ((norm(PoseSub[5]) >= d2r(RZTh))):
            $ 786 "PoseSub[0]=0.0"
            PoseSub[0]=0.0
            $ 787 "PoseSub[1]=0.0"
            PoseSub[1]=0.0
            $ 788 "PoseSub[2]=0.0"
            PoseSub[2]=0.0
            $ 789 "PoseAdd:=pose_add(PoseSub, CurrPos)"
            global PoseAdd= pose_add (PoseSub, CurrPos)
            $ 790 "PoseAdd" "breakAfter"
            set_tcp(p[0.0,0.0,0.0,0.0,0.0,0.0])
            movel(PoseAdd, a=0.01, v=0.06)
          end
        end
        $ 793 "set_tcp(CutOffTCP)"
        set_tcp(CutOffTCP)
        $ 794 "MoveL"
        $ 795 "If文 UseZSlide"
        if (UseZSlide):
          $ 796 "gGD_pos5:=GET_ZSLIDE_POS(g2GD_pos5_NEAR)"
          global gGD_pos5=GET_ZSLIDE_POS(g2GD_pos5_NEAR)
        else:
          $ 797 "Else" "noBreak"
          $ 798 "gGD_pos5:=g2GD_pos5"
          global gGD_pos5=g2GD_pos5
        end
        $ 799 "DistBKUpper=GET_DIST(CurrPos_p,gGD_pos5)"
        DistBKUpper=GET_DIST(CurrPos_p,gGD_pos5)
        $ 800 "If文 ( not CHECK_DIST_NEAR(CurrPos_p, gGD_pos5, DistBKUpperTh))"
        if ((  not  CHECK_DIST_NEAR(CurrPos_p, gGD_pos5, DistBKUpperTh))):
          $ 801 "gGD_pos5" "breakAfter"
          movel(gGD_pos5, a=0.05, v=0.25)
        end
        $ 802 "設定 DO[7]=オフ"
        set_standard_digital_out(7, False)
        $ 803 "設定 DO[6]=オン"
        set_standard_digital_out(6, True)
        $ 804 "MoveL"
        $ 805 "荷重の設定: k10"
        set_target_payload(0.100000, [0.135000, 0.000000, 0.225000], [10.000000, 10.000000, 10.000000, 0.000000, 0.000000, 0.000000])
        $ 806 "g2GD_pos4" "breakAfter"
        movel(g2GD_pos4, a=0.14, v=0.4)
        $ 807 "g2GD_pos3" "breakAfter"
        movel(g2GD_pos3, a=0.14, v=0.4, r=0.1)
        $ 808 "g2GD_pos2" "breakAfter"
        movel(g2GD_pos2, a=0.07, v=0.4)
        $ 809 "設定 DO[6]=オフ"
        set_standard_digital_out(6, False)
        $ 810 "設定 DO[4]=オン"
        set_standard_digital_out(4, True)
        $ 811 "MoveL"
        $ 812 "荷重の設定: k120"
        set_target_payload(0.100000, [0.135000, 0.000000, 0.225000], [120.000000, 120.000000, 120.000000, 0.000000, 0.000000, 0.000000])
        $ 813 "g2GD_pos1" "breakAfter"
        movel(g2GD_pos1, a=0.07, v=0.4, r=0.05)
      else:
        $ 814 "ElseIf (WorkPosNo≟1)"
        if ((WorkPosNo == 1)):
          $ 815 "荷重の設定: k120"
          set_target_payload(0.100000, [0.135000, 0.000000, 0.225000], [120.000000, 120.000000, 120.000000, 0.000000, 0.000000, 0.000000])
          $ 816 "設定"
          set_tcp(p[0.0,-0.16,0.42,0.0,0.0,0.0])
          $ 817 "If文 UseBaseZRotate"
          if (UseBaseZRotate):
            $ 818 "sync()"
            sync()
            $ 819 "CurrPos_p=get_actual_tcp_pose()"
            CurrPos_p= get_actual_tcp_pose ()
            $ 820 "MoveL"
            $ 821 "PoseSub:=pose_sub(CurrPos_p,g1GD_pos5_NEAR)"
            global PoseSub= pose_sub (CurrPos_p,g1GD_pos5_NEAR)
            $ 822 "RZSub:=r2d(PoseSub[5])"
            global RZSub=r2d(PoseSub[5])
            $ 823 "If文 (norm(PoseSub[5])≥d2r(RZTh))"
            if ((norm(PoseSub[5]) >= d2r(RZTh))):
              $ 824 "PoseAdd:=pose_add(p[0,0,0,0,0,d2r(RZSub)],p[0,0,0,CurrPos_p[3],CurrPos_p[4],CurrPos_p[5]])"
              global PoseAdd= pose_add (p[0,0,0,0,0,d2r(RZSub)],p[0,0,0,CurrPos_p[3],CurrPos_p[4],CurrPos_p[5]])
              $ 825 "PoseAdd:=p[CurrPos_p[0],CurrPos_p[1],CurrPos_p[2],PoseAdd[3],PoseAdd[4],PoseAdd[5]]"
              global PoseAdd=p[CurrPos_p[0],CurrPos_p[1],CurrPos_p[2],PoseAdd[3],PoseAdd[4],PoseAdd[5]]
              $ 826 "PoseAdd" "breakAfter"
              set_tcp(p[0.0,-0.16,0.42,0.0,0.0,0.0])
              movel(PoseAdd, a=0.01, v=0.06)
            end
          else:
            $ 827 "Else" "noBreak"
            $ 828 "MoveL"
            $ 829 "PoseSub:=pose_sub(CurrPos, pose_trans(g1GD_pos5, pose_inv(get_tcp_offset())))"
            global PoseSub= pose_sub (CurrPos,  pose_trans (g1GD_pos5,  pose_inv (get_tcp_offset())))
            $ 830 "RZSub:=r2d(PoseSub[5])"
            global RZSub=r2d(PoseSub[5])
            $ 831 "If文 (norm(PoseSub[5])≥d2r(RZTh))"
            if ((norm(PoseSub[5]) >= d2r(RZTh))):
              $ 832 "PoseSub[0]=0.0"
              PoseSub[0]=0.0
              $ 833 "PoseSub[1]=0.0"
              PoseSub[1]=0.0
              $ 834 "PoseSub[2]=0.0"
              PoseSub[2]=0.0
              $ 835 "PoseAdd:=pose_add(PoseSub, CurrPos)"
              global PoseAdd= pose_add (PoseSub, CurrPos)
              $ 836 "PoseAdd" "breakAfter"
              set_tcp(p[0.0,0.0,0.0,0.0,0.0,0.0])
              movel(PoseAdd, a=0.01, v=0.06)
            end
          end
          $ 839 "set_tcp(CutOffTCP)"
          set_tcp(CutOffTCP)
          $ 840 "MoveL"
          $ 841 "If文 UseZSlide"
          if (UseZSlide):
            $ 842 "gGD_pos5:=GET_ZSLIDE_POS(g1GD_pos5_NEAR)"
            global gGD_pos5=GET_ZSLIDE_POS(g1GD_pos5_NEAR)
          else:
            $ 843 "Else" "noBreak"
            $ 844 "gGD_pos5:=g1GD_pos5"
            global gGD_pos5=g1GD_pos5
          end
          $ 845 "DistBKUpper=GET_DIST(CurrPos_p,gGD_pos5)"
          DistBKUpper=GET_DIST(CurrPos_p,gGD_pos5)
          $ 846 "If文 ( not CHECK_DIST_NEAR(CurrPos_p, gGD_pos5, DistBKUpperTh))"
          if ((  not  CHECK_DIST_NEAR(CurrPos_p, gGD_pos5, DistBKUpperTh))):
            $ 847 "gGD_pos5" "breakAfter"
            movel(gGD_pos5, a=0.05, v=0.25)
          end
          $ 848 "設定 DO[4]=オフ"
          set_standard_digital_out(4, False)
          $ 849 "設定 DO[6]=オン"
          set_standard_digital_out(6, True)
          $ 850 "MoveL"
          $ 851 "荷重の設定: k10"
          set_target_payload(0.100000, [0.135000, 0.000000, 0.225000], [10.000000, 10.000000, 10.000000, 0.000000, 0.000000, 0.000000])
          $ 852 "g1GD_pos3" "breakAfter"
          movel(g1GD_pos3, a=0.14, v=0.4)
          $ 853 "g1GD_pos2" "breakAfter"
          movel(g1GD_pos2, a=0.14, v=0.4)
          $ 854 "設定 DO[6]=オフ"
          set_standard_digital_out(6, False)
          $ 855 "設定 DO[4]=オン"
          set_standard_digital_out(4, True)
          $ 856 "MoveL"
          $ 857 "荷重の設定: k120"
          set_target_payload(0.100000, [0.135000, 0.000000, 0.225000], [120.000000, 120.000000, 120.000000, 0.000000, 0.000000, 0.000000])
          $ 858 "g1GD_pos1" "breakAfter"
          movel(g1GD_pos1, a=0.14, v=0.4, r=0.1)
        end
      end
      thread_flag_765 = 1
    end
    if (read_input_boolean_register(9)):
      global thread_handler_765=run Thread_if_765()
      while (thread_flag_765 == 0):
        if not(read_input_boolean_register(9)):
          kill thread_handler_765
          thread_flag_765 = 2
        else:
          sync()
        end
      end
    else:
      thread_flag_765 = 2
    end
    $ 859 "設定 DO[4]=オフ"
    set_standard_digital_out(4, False)
    $ 860 "If文 ( not GPBI_WorkExists)"
    if ((  not  read_input_boolean_register(9))):
      $ 861 "SubPrgResult:=820"
      global SubPrgResult=820
      $ 862 "待機: 999999.0"
      sleep(999999.0)
    end
  end
  def SUB_120():
    $ 863 "SUB_120" "noBreak"
    $ 864 "If文 GPBI_WorkExists"
    global thread_flag_864=0
    thread Thread_if_864():
      $ 865 "TRANSFER"
      $ 866 "set_tcp(CutOffTCP)"
      set_tcp(CutOffTCP)
      $ 867 "MoveL"
      $ 868 "荷重の設定: k10"
      set_target_payload(0.100000, [0.135000, 0.000000, 0.225000], [10.000000, 10.000000, 10.000000, 0.000000, 0.000000, 0.000000])
      $ 869 "g2GD_pos1" "breakAfter"
      movel(g2GD_pos1, a=0.03, v=0.15)
      $ 870 "待機: 0.5"
      sleep(0.5)
      thread_flag_864 = 1
    end
    if (read_input_boolean_register(9)):
      global thread_handler_864=run Thread_if_864()
      while (thread_flag_864 == 0):
        if not(read_input_boolean_register(9)):
          kill thread_handler_864
          thread_flag_864 = 2
        else:
          sync()
        end
      end
    else:
      thread_flag_864 = 2
    end
    $ 871 "If文 ( not GPBI_WorkExists)"
    if ((  not  read_input_boolean_register(9))):
      $ 872 "SubPrgResult:=820"
      global SubPrgResult=820
      $ 873 "待機: 999999.0"
      sleep(999999.0)
    end
  end
  def SUB_121():
    $ 874 "SUB_121" "noBreak"
    $ 875 "SET_CV()"
    SET_CV()
    $ 876 "If文 GPBI_WorkExists"
    global thread_flag_876=0
    thread Thread_if_876():
      $ 877 "If文 GPBI_AllowGoCV≠ True "
      if (read_input_boolean_register(12) !=   True  ):
        $ 878 "SubPrgResult:=823"
        global SubPrgResult=823
        $ 879 "待機: 999999.0"
        sleep(999999.0)
      end
      $ 880 "荷重の設定: k120"
      set_target_payload(0.100000, [0.135000, 0.000000, 0.225000], [120.000000, 120.000000, 120.000000, 0.000000, 0.000000, 0.000000])
      $ 881 "MoveL"
      $ 882 "gCV_2_M" "breakAfter"
      movel(pose_trans(CV, gCV_2_M), a=0.07, v=0.5)
      $ 883 "set_tcp(CutOffTCP)"
      set_tcp(CutOffTCP)
      $ 884 "MoveL"
      $ 885 "gCV_1_M" "breakAfter"
      movel(pose_trans(CV, gCV_1_M), a=0.07, v=0.3)
      $ 886 "設定"
      set_tcp(p[0.0,0.09,0.42,0.0,0.0,0.0])
      $ 888 "CV_CORR_RZ"
      $ 889 "If文 UseCVCorr"
      if (UseCVCorr):
        $ 890 "RZSub:=CVCorrRZVal"
        global RZSub=CVCorrRZVal
        $ 891 "設定"
        set_tcp(p[0.0,0.09,0.42,0.0,0.0,0.0])
        $ 892 "待機: 0.02"
        sleep(0.02)
        $ 893 "CurrPos_p=get_actual_tcp_pose()"
        CurrPos_p= get_actual_tcp_pose ()
        $ 894 "MoveL"
        $ 895 "PoseAdd:=pose_add(p[0,0,0,0,0,d2r(-RZSub)],p[0,0,0,CurrPos_p[3],CurrPos_p[4],CurrPos_p[5]])"
        global PoseAdd= pose_add (p[0,0,0,0,0,d2r(-RZSub)],p[0,0,0,CurrPos_p[3],CurrPos_p[4],CurrPos_p[5]])
        $ 896 "PoseAdd:=p[CurrPos_p[0],CurrPos_p[1],CurrPos_p[2],PoseAdd[3],PoseAdd[4],PoseAdd[5]]"
        global PoseAdd=p[CurrPos_p[0],CurrPos_p[1],CurrPos_p[2],PoseAdd[3],PoseAdd[4],PoseAdd[5]]
        $ 897 "PoseAdd" "breakAfter"
        set_tcp(p[0.0,0.09,0.42,0.0,0.0,0.0])
        movel(PoseAdd, a=0.01, v=0.06)
      end
      thread_flag_876 = 1
    end
    if (read_input_boolean_register(9)):
      global thread_handler_876=run Thread_if_876()
      while (thread_flag_876 == 0):
        if not(read_input_boolean_register(9)):
          kill thread_handler_876
          thread_flag_876 = 2
        else:
          sync()
        end
      end
    else:
      thread_flag_876 = 2
    end
    $ 898 "設定"
    set_tcp(p[0.0,0.09,0.42,0.0,0.0,0.0])
    $ 899 "If文 ( not GPBI_WorkExists)"
    if ((  not  read_input_boolean_register(9))):
      $ 900 "stopl(1.2)"
      stopl(1.2)
      $ 901 "SubPrgResult:=820"
      global SubPrgResult=820
      $ 902 "待機: 999999.0"
      sleep(999999.0)
    end
  end
  def SUB_122():
    $ 903 "SUB_122" "noBreak"
    $ 904 "SET_CV()"
    SET_CV()
    $ 905 "設定 GPBO_BLStart=HI:Pulse 1.0"
    thread SinglePulse2250():
      write_output_boolean_register(15, True)
      sleep(1.0)
      write_output_boolean_register(15, False)
    end
    singlePulse2250 = run SinglePulse2250()
    $ 906 "荷重の設定: k05"
    set_target_payload(0.100000, [0.135000, 0.000000, 0.225000], [0.500000, 0.500000, 0.500000, 0.000000, 0.000000, 0.000000])
    $ 907 "ForceStartZ:=CurrPos[2]"
    global ForceStartZ=CurrPos[2]
    $ 908 "tm_landed: リセット"
    tm_landed = 0
    $ 909 "tm_landed: 起動"
    tm_landed_is_counting = True
    $ 910 "設定 DO[5]=オン"
    set_standard_digital_out(5, True)
    $ 911 "フォース"
    sleep(0.02)
    zero_ftsensor()
    force_mode(CV, [1, 1, 1, 0, 1, 0], [0.0, 0.0, -40.0, 0.0, 0.0, 0.0], 2, [0.005, 0.005, 0.02, 0.3490658503988659, 0.03490658503988659, 0.3490658503988659])
    $ 912 "待機 GPII_TMLanded<tm_landed or GPBI_BLLoad0 or CurrPos[2]<ForceStartZ-UnloadZ" "noBreak"
    while (not(read_input_integer_register(14)<tm_landed  or  read_input_boolean_register(8)  or  CurrPos[2]<ForceStartZ-UnloadZ)):
      sync()
    end
    $ 913 "待機: 0.5" "noBreak"
    sleep(0.5)
    end_force_mode()
    stopl(5.0)
    $ 914 "設定 DO[5]=オフ"
    set_standard_digital_out(5, False)
    $ 915 "end_force_mode()"
    end_force_mode()
    $ 916 "tm_landed: 停止"
    tm_landed_is_counting = False
    $ 917 "If文 ( not GPBI_BLLoad0)"
    if ((  not  read_input_boolean_register(8))):
      $ 918 "SubPrgResult:=824"
      global SubPrgResult=824
      $ 919 "待機: 999999.0"
      sleep(999999.0)
    end
    $ 920 "荷重の設定: k10"
    set_target_payload(0.100000, [0.135000, 0.000000, 0.225000], [10.000000, 10.000000, 10.000000, 0.000000, 0.000000, 0.000000])
    $ 921 "MoveL"
    $ 922 "待機: 1.0"
    sleep(1.0)
    $ 923 "gCV_11_M" "breakAfter"
    set_tcp(p[0.0,0.09,0.42,0.0,0.0,0.0])
    movel(pose_trans(CV, gCV_11_M), a=0.03, v=0.03)
    $ 924 "gCV_12_M" "breakAfter"
    set_tcp(p[0.0,0.09,0.42,0.0,0.0,0.0])
    movel(pose_trans(CV, gCV_12_M), a=0.07, v=0.2)
    $ 925 "設定 GPBO_Released=HI:Pulse 3.0"
    thread SinglePulse2251():
      write_output_boolean_register(17, True)
      sleep(3.0)
      write_output_boolean_register(17, False)
    end
    singlePulse2251 = run SinglePulse2251()
    $ 926 "MoveL"
    $ 927 "gCV_13_M" "breakAfter"
    set_tcp(p[0.0,0.09,0.42,0.0,0.0,0.0])
    movel(pose_trans(CV, gCV_13_M), a=0.14, v=0.5, r=0.05)
    $ 928 "荷重の設定: k10"
    set_target_payload(0.100000, [0.135000, 0.000000, 0.225000], [10.000000, 10.000000, 10.000000, 0.000000, 0.000000, 0.000000])
  end
  def SUB_141():
    $ 929 "SUB_141" "noBreak"
    $ 930 "INITIALIZE"
    $ 931 "荷重の設定: k10"
    set_target_payload(0.100000, [0.135000, 0.000000, 0.225000], [10.000000, 10.000000, 10.000000, 0.000000, 0.000000, 0.000000])
    $ 932 "pBucket[WorkPosNo]=p[0.,0.,0.,0.,0.,0.]"
    pBucket[WorkPosNo]=p[0.,0.,0.,0.,0.,0.]
    $ 933 "If文 (WorkPosNo≟0)"
    if ((WorkPosNo == 0)):
      $ 934 "GD_pos4:=Capt_2BK_pos1"
      global GD_pos4=Capt_2BK_pos1
      $ 935 "GD_pos5:=Capt_2BK_pos2"
      global GD_pos5=Capt_2BK_pos2
      $ 936 "Capt_BK_L:=Capt_2BK_L"
      global Capt_BK_L=Capt_2BK_L
      $ 937 "Capt_BK_R:=Capt_2BK_R"
      global Capt_BK_R=Capt_2BK_R
    else:
      $ 938 "ElseIf (WorkPosNo≟1)"
      if ((WorkPosNo == 1)):
        $ 939 "GD_pos4:=Capt_1BK_pos1"
        global GD_pos4=Capt_1BK_pos1
        $ 940 "GD_pos5:=Capt_1BK_pos2"
        global GD_pos5=Capt_1BK_pos2
        $ 941 "Capt_BK_L:=Capt_1BK_L"
        global Capt_BK_L=Capt_1BK_L
        $ 942 "Capt_BK_R:=Capt_1BK_R"
        global Capt_BK_R=Capt_1BK_R
      end
    end
    $ 943 "HOME"
    $ 948 "ROVI_RECIPE"
    $ 949 "If文 ( not ROVI_RECIPE(GPII_BucketNo))"
    if ((  not  ROVI_RECIPE(read_input_integer_register(3)))):
      $ 950 "SubPrgResult:=rovi_err"
      global SubPrgResult=rovi_err
      $ 951 "待機: 999999.0"
      sleep(999999.0)
    end
    $ 952 "ROVI_RESET"
    $ 953 "If文 ( not ROVI_RESET())"
    if ((  not  ROVI_RESET())):
      $ 954 "SubPrgResult:=rovi_err"
      global SubPrgResult=rovi_err
      $ 955 "待機: 999999.0"
      sleep(999999.0)
    end
    $ 956 "ROVI_CAPTURE_1"
    $ 957 "MoveL"
    $ 958 "Capt_BK_L" "breakAfter"
    set_tcp(p[0.0,0.09,0.42,0.0,0.0,0.0])
    movel(Capt_BK_L, a=0.14, v=0.25)
    $ 959 "待機: 1.0"
    sleep(1.0)
    $ 960 "If文 ( not ROVI_CAPTURE())"
    if ((  not  ROVI_CAPTURE())):
      $ 961 "SubPrgResult:=rovi_err"
      global SubPrgResult=rovi_err
      $ 962 "待機: 999999.0"
      sleep(999999.0)
    end
    $ 963 "ROVI_CAPTURE_2"
    $ 964 "MoveL"
    $ 965 "Capt_BK_R" "breakAfter"
    set_tcp(p[0.0,0.09,0.42,0.0,0.0,0.0])
    movel(Capt_BK_R, a=0.14, v=0.5)
    $ 966 "待機: 1.0"
    sleep(1.0)
    $ 967 "If文 ( not ROVI_CAPTURE())"
    if ((  not  ROVI_CAPTURE())):
      $ 968 "SubPrgResult:=rovi_err"
      global SubPrgResult=rovi_err
      $ 969 "待機: 999999.0"
      sleep(999999.0)
    end
    $ 970 "ROVI_SOLVE"
    $ 971 "Y2:=ROVI_SOLVE()"
    global Y2=ROVI_SOLVE()
    $ 972 "If文 (Y2[0]≟10000.)"
    if ((Y2[0] == 10000.)):
      $ 973 "SubPrgResult:=rovi_err"
      global SubPrgResult=rovi_err
      $ 974 "待機: 999999.0"
      sleep(999999.0)
    end
    $ 975 "ROVI_PARAM"
    $ 976 "If文  not ROVI_PARAM(BKWidth_Name)"
    if (  not  ROVI_PARAM(BKWidth_Name)):
      $ 977 "SubPrgResult:=rovi_err"
      global SubPrgResult=rovi_err
      $ 978 "待機: 999999.0"
      sleep(999999.0)
    end
    $ 979 "BKWidth_Value[WorkPosNo]=Y8"
    BKWidth_Value[WorkPosNo]=Y8
    $ 980 "HOME"
  end
  def SUB_142():
    $ 984 "SUB_142" "noBreak"
    $ 985 "INITIALIZE"
    $ 986 "荷重の設定: k10"
    set_target_payload(0.100000, [0.135000, 0.000000, 0.225000], [10.000000, 10.000000, 10.000000, 0.000000, 0.000000, 0.000000])
    $ 987 "ROVI_RECIPE"
    $ 988 "If文 ( not ROVI_RECIPE(GPII_ConveyorNo))"
    if ((  not  ROVI_RECIPE(read_input_integer_register(1)))):
      $ 989 "SubPrgResult:=rovi_err"
      global SubPrgResult=rovi_err
      $ 990 "待機: 999999.0"
      sleep(999999.0)
    end
    $ 991 "ROVI_RESET"
    $ 992 "If文 ( not ROVI_RESET())"
    if ((  not  ROVI_RESET())):
      $ 993 "SubPrgResult:=rovi_err"
      global SubPrgResult=rovi_err
      $ 994 "待機: 999999.0"
      sleep(999999.0)
    end
    $ 995 "ROVI_CAPTURE"
    $ 996 "MoveL"
    $ 997 "Capt_CV_M" "breakAfter"
    set_tcp(p[0.0,0.09,0.42,0.0,0.0,0.0])
    movel(Capt_CV_M, a=0.07, v=0.2)
    $ 998 "待機: 2.0"
    sleep(2.0)
    $ 999 "If文 ( not ROVI_CAPTURE())"
    if ((  not  ROVI_CAPTURE())):
      $ 1000 "SubPrgResult:=rovi_err"
      global SubPrgResult=rovi_err
      $ 1001 "待機: 999999.0"
      sleep(999999.0)
    end
    $ 1002 "ROVI_SOLVE"
    $ 1003 "Y2:=ROVI_SOLVE()"
    global Y2=ROVI_SOLVE()
    $ 1004 "If文 (Y2[0]≟10000.)"
    if ((Y2[0] == 10000.)):
      $ 1005 "SubPrgResult:=rovi_err"
      global SubPrgResult=rovi_err
      $ 1006 "待機: 999999.0"
      sleep(999999.0)
    end
  end
  def SUB_143():
    $ 1007 "SUB_143" "noBreak"
    $ 1008 "SET_BUCKET_DEF()"
    SET_BUCKET_DEF()
    $ 1009 "ROVI_RESET"
    $ 1010 "If文 (not ROVI_RESET())"
    if ((not ROVI_RESET())):
      $ 1011 "SubPrgResult:=rovi_err"
      global SubPrgResult=rovi_err
      $ 1012 "待機: 999999.0"
      sleep(999999.0)
    end
    $ 1013 "ROVI_CAPTURE_1"
    $ 1014 "BucketUpperPos:=GET_BUCKET_UPPER(1)"
    global BucketUpperPos=GET_BUCKET_UPPER(1)
    $ 1015 "MoveL"
    $ 1016 "BucketUpperPos" "breakAfter"
    set_tcp(p[0.0,0.09,0.42,0.0,0.0,0.0])
    movel(pose_trans(Bucket, BucketUpperPos), a=0.14, v=0.25)
    $ 1017 "待機: 1.0"
    sleep(1.0)
    $ 1018 "If文 ( not ROVI_CAPTURE())"
    if ((  not  ROVI_CAPTURE())):
      $ 1019 "SubPrgResult:=rovi_err"
      global SubPrgResult=rovi_err
      $ 1020 "待機: 999999.0"
      sleep(999999.0)
    end
    $ 1021 "ROVI_CAPTURE_2"
    $ 1022 "BucketUpperPos:=GET_BUCKET_UPPER(2)"
    global BucketUpperPos=GET_BUCKET_UPPER(2)
    $ 1023 "MoveL"
    $ 1024 "BucketUpperPos" "breakAfter"
    set_tcp(p[0.0,0.09,0.42,0.0,0.0,0.0])
    movel(pose_trans(Bucket, BucketUpperPos), a=0.14, v=0.25)
    $ 1025 "待機: 1.0"
    sleep(1.0)
    $ 1026 "If文 ( not ROVI_CAPTURE())"
    if ((  not  ROVI_CAPTURE())):
      $ 1027 "SubPrgResult:=rovi_err"
      global SubPrgResult=rovi_err
      $ 1028 "待機: 999999.0"
      sleep(999999.0)
    end
    $ 1029 "JUDGEMENT"
    $ 1030 "If文 (Y1[0]≟0)"
    if ((Y1[0] == 0)):
      $ 1031 "SubPrgResult:=990"
      global SubPrgResult=990
      $ 1032 "待機: 999999.0"
      sleep(999999.0)
    end
    $ 1033 "CrankDepth:=(-1)*Y1[1]/1000.0"
    global CrankDepth=(-1)*Y1[1]/1000.0
    $ 1034 "CaptRowNo:=1+floor((CrankDepth-CrankDepthFull)/CaptStepZ)"
    global CaptRowNo=1+floor((CrankDepth-CrankDepthFull)/CaptStepZ)
    $ 1035 "If文 (CaptRowNo<1)"
    if ((CaptRowNo<1)):
      $ 1036 "CaptRowNo:=1"
      global CaptRowNo=1
    end
    $ 1037 "設定 GPIO_CaptRowNo=CaptRowNo"
    write_output_integer_register(20, CaptRowNo)
  end
  def SUB_161():
    $ 1038 "SUB_161" "noBreak"
    $ 1039 "FREE_DRIVE"
    $ 1040 "freedrive_mode()"
    freedrive_mode()
    $ 1041 "荷重の設定: k2"
    set_target_payload(0.100000, [0.135000, 0.000000, 0.225000], [2.000000, 2.000000, 2.000000, 0.000000, 0.000000, 0.000000])
    $ 1042 "設定"
    set_tcp(p[0.0,0.0,0.0,0.0,0.0,0.0])
    $ 1043 "待機: 2.5"
    sleep(2.5)
    $ 1044 "end_freedrive_mode()"
    end_freedrive_mode()
    $ 1045 "荷重の設定: k05"
    set_target_payload(0.100000, [0.135000, 0.000000, 0.225000], [0.500000, 0.500000, 0.500000, 0.000000, 0.000000, 0.000000])
    $ 1046 "ForceStartZ:=CurrPos[2]"
    global ForceStartZ=CurrPos[2]
    $ 1047 "フォース"
    sleep(0.02)
    zero_ftsensor()
    force_mode(p[0.0,0.0,0.0,0.0,0.0,0.0], [1, 1, 1, 1, 1, 1], [0.0, 0.0, -40.0, 0.0, 0.0, 0.0], 2, [0.005, 0.005, 0.015, 0.03490658503988659, 0.03490658503988659, 0.03490658503988659])
    $ 1048 "待機 CurrPos[2]<ForceStartZ-0.05" "noBreak"
    while (not(CurrPos[2]<ForceStartZ-0.05)):
      sync()
    end
    $ 1049 "待機: 1.0" "noBreak"
    sleep(1.0)
    $ 1050 "end_force_mode()" "noBreak"
    end_force_mode()
    end_force_mode()
    stopl(5.0)
    $ 1051 "GO HOME"
    $ 1052 "If文 (WorkPosNo≟0)"
    if ((WorkPosNo == 0)):
      $ 1053 "荷重の設定: k05"
      set_target_payload(0.100000, [0.135000, 0.000000, 0.225000], [0.500000, 0.500000, 0.500000, 0.000000, 0.000000, 0.000000])
      $ 1054 "ForceStartX:=CurrPos[0]"
      global ForceStartX=CurrPos[0]
      $ 1055 "MoveL"
      $ 1056 "var_4:=pose_trans(CurrPos, TCP3100TL)"
      global var_4= pose_trans (CurrPos, TCP3100TL)
      $ 1057 "var_5:=p[0.,0.,-0.034,0.,0.,0.]"
      global var_5=p[0.,0.,-0.034,0.,0.,0.]
      $ 1058 "var_6:=pose_sub(pose_trans(var_4,var_5),var_4)"
      global var_6= pose_sub (pose_trans(var_4,var_5),var_4)
      $ 1059 "var_6" "breakAfter"
      set_tcp(p[0.0,0.09,0.42,0.0,0.0,0.0])
      movel(var_6, a=0.01, v=0.01)
      $ 1060 "荷重の設定: k120"
      set_target_payload(0.100000, [0.135000, 0.000000, 0.225000], [120.000000, 120.000000, 120.000000, 0.000000, 0.000000, 0.000000])
      $ 1061 "MoveL"
      $ 1062 "g2GD_pos4" "breakAfter"
      set_tcp(p[0.0,0.09,0.42,0.0,0.0,0.0])
      movel(g2GD_pos4, a=0.03, v=0.25)
      $ 1063 "MoveL"
      $ 1064 "荷重の設定: k10"
      set_target_payload(0.100000, [0.135000, 0.000000, 0.225000], [10.000000, 10.000000, 10.000000, 0.000000, 0.000000, 0.000000])
      $ 1065 "g2GD_pos5" "breakAfter"
      set_tcp(p[0.0,0.09,0.42,0.0,0.0,0.0])
      movel(g2GD_pos5, a=0.14, v=0.4)
    else:
      $ 1066 "ElseIf (WorkPosNo≟1)"
      if ((WorkPosNo == 1)):
        $ 1067 "If文 (is_popup)"
        if ((is_popup)):
          $ 1068 "ポップアップ: 1GD?"
          popup("1GD?", "メッセージ", False, False, blocking=True)
        end
        $ 1069 "荷重の設定: k05"
        set_target_payload(0.100000, [0.135000, 0.000000, 0.225000], [0.500000, 0.500000, 0.500000, 0.000000, 0.000000, 0.000000])
        $ 1070 "ForceStartX:=CurrPos[0]"
        global ForceStartX=CurrPos[0]
        $ 1071 "MoveL"
        $ 1072 "var_4:=pose_trans(CurrPos, TCP3100TL)"
        global var_4= pose_trans (CurrPos, TCP3100TL)
        $ 1073 "var_5:=p[0.,0.,-0.034,0.,0.,0.]"
        global var_5=p[0.,0.,-0.034,0.,0.,0.]
        $ 1074 "var_6:=pose_sub(pose_trans(var_4,var_5),var_4)"
        global var_6= pose_sub (pose_trans(var_4,var_5),var_4)
        $ 1075 "var_6" "breakAfter"
        set_tcp(p[0.0,0.09,0.42,0.0,0.0,0.0])
        movel(var_6, a=0.01, v=0.01)
        $ 1076 "荷重の設定: k120"
        set_target_payload(0.100000, [0.135000, 0.000000, 0.225000], [120.000000, 120.000000, 120.000000, 0.000000, 0.000000, 0.000000])
        $ 1077 "MoveL"
        $ 1078 "g1GD_pos3" "breakAfter"
        set_tcp(p[0.0,0.09,0.42,0.0,0.0,0.0])
        movel(g1GD_pos3, a=0.07, v=0.25)
      end
    end
  end
  def SUB_181():
    $ 1079 "SUB_181" "noBreak"
    $ 1080 "INITIALIZE"
    $ 1081 "荷重の設定: k10"
    set_target_payload(0.100000, [0.135000, 0.000000, 0.225000], [10.000000, 10.000000, 10.000000, 0.000000, 0.000000, 0.000000])
    $ 1082 "BUCKET"
    $ 1083 "SET_BUCKET_DEF()"
    SET_BUCKET_DEF()
    $ 1084 "BucketUpperPos:=GET_BUCKET_UPPER()"
    global BucketUpperPos=GET_BUCKET_UPPER()
    $ 1085 "MoveJ"
    $ 1086 "BucketUpperPos" "breakAfter"
    set_tcp(p[0.0,0.09,0.42,0.0,0.0,0.0])
    movej(pose_trans(Bucket, BucketUpperPos), a=0.3490658503988659, v=0.6981317007977318)
  end
  def SUB_3100():
    $ 1087 "SUB_3100" "noBreak"
    $ 1088 "ループ"
    while (True):
      $ 1089 "Sub3100_Option:=Sub3100_GPII18"
      global Sub3100_Option=Sub3100_GPII18
      $ 1090 "If文 (Sub3100_Option≤14)"
      if ((Sub3100_Option <= 14)):
        $ 1091 "'MOVE'"
        # 'MOVE'
        $ 1092 "If文 GPBI_PrgRun"
        global thread_flag_1092=0
        thread Thread_if_1092():
          $ 1093 "設定 GPBO_PrgRun= True "
          write_output_boolean_register(6,   True  )
          $ 1094 "If文 GPBI_BLLoad1"
          if (read_input_boolean_register(10)):
            $ 1095 "If文 (1≤Sub3100_Option and Sub3100_Option≤4)"
            if ((1 <= Sub3100_Option  and  Sub3100_Option <= 4)):
              $ 1096 "荷重の設定: k10"
              set_target_payload(0.100000, [0.135000, 0.000000, 0.225000], [10.000000, 10.000000, 10.000000, 0.000000, 0.000000, 0.000000])
            else:
              $ 1097 "ElseIf (5≤Sub3100_Option and Sub3100_Option≤6)"
              if ((5 <= Sub3100_Option  and  Sub3100_Option <= 6)):
                $ 1098 "荷重の設定: k120"
                set_target_payload(0.100000, [0.135000, 0.000000, 0.225000], [120.000000, 120.000000, 120.000000, 0.000000, 0.000000, 0.000000])
              else:
                $ 1099 "ElseIf (7≤Sub3100_Option and Sub3100_Option≤12)"
                if ((7 <= Sub3100_Option  and  Sub3100_Option <= 12)):
                  $ 1100 "荷重の設定: k10"
                  set_target_payload(0.100000, [0.135000, 0.000000, 0.225000], [10.000000, 10.000000, 10.000000, 0.000000, 0.000000, 0.000000])
                else:
                  $ 1101 "ElseIf (13≤Sub3100_Option and Sub3100_Option≤14)"
                  if ((13 <= Sub3100_Option  and  Sub3100_Option <= 14)):
                    $ 1102 "荷重の設定: k10"
                    set_target_payload(0.100000, [0.135000, 0.000000, 0.225000], [10.000000, 10.000000, 10.000000, 0.000000, 0.000000, 0.000000])
                  end
                end
              end
            end
          else:
            $ 1103 "Else" "noBreak"
            $ 1104 "If文 (1≤Sub3100_Option and Sub3100_Option≤4)"
            if ((1 <= Sub3100_Option  and  Sub3100_Option <= 4)):
              $ 1105 "荷重の設定: k10"
              set_target_payload(0.100000, [0.135000, 0.000000, 0.225000], [10.000000, 10.000000, 10.000000, 0.000000, 0.000000, 0.000000])
            else:
              $ 1106 "ElseIf (5≤Sub3100_Option and Sub3100_Option≤6)"
              if ((5 <= Sub3100_Option  and  Sub3100_Option <= 6)):
                $ 1107 "荷重の設定: k120"
                set_target_payload(0.100000, [0.135000, 0.000000, 0.225000], [120.000000, 120.000000, 120.000000, 0.000000, 0.000000, 0.000000])
              else:
                $ 1108 "ElseIf (7≤Sub3100_Option and Sub3100_Option≤12)"
                if ((7 <= Sub3100_Option  and  Sub3100_Option <= 12)):
                  $ 1109 "荷重の設定: k10"
                  set_target_payload(0.100000, [0.135000, 0.000000, 0.225000], [10.000000, 10.000000, 10.000000, 0.000000, 0.000000, 0.000000])
                else:
                  $ 1110 "ElseIf (13≤Sub3100_Option and Sub3100_Option≤14)"
                  if ((13 <= Sub3100_Option  and  Sub3100_Option <= 14)):
                    $ 1111 "荷重の設定: k10"
                    set_target_payload(0.100000, [0.135000, 0.000000, 0.225000], [10.000000, 10.000000, 10.000000, 0.000000, 0.000000, 0.000000])
                  end
                end
              end
            end
          end
          $ 1112 "ループ"
          while (True):
            $ 1113 "Sub3100_Xd:=[0.,0.,0.,0.,0.,0.]"
            global Sub3100_Xd=[0.,0.,0.,0.,0.,0.]
            $ 1114 "Sub3100_q:=floor((Sub3100_Option-1) / 2)"
            global Sub3100_q=floor((Sub3100_Option-1) / 2)
            $ 1115 "Sub3100_e:=1-((Sub3100_Option-1) % 2)*2"
            global Sub3100_e=1-((Sub3100_Option-1) % 2)*2
            $ 1116 "Sub3100_t:=0.5"
            global Sub3100_t=0.5
            $ 1117 "If文 (1≤Sub3100_Option and Sub3100_Option≤6)"
            if ((1 <= Sub3100_Option  and  Sub3100_Option <= 6)):
              $ 1118 "'1:X+,2:X-,3:Y+,4:Y-,5:Z+,6:Z-'"
              # '1:X+,2:X-,3:Y+,4:Y-,5:Z+,6:Z-'
              $ 1119 "Sub3100_Xd[Sub3100_q]=Sub3100_XdV*Sub3100_e"
              Sub3100_Xd[Sub3100_q]=Sub3100_XdV*Sub3100_e
              $ 1120 "If文 Sub3100_Option≟5"
              if (Sub3100_Option == 5):
                $ 1121 "If文 CurrPos[2]<Sub3100_ZMax"
                global thread_flag_1121=0
                thread Thread_if_1121():
                  $ 1122 "speedl(Sub3100_Xd,Sub3100_a,t=Sub3100_t)"
                  speedl(Sub3100_Xd,Sub3100_a,t=Sub3100_t)
                  thread_flag_1121 = 1
                end
                if (CurrPos[2]<Sub3100_ZMax):
                  global thread_handler_1121=run Thread_if_1121()
                  while (thread_flag_1121 == 0):
                    if not(CurrPos[2]<Sub3100_ZMax):
                      kill thread_handler_1121
                      thread_flag_1121 = 2
                    else:
                      sync()
                    end
                  end
                else:
                  thread_flag_1121 = 2
                end
                $ 1123 "stopl(Sub3100_d)"
                stopl(Sub3100_d)
              else:
                $ 1124 "Else" "noBreak"
                $ 1125 "speedl(Sub3100_Xd,Sub3100_a,t=Sub3100_t)"
                speedl(Sub3100_Xd,Sub3100_a,t=Sub3100_t)
              end
            else:
              $ 1126 "ElseIf (7≤Sub3100_Option and Sub3100_Option≤12)"
              if ((7 <= Sub3100_Option  and  Sub3100_Option <= 12)):
                $ 1127 "'7:RX+,8:RX-,9:RY+,10:RY-,11:RZ+,12:RZ-'"
                # '7:RX+,8:RX-,9:RY+,10:RY-,11:RZ+,12:RZ-'
                $ 1128 "Sub3100_Xd[Sub3100_q]=d2r(Sub3100_XdRot)*Sub3100_e"
                Sub3100_Xd[Sub3100_q]= d2r (Sub3100_XdRot)*Sub3100_e
                $ 1129 "speedl(Sub3100_Xd,Sub3100_aRot,Sub3100_t)"
                speedl(Sub3100_Xd,Sub3100_aRot,Sub3100_t)
              else:
                $ 1130 "ElseIf (Sub3100_Option≟13 or Sub3100_Option≟14)"
                if ((Sub3100_Option == 13  or  Sub3100_Option == 14)):
                  $ 1131 "'13:TZ+,14:TZ-'"
                  # '13:TZ+,14:TZ-'
                  $ 1133 "Sub3100_curr:=pose_trans(CurrPos, TCP3100TL)"
                  global Sub3100_curr= pose_trans (CurrPos, TCP3100TL)
                  $ 1134 "var_1:=p[0.,0.,0.,0.,0.,0.]"
                  global var_1=p[0.,0.,0.,0.,0.,0.]
                  $ 1135 "var_1[Sub3100_q-4]=0.25*Sub3100_e"
                  var_1[Sub3100_q-4]=0.25*Sub3100_e
                  $ 1136 "var_2:=pose_sub(pose_trans(Sub3100_curr,var_1),Sub3100_curr)"
                  global var_2= pose_sub (pose_trans(Sub3100_curr,var_1),Sub3100_curr)
                  $ 1137 "var_3:=0"
                  global var_3=0
                  $ 1138 "ループ6回"
                  u12523u12540u12503_1 = 0
                  while (u12523u12540u12503_1 < 6):
                    $ 1139 "Sub3100_Xd[var_3]=var_2[var_3]"
                    Sub3100_Xd[var_3]=var_2[var_3]
                    $ 1140 "var_3:=var_3+1"
                    global var_3=var_3+1
                    u12523u12540u12503_1 = u12523u12540u12503_1 + 1
                  end
                  $ 1141 "speedl(Sub3100_Xd,Sub3100_a,Sub3100_t)"
                  speedl(Sub3100_Xd,Sub3100_a,Sub3100_t)
                end
              end
            end
          end
          thread_flag_1092 = 1
        end
        if (read_input_boolean_register(6)):
          global thread_handler_1092=run Thread_if_1092()
          while (thread_flag_1092 == 0):
            if not(read_input_boolean_register(6)):
              kill thread_handler_1092
              thread_flag_1092 = 2
            else:
              sync()
            end
          end
        else:
          thread_flag_1092 = 2
        end
        $ 1142 "stopl(Sub3100_d)"
        stopl(Sub3100_d)
      else:
        $ 1143 "ElseIf (Sub3100_Option≤44)"
        if ((Sub3100_Option <= 44)):
          $ 1144 "'FORCE'"
          # 'FORCE'
          $ 1145 "If文 GPBI_PrgRun"
          if (read_input_boolean_register(6)):
            $ 1146 "設定 GPBO_PrgRun= True "
            write_output_boolean_register(6,   True  )
            $ 1147 "If文 GPBI_BLLoad1"
            if (read_input_boolean_register(10)):
              $ 1148 "If文 (33≤Sub3100_Option and Sub3100_Option≤36)"
              if ((33 <= Sub3100_Option  and  Sub3100_Option <= 36)):
                $ 1149 "荷重の設定: k05"
                set_target_payload(0.100000, [0.135000, 0.000000, 0.225000], [0.500000, 0.500000, 0.500000, 0.000000, 0.000000, 0.000000])
              else:
                $ 1150 "ElseIf (37≤Sub3100_Option and Sub3100_Option≤38)"
                if ((37 <= Sub3100_Option  and  Sub3100_Option <= 38)):
                  $ 1151 "荷重の設定: k05"
                  set_target_payload(0.100000, [0.135000, 0.000000, 0.225000], [0.500000, 0.500000, 0.500000, 0.000000, 0.000000, 0.000000])
                else:
                  $ 1152 "ElseIf (39≤Sub3100_Option and Sub3100_Option≤44)"
                  if ((39 <= Sub3100_Option  and  Sub3100_Option <= 44)):
                    $ 1153 "荷重の設定: k05"
                    set_target_payload(0.100000, [0.135000, 0.000000, 0.225000], [0.500000, 0.500000, 0.500000, 0.000000, 0.000000, 0.000000])
                  end
                end
              end
            else:
              $ 1154 "Else" "noBreak"
              $ 1155 "If文 (33≤Sub3100_Option and Sub3100_Option≤36)"
              if ((33 <= Sub3100_Option  and  Sub3100_Option <= 36)):
                $ 1156 "荷重の設定: k05"
                set_target_payload(0.100000, [0.135000, 0.000000, 0.225000], [0.500000, 0.500000, 0.500000, 0.000000, 0.000000, 0.000000])
              else:
                $ 1157 "ElseIf (37≤Sub3100_Option and Sub3100_Option≤38)"
                if ((37 <= Sub3100_Option  and  Sub3100_Option <= 38)):
                  $ 1158 "荷重の設定: k05"
                  set_target_payload(0.100000, [0.135000, 0.000000, 0.225000], [0.500000, 0.500000, 0.500000, 0.000000, 0.000000, 0.000000])
                else:
                  $ 1159 "ElseIf (39≤Sub3100_Option and Sub3100_Option≤44)"
                  if ((39 <= Sub3100_Option  and  Sub3100_Option <= 44)):
                    $ 1160 "荷重の設定: k05"
                    set_target_payload(0.100000, [0.135000, 0.000000, 0.225000], [0.500000, 0.500000, 0.500000, 0.000000, 0.000000, 0.000000])
                  end
                end
              end
            end
            $ 1161 "If文 (Sub3100_Option≟33)"
            if ((Sub3100_Option == 33)):
              $ 1162 "'33:X+'"
              # '33:X+'
              $ 1163 "フォース"
              sleep(0.02)
              zero_ftsensor()
              force_mode(p[0.0,0.0,0.0,0.0,0.0,0.0], [1, 1, 1, 1, 1, 1], [40.0, 0.0, 0.0, 0.0, 0.0, 0.0], 2, [0.01, 0.005, 0.005, 0.03490658503988659, 0.03490658503988659, 0.03490658503988659])
              $ 1164 "待機 GPBI_PrgRun=LO" "noBreak"
              while (read_input_boolean_register(6) == True):
                sync()
              end
              end_force_mode()
              stopl(5.0)
            else:
              $ 1165 "ElseIf (Sub3100_Option≟34)"
              if ((Sub3100_Option == 34)):
                $ 1166 "'34:X-'"
                # '34:X-'
                $ 1167 "フォース"
                sleep(0.02)
                zero_ftsensor()
                force_mode(p[0.0,0.0,0.0,0.0,0.0,0.0], [1, 1, 1, 1, 1, 1], [-40.0, 0.0, 0.0, 0.0, 0.0, 0.0], 2, [0.01, 0.005, 0.005, 0.03490658503988659, 0.03490658503988659, 0.03490658503988659])
                $ 1168 "待機 GPBI_PrgRun=LO" "noBreak"
                while (read_input_boolean_register(6) == True):
                  sync()
                end
                end_force_mode()
                stopl(5.0)
              else:
                $ 1169 "ElseIf (Sub3100_Option≟35)"
                if ((Sub3100_Option == 35)):
                  $ 1170 "'35:Y+'"
                  # '35:Y+'
                  $ 1171 "フォース"
                  sleep(0.02)
                  zero_ftsensor()
                  force_mode(p[0.0,0.0,0.0,0.0,0.0,0.0], [1, 1, 1, 1, 1, 1], [0.0, 40.0, 0.0, 0.0, 0.0, 0.0], 2, [0.005, 0.01, 0.005, 0.03490658503988659, 0.03490658503988659, 0.03490658503988659])
                  $ 1172 "待機 GPBI_PrgRun=LO" "noBreak"
                  while (read_input_boolean_register(6) == True):
                    sync()
                  end
                  end_force_mode()
                  stopl(5.0)
                else:
                  $ 1173 "ElseIf (Sub3100_Option≟36)"
                  if ((Sub3100_Option == 36)):
                    $ 1174 "'36:Y-'"
                    # '36:Y-'
                    $ 1175 "フォース"
                    sleep(0.02)
                    zero_ftsensor()
                    force_mode(p[0.0,0.0,0.0,0.0,0.0,0.0], [1, 1, 1, 1, 1, 1], [0.0, -40.0, 0.0, 0.0, 0.0, 0.0], 2, [0.005, 0.01, 0.005, 0.03490658503988659, 0.03490658503988659, 0.03490658503988659])
                    $ 1176 "待機 GPBI_PrgRun=LO" "noBreak"
                    while (read_input_boolean_register(6) == True):
                      sync()
                    end
                    end_force_mode()
                    stopl(5.0)
                  else:
                    $ 1177 "ElseIf (Sub3100_Option≟37)"
                    if ((Sub3100_Option == 37)):
                      $ 1178 "'37:Z+'"
                      # '37:Z+'
                      $ 1179 "フォース"
                      sleep(0.02)
                      zero_ftsensor()
                      force_mode(p[0.0,0.0,0.0,0.0,0.0,0.0], [1, 1, 1, 1, 1, 1], [0.0, 0.0, 40.0, 0.0, 0.0, 0.0], 2, [0.005, 0.005, 0.01, 0.03490658503988659, 0.03490658503988659, 0.03490658503988659])
                      $ 1180 "待機 GPBI_PrgRun=LO" "noBreak"
                      while (read_input_boolean_register(6) == True):
                        sync()
                      end
                      end_force_mode()
                      stopl(5.0)
                    else:
                      $ 1181 "ElseIf (Sub3100_Option≟38)"
                      if ((Sub3100_Option == 38)):
                        $ 1182 "'38:Z-'"
                        # '38:Z-'
                        $ 1183 "フォース"
                        sleep(0.02)
                        zero_ftsensor()
                        force_mode(p[0.0,0.0,0.0,0.0,0.0,0.0], [1, 1, 1, 1, 1, 1], [0.0, 0.0, -40.0, 0.0, 0.0, 0.0], 2, [0.005, 0.005, 0.01, 0.03490658503988659, 0.03490658503988659, 0.03490658503988659])
                        $ 1184 "待機 GPBI_PrgRun=LO" "noBreak"
                        while (read_input_boolean_register(6) == True):
                          sync()
                        end
                        end_force_mode()
                        stopl(5.0)
                      else:
                        $ 1185 "ElseIf (Sub3100_Option≟39)"
                        if ((Sub3100_Option == 39)):
                          $ 1186 "'39:RX+'"
                          # '39:RX+'
                          $ 1187 "フォース"
                          sleep(0.02)
                          zero_ftsensor()
                          force_mode(p[0.0,0.0,0.0,0.0,0.0,0.0], [1, 1, 1, 1, 1, 1], [0.0, 0.0, 0.0, 40.0, 0.0, 0.0], 2, [0.005, 0.005, 0.005, 0.08726646259971647, 0.03490658503988659, 0.03490658503988659])
                          $ 1188 "待機 GPBI_PrgRun=LO" "noBreak"
                          while (read_input_boolean_register(6) == True):
                            sync()
                          end
                          end_force_mode()
                          stopl(5.0)
                        else:
                          $ 1189 "ElseIf (Sub3100_Option≟40)"
                          if ((Sub3100_Option == 40)):
                            $ 1190 "'40:RX-'"
                            # '40:RX-'
                            $ 1191 "フォース"
                            sleep(0.02)
                            zero_ftsensor()
                            force_mode(p[0.0,0.0,0.0,0.0,0.0,0.0], [1, 1, 1, 1, 1, 1], [0.0, 0.0, 0.0, -40.0, 0.0, 0.0], 2, [0.005, 0.005, 0.005, 0.08726646259971647, 0.03490658503988659, 0.03490658503988659])
                            $ 1192 "待機 GPBI_PrgRun=LO" "noBreak"
                            while (read_input_boolean_register(6) == True):
                              sync()
                            end
                            end_force_mode()
                            stopl(5.0)
                          else:
                            $ 1193 "ElseIf (Sub3100_Option≟41)"
                            if ((Sub3100_Option == 41)):
                              $ 1194 "'41:RY+'"
                              # '41:RY+'
                              $ 1195 "フォース"
                              sleep(0.02)
                              zero_ftsensor()
                              force_mode(p[0.0,0.0,0.0,0.0,0.0,0.0], [1, 1, 1, 1, 1, 1], [0.0, 0.0, 0.0, 0.0, 40.0, 0.0], 2, [0.005, 0.005, 0.005, 0.03490658503988659, 0.08726646259971647, 0.03490658503988659])
                              $ 1196 "待機 GPBI_PrgRun=LO" "noBreak"
                              while (read_input_boolean_register(6) == True):
                                sync()
                              end
                              end_force_mode()
                              stopl(5.0)
                            else:
                              $ 1197 "ElseIf (Sub3100_Option≟42)"
                              if ((Sub3100_Option == 42)):
                                $ 1198 "'42:RY-'"
                                # '42:RY-'
                                $ 1199 "フォース"
                                sleep(0.02)
                                zero_ftsensor()
                                force_mode(p[0.0,0.0,0.0,0.0,0.0,0.0], [1, 1, 1, 1, 1, 1], [0.0, 0.0, 0.0, 0.0, -40.0, 0.0], 2, [0.005, 0.005, 0.005, 0.03490658503988659, 0.08726646259971647, 0.03490658503988659])
                                $ 1200 "待機 GPBI_PrgRun=LO" "noBreak"
                                while (read_input_boolean_register(6) == True):
                                  sync()
                                end
                                end_force_mode()
                                stopl(5.0)
                              else:
                                $ 1201 "ElseIf (Sub3100_Option≟43)"
                                if ((Sub3100_Option == 43)):
                                  $ 1202 "'43:RZ+'"
                                  # '43:RZ+'
                                  $ 1203 "フォース"
                                  sleep(0.02)
                                  zero_ftsensor()
                                  force_mode(p[0.0,0.0,0.0,0.0,0.0,0.0], [1, 1, 1, 1, 1, 1], [0.0, 0.0, 0.0, 0.0, 0.0, 40.0], 2, [0.005, 0.005, 0.005, 0.03490658503988659, 0.03490658503988659, 0.08726646259971647])
                                  $ 1204 "待機 GPBI_PrgRun=LO" "noBreak"
                                  while (read_input_boolean_register(6) == True):
                                    sync()
                                  end
                                  end_force_mode()
                                  stopl(5.0)
                                else:
                                  $ 1205 "ElseIf (Sub3100_Option≟44)"
                                  if ((Sub3100_Option == 44)):
                                    $ 1206 "'44:RZ-'"
                                    # '44:RZ-'
                                    $ 1207 "フォース"
                                    sleep(0.02)
                                    zero_ftsensor()
                                    force_mode(p[0.0,0.0,0.0,0.0,0.0,0.0], [1, 1, 1, 1, 1, 1], [0.0, 0.0, 0.0, 0.0, 0.0, -40.0], 2, [0.005, 0.005, 0.005, 0.03490658503988659, 0.03490658503988659, 0.08726646259971647])
                                    $ 1208 "待機 GPBI_PrgRun=LO" "noBreak"
                                    while (read_input_boolean_register(6) == True):
                                      sync()
                                    end
                                    end_force_mode()
                                    stopl(5.0)
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        else:
          $ 1209 "ElseIf (Sub3100_Option≥90)"
          if ((Sub3100_Option >= 90)):
            $ 1210 "'FREEDRIVE'"
            # 'FREEDRIVE'
            $ 1211 "If文 GPBI_PrgRun"
            if (read_input_boolean_register(6)):
              $ 1212 "設定 GPBO_PrgRun= True "
              write_output_boolean_register(6,   True  )
              $ 1213 "If文 GPBI_BLLoad1"
              if (read_input_boolean_register(10)):
                $ 1214 "荷重の設定: k05"
                set_target_payload(0.100000, [0.135000, 0.000000, 0.225000], [0.500000, 0.500000, 0.500000, 0.000000, 0.000000, 0.000000])
              else:
                $ 1215 "Else" "noBreak"
                $ 1216 "荷重の設定: k05"
                set_target_payload(0.100000, [0.135000, 0.000000, 0.225000], [0.500000, 0.500000, 0.500000, 0.000000, 0.000000, 0.000000])
              end
              $ 1217 "If文 (Sub3100_Option≟90)"
              if ((Sub3100_Option == 90)):
                $ 1218 "'90:FreeDrive'"
                # '90:FreeDrive'
                $ 1219 "freedrive_mode()"
                freedrive_mode()
                $ 1220 "待機 GPBI_PrgRun=LO"
                while (read_input_boolean_register(6) == True):
                  sync()
                end
                $ 1221 "end_freedrive_mode()"
                end_freedrive_mode()
              end
            end
          end
        end
      end
      $ 1222 "stopl(Sub3100_d)"
      stopl(Sub3100_d)
      $ 1223 "待機: 0.01"
      sleep(0.01)
      $ 1224 "荷重の設定: k10"
      set_target_payload(0.100000, [0.135000, 0.000000, 0.225000], [10.000000, 10.000000, 10.000000, 0.000000, 0.000000, 0.000000])
      $ 1225 "設定 GPBO_PrgRun= False "
      write_output_boolean_register(6,   False  )
    end
  end
  def SUB_6001():
    $ 1226 "SUB_6001" "noBreak"
    $ 1227 "荷重の設定: k10"
    set_target_payload(0.100000, [0.135000, 0.000000, 0.225000], [10.000000, 10.000000, 10.000000, 0.000000, 0.000000, 0.000000])
    $ 1228 "If文 ( not ROVI_RESET())"
    if ((  not  ROVI_RESET())):
      $ 1229 "SubPrgResult:=rovi_err"
      global SubPrgResult=rovi_err
      $ 1230 "待機: 999999.0"
      sleep(999999.0)
    end
    $ 1231 "MoveJ"
    $ 1232 "CaptPos0" "breakAfter"
    set_tcp(p[0.0,0.0,0.0,0.0,0.0,0.0])
    movej(get_inverse_kin(CaptPos0_p, qnear=CaptPos0_q), a=0.2617993877991494, v=0.15707963267948966)
    $ 1233 "CaptPos:=CaptPos0_p"
    global CaptPos=CaptPos0_p
    $ 1234 "ループ (CaptPos[0]≠10000.0)"
    while ((CaptPos[0] != 10000.0)):
      $ 1235 "MoveJ"
      $ 1236 "CaptPos" "breakAfter"
      set_tcp(p[0.0,0.0,0.0,0.0,0.0,0.0])
      movej(CaptPos, a=0.2617993877991494, v=0.15707963267948966)
      $ 1237 "待機: 4.0"
      sleep(4.0)
      $ 1238 "If文 ( not ROVI_CAPTURE())"
      if ((  not  ROVI_CAPTURE())):
        $ 1239 "SubPrgResult:=rovi_err"
        global SubPrgResult=rovi_err
        $ 1240 "待機: 999999.0"
        sleep(999999.0)
      end
      $ 1241 "CaptPos:=ROVI_SOLVE(is_popup=False)"
      global CaptPos=ROVI_SOLVE(is_popup=False)
    end
    $ 1242 "MoveJ"
    $ 1243 "CaptPos0" "breakAfter"
    set_tcp(p[0.0,0.0,0.0,0.0,0.0,0.0])
    movej(get_inverse_kin(CaptPos0_p, qnear=CaptPos0_q), a=0.2617993877991494, v=0.15707963267948966)
  end
  def SUB_6101():
    $ 1244 "SUB_6101" "noBreak"
    $ 1245 "ROVI_RECIPE"
    $ 1246 "If文 (not ROVI_RECIPE(GPII_WorkNo))"
    if ((not ROVI_RECIPE(read_input_integer_register(2)))):
      $ 1247 "SubPrgResult:=rovi_err"
      global SubPrgResult=rovi_err
      $ 1248 "待機: 999999.0"
      sleep(999999.0)
    end
    $ 1249 "ROVI_RESET"
    $ 1250 "If文 ( not ROVI_RESET())"
    if ((  not  ROVI_RESET())):
      $ 1251 "SubPrgResult:=rovi_err"
      global SubPrgResult=rovi_err
      $ 1252 "待機: 999999.0"
      sleep(999999.0)
    end
    $ 1253 "ROVI_CAPTURE_1"
    $ 1254 "MoveJ"
    $ 1255 "スイッチ文 CheckMST"
    switch_1 = CheckMST
    $ 1256 "ケース 0"
    if (0 == switch_1):
      $ 1257 "Master_pos" "breakAfter"
      set_tcp(p[0.0,0.09,0.42,0.0,0.0,0.0])
      movej(Master_pos, a=0.20943951023931953, v=0.10471975511965977)
    elif (1 == switch_1):
      $ 1258 "ケース 1"
      $ 1259 "Master_pos" "breakAfter"
      set_tcp(p[0.0,0.09,0.42,0.0,0.0,0.0])
      movej(Master_pos, a=0.20943951023931953, v=0.10471975511965977)
    elif (2 == switch_1):
      $ 1260 "ケース 2"
      $ 1261 "Master_posL" "breakAfter"
      set_tcp(p[0.0,0.09,0.42,0.0,0.0,0.0])
      movej(Master_posL, a=0.20943951023931953, v=0.10471975511965977)
    elif (3 == switch_1):
      $ 1262 "ケース 3"
      $ 1263 "Master_posR" "breakAfter"
      set_tcp(p[0.0,0.09,0.42,0.0,0.0,0.0])
      movej(Master_posR, a=0.20943951023931953, v=0.10471975511965977)
    end
    $ 1265 "待機: 3.0"
    sleep(3.0)
    $ 1266 "If文 ( not ROVI_CAPTURE())"
    if ((  not  ROVI_CAPTURE())):
      $ 1267 "SubPrgResult:=rovi_err"
      global SubPrgResult=rovi_err
      $ 1268 "待機: 999999.0"
      sleep(999999.0)
    end
  end
  def SUB_6102RXFF():
    $ 1438 "SUB_6102RXFF" "noBreak"
    $ 1439 "荷重の設定: k10"
    set_target_payload(0.100000, [0.135000, 0.000000, 0.225000], [10.000000, 10.000000, 10.000000, 0.000000, 0.000000, 0.000000])
    $ 1440 "UF:=ベース_const"
    global UF=p[0.0,0.0,0.0,0.0,0.0,0.0]
    $ 1441 "If文 (GPII_CheckMST>0)"
    if ((read_input_integer_register(23)>0)):
      $ 1442 "ROVI_SOLVE"
      $ 1443 "If文 (CandCnt>0)"
      if ((CandCnt>0)):
        $ 1444 "Y2:=ROVI_SOLVE()"
        global Y2=ROVI_SOLVE()
        $ 1445 "If文 (Y2[0]≟10000.)"
        if ((Y2[0] == 10000.)):
          $ 1446 "SubPrgResult:=rovi_err"
          global SubPrgResult=rovi_err
          $ 1447 "待機: 999999.0"
          sleep(999999.0)
        end
      end
      $ 1448 "UF:=Y2"
      global UF=Y2
    end
    $ 1449 "M"
    $ 1450 "MoveL"
    $ 1451 "gGD_3_M_RX" "breakAfter"
    set_tcp(p[0.0,0.09,0.42,1.894,0.0,0.0])
    movel(pose_trans(UF, gGD_3_M_RX), a=0.07, v=0.12)
    $ 1452 "待機: 1.0"
    sleep(1.0)
    $ 1453 "gGD_2_M_RX" "breakAfter"
    set_tcp(p[0.0,0.09,0.42,1.894,0.0,0.0])
    movel(pose_trans(UF, gGD_2_M_RX), a=0.07, v=0.12)
    $ 1454 "待機: 1.0"
    sleep(1.0)
    $ 1455 "設定 GPBO_BLStop=HI:Pulse 1.0"
    thread SinglePulse2252():
      write_output_boolean_register(14, True)
      sleep(1.0)
      write_output_boolean_register(14, False)
    end
    singlePulse2252 = run SinglePulse2252()
    $ 1456 "ポップアップ: ok?"
    popup("ok?", "メッセージ", False, False, blocking=True)
    $ 1457 "tm_6102_01: リセット"
    tm_6102_01 = 0
    $ 1458 "tm_6102_01: 起動"
    tm_6102_01_is_counting = True
    $ 1459 "フォース"
    sleep(0.02)
    zero_ftsensor()
    force_mode(tool_pose(), [1, 1, 1, 0, 0, 0], [0.0, 0.0, 10.0, 0.0, 0.0, 0.0], 2, [0.005, 0.005, 0.04, 0.3490658503988659, 0.3490658503988659, 0.3490658503988659])
    $ 1460 "ShakeCnt:=-1" "noBreak"
    global ShakeCnt=-1
    $ 1461 "ループ ((Currpos_p_UF0[1]>(gGD_2_M_RX[1]-HandInZ)) and (tm_6102_01<GPII_TMHandIn))" "noBreak"
    while (((Currpos_p_UF0[1]>(gGD_2_M_RX[1]-HandInZ))  and  (tm_6102_01<read_input_integer_register(12)))):
      $ 1462 "IsShake:= False " "noBreak"
      global IsShake=  False  
      $ 1463 "If文 ShakeCnt<0" "noBreak"
      if (ShakeCnt<0):
        $ 1464 "NOT_SHAKE" "noBreak"
        $ 1465 "tm_6102_02: 起動" "noBreak"
        tm_6102_02_is_counting = True
        $ 1466 "待機 tm_6102_02>ShakeWaitSec" "noBreak"
        while (not(tm_6102_02>ShakeWaitSec)):
          sync()
        end
        $ 1467 "tm_6102_02: 停止" "noBreak"
        tm_6102_02_is_counting = False
        $ 1468 "tm_6102_02: リセット" "noBreak"
        tm_6102_02 = 0
        $ 1469 "ShakeCnt:=0" "noBreak"
        global ShakeCnt=0
      end
      $ 1470 "MONITOR_SPEED" "noBreak"
      $ 1471 "tm_6102_02: リセット" "noBreak"
      tm_6102_02 = 0
      $ 1472 "If文 norm(TCPSpeed[2])<TCPSpeedThZ" "noBreak"
      if (norm(TCPSpeed[2])<TCPSpeedThZ):
        $ 1473 "IsShake:= True " "noBreak"
        global IsShake=  True  
        $ 1474 "If文 ShakeCnt≟0" "noBreak"
        if (ShakeCnt == 0):
          $ 1475 "tm_6102_02: 起動" "noBreak"
          tm_6102_02_is_counting = True
          $ 1476 "ループ ((tm_6102_02<1.0) and (IsShake≟ True ))" "noBreak"
          while (((tm_6102_02<1.0)  and  (IsShake ==   True  ))):
            $ 1477 "If文 norm(TCPSpeed[2])≥TCPSpeedThZ" "noBreak"
            if (norm(TCPSpeed[2]) >= TCPSpeedThZ):
              $ 1478 "IsShake:= False " "noBreak"
              global IsShake=  False  
            end
          end
          $ 1479 "tm_6102_02: 停止" "noBreak"
          tm_6102_02_is_counting = False
        end
        $ 1480 "ShakeCnt:=ShakeCnt+1" "noBreak"
        global ShakeCnt=ShakeCnt+1
      end
      $ 1481 "SHAKE" "noBreak"
      $ 1482 "If文 IsShake" "noBreak"
      if (IsShake):
        $ 1483 "Sub3100_Option:=9" "noBreak"
        global Sub3100_Option=9
        $ 1484 "ループ2回" "noBreak"
        u12523u12540u12503_6 = 0
        while (u12523u12540u12503_6 < 2):
          $ 1485 "'7:RX+,8:RX-,9:RY+,10:RY-,11:RZ+,12:RZ-'" "noBreak"
          # '7:RX+,8:RX-,9:RY+,10:RY-,11:RZ+,12:RZ-'
          $ 1486 "Sub3100_Xd:=[0.,0.,0.,0.,0.,0.]" "noBreak"
          global Sub3100_Xd=[0.,0.,0.,0.,0.,0.]
          $ 1487 "Sub3100_q:=floor((Sub3100_Option-1) / 2)" "noBreak"
          global Sub3100_q=floor((Sub3100_Option-1) / 2)
          $ 1488 "Sub3100_e:=1-((Sub3100_Option-1) % 2)*2" "noBreak"
          global Sub3100_e=1-((Sub3100_Option-1) % 2)*2
          $ 1489 "Sub3100_t:=0.2" "noBreak"
          global Sub3100_t=0.2
          $ 1490 "Sub3100_Xd[Sub3100_q]=d2r(Sub3100_XdRot/2.0)*Sub3100_e" "noBreak"
          Sub3100_Xd[Sub3100_q]= d2r (Sub3100_XdRot/2.0)*Sub3100_e
          $ 1491 "speedl(Sub3100_Xd,Sub3100_aRot/2.0,Sub3100_t)" "noBreak"
          speedl(Sub3100_Xd,Sub3100_aRot/2.0,Sub3100_t)
          $ 1492 "If文 Sub3100_Option≟9" "noBreak"
          if (Sub3100_Option == 9):
            $ 1493 "Sub3100_Option:=10" "noBreak"
            global Sub3100_Option=10
          else:
            $ 1494 "Else" "noBreak"
            $ 1495 "Sub3100_Option:=9" "noBreak"
            global Sub3100_Option=9
          end
          $ 1496 "待機: 0.1" "noBreak"
          sleep(0.1)
          u12523u12540u12503_6 = u12523u12540u12503_6 + 1
        end
        $ 1497 "IsShake:= False " "noBreak"
        global IsShake=  False  
      end
      $ 1498 "待機: 0.1" "noBreak"
      sleep(0.1)
    end
    end_force_mode()
    stopl(5.0)
    $ 1499 "tm_6102_01: 停止"
    tm_6102_01_is_counting = False
    $ 1500 "設定 GPBO_BLStart=HI:Pulse 1.0"
    thread SinglePulse2253():
      write_output_boolean_register(15, True)
      sleep(1.0)
      write_output_boolean_register(15, False)
    end
    singlePulse2253 = run SinglePulse2253()
    $ 1501 "待機: 1.0"
    sleep(1.0)
    $ 1502 "ポップアップ: ok?"
    popup("ok?", "メッセージ", False, False, blocking=True)
    $ 1503 "MoveL"
    $ 1504 "gGD_2_M_RX" "breakAfter"
    set_tcp(p[0.0,0.09,0.42,1.894,0.0,0.0])
    movel(pose_trans(UF, gGD_2_M_RX), a=0.07, v=0.12)
    $ 1505 "待機: 1.0"
    sleep(1.0)
    $ 1506 "gGD_3_M_RX" "breakAfter"
    set_tcp(p[0.0,0.09,0.42,1.894,0.0,0.0])
    movel(pose_trans(UF, gGD_3_M_RX), a=0.07, v=0.12)
    $ 1507 "待機: 1.0"
    sleep(1.0)
    $ 1508 "LM"
    $ 1509 "MoveL"
    $ 1510 "gGD_3_LM_RX" "breakAfter"
    set_tcp(p[0.0,0.09,0.42,1.894,0.0,0.0])
    movel(pose_trans(UF, gGD_3_LM_RX), a=0.07, v=0.12)
    $ 1511 "待機: 1.0"
    sleep(1.0)
    $ 1512 "gGD_2_LM_RX" "breakAfter"
    set_tcp(p[0.0,0.09,0.42,1.894,0.0,0.0])
    movel(pose_trans(UF, gGD_2_LM_RX), a=0.07, v=0.12)
    $ 1513 "待機: 1.0"
    sleep(1.0)
    $ 1514 "設定 GPBO_BLStop=HI:Pulse 1.0"
    thread SinglePulse2254():
      write_output_boolean_register(14, True)
      sleep(1.0)
      write_output_boolean_register(14, False)
    end
    singlePulse2254 = run SinglePulse2254()
    $ 1515 "ポップアップ: ok?"
    popup("ok?", "メッセージ", False, False, blocking=True)
    $ 1516 "tm_6102_01: リセット"
    tm_6102_01 = 0
    $ 1517 "tm_6102_01: 起動"
    tm_6102_01_is_counting = True
    $ 1518 "フォース"
    sleep(0.02)
    zero_ftsensor()
    force_mode(tool_pose(), [1, 1, 1, 0, 0, 0], [0.0, 0.0, 10.0, 0.0, 0.0, 0.0], 2, [0.005, 0.005, 0.04, 0.3490658503988659, 0.3490658503988659, 0.3490658503988659])
    $ 1519 "待機 ((Currpos_p_UF0[1]≤(gGD_2_LM_RX[1]-HandInZ)) or (tm_6102_01>GPII_TMHandIn))" "noBreak"
    while (not(((Currpos_p_UF0[1] <= (gGD_2_LM_RX[1]-HandInZ))  or  (tm_6102_01>read_input_integer_register(12))))):
      sync()
    end
    end_force_mode()
    stopl(5.0)
    $ 1520 "tm_6102_01: 停止"
    tm_6102_01_is_counting = False
    $ 1521 "設定 GPBO_BLStart=HI:Pulse 1.0"
    thread SinglePulse2255():
      write_output_boolean_register(15, True)
      sleep(1.0)
      write_output_boolean_register(15, False)
    end
    singlePulse2255 = run SinglePulse2255()
    $ 1522 "待機: 1.0"
    sleep(1.0)
    $ 1523 "ポップアップ: ok?"
    popup("ok?", "メッセージ", False, False, blocking=True)
    $ 1524 "MoveL"
    $ 1525 "gGD_2_LM_RX" "breakAfter"
    set_tcp(p[0.0,0.09,0.42,1.894,0.0,0.0])
    movel(pose_trans(UF, gGD_2_LM_RX), a=0.07, v=0.12)
    $ 1526 "待機: 1.0"
    sleep(1.0)
    $ 1527 "gGD_3_LM_RX" "breakAfter"
    set_tcp(p[0.0,0.09,0.42,1.894,0.0,0.0])
    movel(pose_trans(UF, gGD_3_LM_RX), a=0.07, v=0.12)
    $ 1528 "待機: 1.0"
    sleep(1.0)
    $ 1529 "RM"
    $ 1530 "MoveL"
    $ 1531 "gGD_3_RM_RX" "breakAfter"
    set_tcp(p[0.0,0.09,0.42,1.894,0.0,0.0])
    movel(pose_trans(UF, gGD_3_RM_RX), a=0.07, v=0.12)
    $ 1532 "待機: 1.0"
    sleep(1.0)
    $ 1533 "gGD_2_RM_RX" "breakAfter"
    set_tcp(p[0.0,0.09,0.42,1.894,0.0,0.0])
    movel(pose_trans(UF, gGD_2_RM_RX), a=0.07, v=0.12)
    $ 1534 "待機: 1.0"
    sleep(1.0)
    $ 1535 "設定 GPBO_BLStop=HI:Pulse 1.0"
    thread SinglePulse2256():
      write_output_boolean_register(14, True)
      sleep(1.0)
      write_output_boolean_register(14, False)
    end
    singlePulse2256 = run SinglePulse2256()
    $ 1536 "ポップアップ: ok?"
    popup("ok?", "メッセージ", False, False, blocking=True)
    $ 1537 "tm_6102_01: リセット"
    tm_6102_01 = 0
    $ 1538 "tm_6102_01: 起動"
    tm_6102_01_is_counting = True
    $ 1539 "フォース"
    sleep(0.02)
    zero_ftsensor()
    force_mode(tool_pose(), [1, 1, 1, 0, 0, 0], [0.0, 0.0, 10.0, 0.0, 0.0, 0.0], 2, [0.005, 0.005, 0.04, 0.3490658503988659, 0.3490658503988659, 0.3490658503988659])
    $ 1540 "待機 ((Currpos_p_UF0[1]≤(gGD_2_RM_RX[1]-HandInZ)) or (tm_6102_01>GPII_TMHandIn))" "noBreak"
    while (not(((Currpos_p_UF0[1] <= (gGD_2_RM_RX[1]-HandInZ))  or  (tm_6102_01>read_input_integer_register(12))))):
      sync()
    end
    end_force_mode()
    stopl(5.0)
    $ 1541 "tm_6102_01: 停止"
    tm_6102_01_is_counting = False
    $ 1542 "設定 GPBO_BLStart=HI:Pulse 1.0"
    thread SinglePulse2257():
      write_output_boolean_register(15, True)
      sleep(1.0)
      write_output_boolean_register(15, False)
    end
    singlePulse2257 = run SinglePulse2257()
    $ 1543 "待機: 1.0"
    sleep(1.0)
    $ 1544 "ポップアップ: ok?"
    popup("ok?", "メッセージ", False, False, blocking=True)
    $ 1545 "MoveL"
    $ 1546 "gGD_2_RM_RX" "breakAfter"
    set_tcp(p[0.0,0.09,0.42,1.894,0.0,0.0])
    movel(pose_trans(UF, gGD_2_RM_RX), a=0.07, v=0.12)
    $ 1547 "待機: 1.0"
    sleep(1.0)
    $ 1548 "gGD_3_RM_RX" "breakAfter"
    set_tcp(p[0.0,0.09,0.42,1.894,0.0,0.0])
    movel(pose_trans(UF, gGD_3_RM_RX), a=0.07, v=0.12)
    $ 1549 "待機: 1.0"
    sleep(1.0)
    $ 1550 "MoveL"
    $ 1551 "gHome_Position" "breakAfter"
    set_tcp(p[0.0,0.09,0.42,0.0,0.0,0.0])
    movel(gHome_Position, a=0.07, v=0.12)
  end
  def SUB_6402():
    $ 1552 "SUB_6402" "noBreak"
    $ 1553 "INITIALIZE"
    $ 1554 "荷重の設定: k10"
    set_target_payload(0.100000, [0.135000, 0.000000, 0.225000], [10.000000, 10.000000, 10.000000, 0.000000, 0.000000, 0.000000])
    $ 1555 "ROVI_RECIPE"
    $ 1556 "If文 ( not ROVI_RECIPE(GPII_ConveyorNo))"
    if ((  not  ROVI_RECIPE(read_input_integer_register(1)))):
      $ 1557 "SubPrgResult:=rovi_err"
      global SubPrgResult=rovi_err
      $ 1558 "待機: 999999.0"
      sleep(999999.0)
    end
    $ 1559 "ROVI_RESET"
    $ 1560 "If文 ( not ROVI_RESET())"
    if ((  not  ROVI_RESET())):
      $ 1561 "SubPrgResult:=rovi_err"
      global SubPrgResult=rovi_err
      $ 1562 "待機: 999999.0"
      sleep(999999.0)
    end
    $ 1563 "ROVI_CAPTURE"
    $ 1564 "MoveL"
    $ 1565 "Capt_CV_M" "breakAfter"
    set_tcp(p[0.0,0.09,0.42,0.0,0.0,0.0])
    movel(Capt_CV_M, a=0.07, v=0.2)
    $ 1566 "待機: 2.0"
    sleep(2.0)
    $ 1567 "If文 ( not ROVI_CAPTURE())"
    if ((  not  ROVI_CAPTURE())):
      $ 1568 "SubPrgResult:=rovi_err"
      global SubPrgResult=rovi_err
      $ 1569 "待機: 999999.0"
      sleep(999999.0)
    end
  end
  def SUB_7001():
    $ 1570 "SUB_7001" "noBreak"
    $ 1571 "荷重の設定: k10"
    set_target_payload(0.100000, [0.135000, 0.000000, 0.225000], [10.000000, 10.000000, 10.000000, 0.000000, 0.000000, 0.000000])
    $ 1572 "MoveL"
    $ 1573 "gTAIHI_pos1" "breakAfter"
    set_tcp(p[0.0,0.09,0.42,0.0,0.0,0.0])
    movel(gTAIHI_pos1, a=0.07, v=0.12)
    $ 1574 "gTAIHI_pos2" "breakAfter"
    set_tcp(p[0.0,0.09,0.42,0.0,0.0,0.0])
    movel(gTAIHI_pos2, a=0.07, v=0.12)
    $ 1575 "gTAIHI_pos3" "breakAfter"
    set_tcp(p[0.0,0.09,0.42,0.0,0.0,0.0])
    movel(gTAIHI_pos3, a=0.07, v=0.12)
    $ 1576 "gTAIHI_pos4" "breakAfter"
    set_tcp(p[0.0,0.09,0.42,0.0,0.0,0.0])
    movel(gTAIHI_pos4, a=0.07, v=0.12)
    $ 1577 "gTAIHI_pos5" "breakAfter"
    set_tcp(p[0.0,0.09,0.42,0.0,0.0,0.0])
    movel(gTAIHI_pos5, a=0.07, v=0.12)
  end
  def SUB_7002():
    $ 1578 "SUB_7002" "noBreak"
    $ 1579 "荷重の設定: k10"
    set_target_payload(0.100000, [0.135000, 0.000000, 0.225000], [10.000000, 10.000000, 10.000000, 0.000000, 0.000000, 0.000000])
    $ 1580 "MoveL"
    $ 1581 "gTAIHI_pos5" "breakAfter"
    movel(gTAIHI_pos5, a=0.07, v=0.12)
    $ 1582 "gTAIHI_pos4" "breakAfter"
    movel(gTAIHI_pos4, a=0.07, v=0.12)
    $ 1583 "gTAIHI_pos3" "breakAfter"
    movel(gTAIHI_pos3, a=0.07, v=0.12)
    $ 1584 "gTAIHI_pos2" "breakAfter"
    movel(gTAIHI_pos2, a=0.07, v=0.12)
    $ 1585 "gTAIHI_pos1" "breakAfter"
    movel(gTAIHI_pos1, a=0.07, v=0.12)
    $ 1586 "gHome_Position" "breakAfter"
    movel(gHome_Position, a=0.07, v=0.12)
  end
  $ 2 "開始前シーケンス"
  $ 3 "スクリプト: ROVI_RESET.script"
  def ROVI_RESET():
    if (not socket_open(host,port,socket_name)):
      rovi_err=902
      return False
    end
    socket_send_line("X0()",socket_name)
    ret=socket_read_line(socket_name,socket_timeout)
    if (ret == "OK"):
      rovi_err=0
    elif (ret == "NG"):
      rovi_err=to_num(socket_read_line(socket_name,socket_timeout))
    else:
      ret="NG"
      rovi_err=903
    end
    socket_close(socket_name)
    if (rovi_err != 0):
      if (is_popup):
        popup(str_cat(ret,rovi_err),title="X0",warning=True,blocking=True)
      end
      return False
    else:
      return True
    end
  end
  $ 4 "スクリプト: ROVI_CAPTURE.script"
  def ROVI_CAPTURE():
    Y1=[0.0,0.0,0.0,0.0]
  #  p=get_actual_tool_flange_pose()
    p=Bucket
    if (not socket_open(host,port,socket_name)):
      rovi_err=902
      return False
    end
    socket_send_string("X1(",socket_name)
    socket_send_string(p[0],socket_name)
    socket_send_string(",",socket_name)
    socket_send_string(p[1],socket_name)
    socket_send_string(",",socket_name)
    socket_send_string(p[2],socket_name)
    socket_send_string(",",socket_name)
    socket_send_string(p[3],socket_name)
    socket_send_string(",",socket_name)
    socket_send_string(p[4],socket_name)
    socket_send_string(",",socket_name)
    socket_send_string(p[5],socket_name)
    socket_send_line(")",socket_name)
    ret=socket_read_line(socket_name,socket_timeout)
    if (ret == "OK"):
      rovi_err=0
      f=socket_read_ascii_float(4,socket_name,socket_timeout)
      while (f[0]!=4):
        sleep(0.3)
        f=socket_read_ascii_float(4,socket_name,socket_timeout)
      end
      i=0
      while (i<4):
        Y1[i]=f[i+1]
        i=i+1
      end
    elif (ret == "NG"):
      rovi_err=to_num(socket_read_line(socket_name,socket_timeout))
    else:
      ret="NG"
      rovi_err=903
    end
    socket_close(socket_name)
    if (rovi_err != 0):
      if (is_popup):
        popup(str_cat(ret,rovi_err),title="X1",warning=True,blocking=True)
      end
      return False
    else:
      return True
    end
  end
  $ 5 "スクリプト: ROVI_SOLVE.script"
  def ROVI_SOLVE(is_popup=is_popup):
    buf=p[10000.0,0.0,0.0,0.0,0.0,0.0]
    if (not socket_open(host,port,socket_name)):
      rovi_err=902
      return False
    end
    socket_send_line("X2()",socket_name)
    ret=socket_read_line(socket_name,socket_timeout)
    if (ret == "OK"):
      rovi_err=0
      f=socket_read_ascii_float(6,socket_name,socket_timeout)
      while (f[0]!=6):
        sleep(0.3)
        f=socket_read_ascii_float(6,socket_name,socket_timeout)
      end
      counter=0
      while (counter<6):
        buf[counter]=f[counter+1]
        counter=counter+1
      end
    elif (ret == "NG"):
      rovi_err=to_num(socket_read_line(socket_name,socket_timeout))
    else:
      ret="NG"
      rovi_err=903
    end
    sleep(1.0)
    socket_close(socket_name)
    if (rovi_err != 0):
      if (is_popup):
        popup(str_cat(ret,rovi_err),title="X2",warning=True,blocking=True)
      end
    end
    return buf
  end
  $ 6 "スクリプト: ROVI_RECIPE.script"
  def ROVI_RECIPE(recipe):
    if (not socket_open(host,port,socket_name)):
      rovi_err=902
      return False
    end
    socket_send_line(str_cat(str_cat("X3(",recipe),")"),socket_name)
    ret=socket_read_line(socket_name,socket_timeout)
    if (ret == "OK"):
      rovi_err=0
    elif (ret == "NG"):
      rovi_err=to_num(socket_read_line(socket_name,socket_timeout))
    else:
      ret="NG"
      rovi_err=903
    end
    socket_close(socket_name)
    if (rovi_err != 0):
      if (is_popup):
        popup(str_cat(ret,rovi_err),title="X3",warning=True,blocking=True)
      end
      return False
    else:
      return True
    end
  end
  $ 7 "スクリプト: ROVI_PARAM.script"
  def ROVI_PARAM(prm_name,prm_value=None):
    Y8=0.0
    if (not socket_open(host,port,socket_name)):
      rovi_err=902
      return False
    end
    socket_send_string("X8(",socket_name)
    socket_send_string(prm_name,socket_name)
    if (prm_value != None):
      socket_send_string(" ",socket_name)
      socket_send_string(prm_value,socket_name)
    end
    socket_send_line(")",socket_name)
    ret=socket_read_line(socket_name,socket_timeout)
    if (ret == "OK"):
      rovi_err=0
      if (prm_value == None):  # rosparam get
        Y8=to_num(socket_read_line(socket_name,socket_timeout))
      else:    # rosparam set
        f=1
      end
    elif (ret == "NG"):
      rovi_err=to_num(socket_read_line(socket_name,socket_timeout))
    else:
      ret="NG"
      rovi_err=903
    end
    socket_close(socket_name)
    if (rovi_err != 0):
      if (is_popup):
        popup(str_cat(ret,rovi_err),title="X8",warning=True,blocking=True)
      end
      return False
    else:
      return True
    end
  end
  $ 8 "スクリプト: STATUS_CONTROL.script"
  def CHECK_VT_STATUS():
    write_output_boolean_register(8, read_input_boolean_register(64))   # GPBO_PCOK
    write_output_boolean_register(9, read_input_boolean_register(65))   # GPBO_YCAMOK
    write_output_integer_register(5, read_input_integer_register(24))   # GPIO_PayloadNo
  end
  $ 9 "スクリプト: CYCLE_CONTROL.script"
  def GET_REG(prg_no):
    WorkPosNo=read_input_integer_register(4)-1                       # GPII_WorkPosNo
    CaptIndex[WorkPosNo]=read_input_integer_register(21)-1           # GPII_CaptColNo
    CaptRowNo=read_input_integer_register(20)-1        # GPII_CaptRowNo
    CaptStepZ=read_input_integer_register(6) / 1000.0         # GPII_CaptStepZ
    ReCaptNo=0
    if (prg_no==1203):
      ReCaptNo=read_input_integer_register(22)                # GPII_ReCaptNo
    end
    ReCaptZ=read_input_integer_register(7) / 1000.0         # GPII_ReCaptZ
    CutOffZDef=read_input_integer_register(11) / 1000.0          # GPII_CutOffZ
    CrankDepthFull=read_input_integer_register(10) / 1000.0   # GPII_FullDepth
  end
  
  def POSE_SUB(p, teach_frame):
    return pose_trans(inv(teach_frame), p)
  end
  
  def GET_BUCKET_UPPER(pos=0):
    if UseNewCaptPos:
      p=POSE_SUB(CaptPoint_C, BucketM)
      pX=[BKWidth/2,CaptPointL_dX,BKWidth-CaptPointR_dX]
      p[0]=pX[pos]
    else:
      captpos=[CaptPoint_C,CaptPoint_L,CaptPoint_R]
      p=captpos[pos]
      p=POSE_SUB(p, BucketM)
    end
    return p
  end
  
  def SET_BUCKET_DEF():
    BucketM=pBucketM
    if (WorkPosNo<0):
      Bucket=pBucketC
    else:
      Bucket=pBucket[WorkPosNo]
    end
  end
  
  def SET_BUCKET():
    SET_BUCKET_DEF()
    Bucket[2]=Bucket[2]-CaptStepZ*CaptRowNo
  end
  
  def SET_CV():
    CV=pCV
  end
  
  def SET_CAPT_INDEX():
    CaptIndexWk=CaptIndex[WorkPosNo]
    ReCaptZWk=0
    if (prg_no==1203):
      if   (ReCaptNo==0):
        if (CaptIndexWk==0):
          if (0<=DistPillarBak):
            CaptIndexWk=1
          else:
            CaptIndexWk=2
          end
          ReCaptZWk=0
        else:
          CaptIndexWk=0
          ReCaptZWk=0
        end
      elif (ReCaptNo==1):
        if (CaptIndexWk==0):
          CaptIndexWk=0
          ReCaptZWk=-ReCaptZ
        else:
          CaptIndexWk=CaptIndexWk
          ReCaptZWk=-ReCaptZ
        end
      else:
        if (CaptIndexWk==0):
          CaptIndexWk=0
          ReCaptZWk=ReCaptZ
        else:
          CaptIndexWk=CaptIndexWk
          ReCaptZWk=ReCaptZ
        end
      end
    end
  end
  
  def GET_CAPTPOS():
    SET_BUCKET()
    SET_CAPT_INDEX()
    if UseNewCaptPos:
      p=GET_BUCKET_UPPER(CaptIndexWk)
      p[2]=p[2]-ReCaptZWk
    else:
      captpos=[CaptPoint_C,CaptPoint_L,CaptPoint_R]
      p=captpos[CaptIndexWk]
      p[2]=p[2]-ReCaptZWk
      p=POSE_SUB(p, BucketM)
    end
    return p
  end
  
  def CHECK_CAPTPOS():
    isOK=((CaptStepZ*(read_input_integer_register(20)-1)) < (read_input_integer_register(9) / 1000.0))
    return isOK
  end
  
  def GET_ZSLIDE_POS(p):
    p[2]=p[2]-CaptStepZ*CaptRowNo
    return p
  end
  
  def END_CYCLE():
    stopl(1.2)
    end_force_mode()
    end_freedrive_mode()
    socket_close(socket_name)
  end
  
  def CHECK_SPEED(smax,f=[1,1,1,1,1,1]):
    s=TCPSpeed
    i=0
    while (i<6):
      if ((f[i]==1) and (smax[i]<s[i])):
        return False
      end
      i=i+1
    end
    return True
  end
  $ 10 "スクリプト: ZONE_CONTROL.script"
  def GET_DIST(P1, P2):
    return pose_dist(P1, P2)
  end
  def CHECK_DIST_NEAR(P1, P2, th):
    return (GET_DIST(P1, P2) < th)
  end
  def DIST_HOME():
    return pose_dist(gHome_Position,CurrPos_p)
  end
  
  def CHECK_HOME():
    return (DIST_HOME()<ZoneDistTh)
  end
  
  def DIST_CVUpper():
    if (read_input_integer_register(4)==1):
      p=g2GD_pos1
    else:
      p=g1GD_pos1
    end
    return pose_dist(p,CurrPos_p)
  end
  
  def CHECK_CVUpper():
    return (DIST_CVUpper()<ZoneDistTh)
  end
  
  def CHECK_RB_POS(prg_no):
    ret=True
    if (prg_no==1001):
      ret=CHECK_EVAC()
    end
    if ((prg_no==1201) or (prg_no==1401) or (prg_no==1402) or (prg_no==6001) or (prg_no==6101) or (prg_no==6401) or (prg_no==6102) or (prg_no==7001)):
      ret=CHECK_HOME()
    end
    if ((prg_no==1002) or (prg_no==1241) or (prg_no==1261)):
      ret=CHECK_BKInside()
    end
    if (prg_no==1251):
      ret=(CHECK_HOME() or CHECK_CVUpper())
    end
    if (ret != True):
      SubPrgResult=801
      sleep(999999.0)
    end
  end
  
  def DIST_ORIGIN():
    p=CurrPos_p
    o=p
    o[0]=0.0
    o[1]=0.0
    return pose_dist(o,p)
  end
  
  def CHECK_EVAC_ORG():
    return (EvacRadiusTh<DIST_ORIGIN())
  end
  
  def CHECK_EVAC_X():
    return (EvacXTh[0]<CurrPos_p[0] and CurrPos_p[0]<EvacXTh[1])
  end
  
  def CHECK_EVAC_Y():
    return (EvacYTh[0]<CurrPos_p[1] and CurrPos_p[1]<EvacYTh[1])
  end
  
  def CHECK_EVAC_Z():
    return (EvacZTh[0]<CurrPos_p[2])
  end
  
  def CHECK_EVAC():
    ret=True
    ret=(ret and CHECK_EVAC_ORG())
    ret=(ret and CHECK_EVAC_X())
    ret=(ret and CHECK_EVAC_Y())
    ret=(ret and CHECK_EVAC_Z())
    return ret
  end
  
  def CHECK_BKInside():
    ret=True
    pos=read_input_integer_register(4)
    if (pos>2):
      ret=False
    else:
      if (not read_input_boolean_register(13+pos)):
        ret=False
        ver_3=read_input_boolean_register(13+pos)
      else:
        bk=pBucket[pos-1]
        if (pos==1):
          ret=(ret and CurrPos_p[0]>ZoneHomeX)
          ret=(ret and bk[1]-(BucketWidth-ZoneBucketGap)<CurrPos_p[1] and CurrPos_p[1]<bk[1]-ZoneBucketGap)
        elif (pos==2):
          ret=(ret and CurrPos_p[0]<-ZoneHomeX)
          ret=(ret and bk[1]+ZoneBucketGap<CurrPos_p[1] and CurrPos_p[1]<bk[1]+(BucketWidth-ZoneBucketGap))
        end
      end
    end
    return ret
  end
  
  def CHECK_CVOutside():
    ret=True
    ret=(ret and gCV_11_M[0]-Zone6ThX<CurrPos_p[0])
    ret=(ret and CurrPos_p[0]<gCV_11_M[0]+Zone6ThX)
    ret=(ret and gCV_11_M[1]-Zone6ThY<CurrPos_p[1])
    ret=(ret and CurrPos_p[1]<gCV_11_M[1]+Zone6ThY)
    return (not ret)
  end
  
  def CHECK_ZONE(no):
    if (no==1):
      return (CurrPos_p[2]>=Zone1ZTh)
    elif (no==2):
      return (CurrPos_p[0]>ZoneHomeX)
    elif (no==3):
      return (CurrPos_p[0]<-ZoneHomeX)
    elif (no==4):
      return CHECK_CVUpper()
    elif (no==5):
      return CHECK_BKInside()
    elif (no==6):
      return CHECK_CVOutside()
    end
  end
  $ 11 "スクリプト: ALIGN_AXIS.script"
  def GET_NORM_VEC(p,axis=2):
    rot=p[0.0, 0.0, 0.0, p[3], p[4], p[5]]
    vec=p[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
    vec[axis]=1.0
    norm_p=pose_trans(rot,vec)
    return [norm_p[0], norm_p[1], norm_p[2]]
  end
  
  def GET_INNER_PRODUCT(v1,v2):
    return v1[0]*v2[0]+v1[1]*v2[1]+v1[2]*v2[2]
  end
  def GET_OUTER_PRODUCT(v1,v2):
    x=v1[1]*v2[2]-v1[2]*v2[1]
    y=v1[2]*v2[0]-v1[0]*v2[2]
    z=v1[0]*v2[1]-v1[1]*v2[0]
    return [x,y,z]
  end
  def GET_THETA(v1,v2):
  #  cos=GET_INNER_PRODUCT(v1,v2) / norm(v1) / norm(v2)
    cos=GET_INNER_PRODUCT(v1,v2)
    g_cos=cos
    theta=norm(acos(cos))
    return theta
  end
  
  def GET_ALIGNED_POSE(target,feature,axis=2):
    feature_from_target=pose_trans(pose_inv(target),feature)
    g_f_from_t=feature_from_target
    nz_feature_from_target=GET_NORM_VEC(feature_from_target,axis)
    g_nz_f_from_t=nz_feature_from_target
    nz_target_from_target=[0.0, 0.0, 0.0]
    nz_target_from_target[axis]=1.0
    g_nz_t_from_t=nz_target_from_target
  
    theta=GET_THETA(nz_feature_from_target,nz_target_from_target)
    g_theta=theta
    rot_vec_n=normalize(GET_OUTER_PRODUCT(nz_target_from_target,nz_feature_from_target))
  
    if theta>d2r(90.0):
      theta=theta-d2r(180.0)
    end
    rot_vec=rot_vec_n * (theta)
    rot_p=p[0.0,0.0,0.0,rot_vec[0],rot_vec[1],rot_vec[2]]
    return pose_trans(target,rot_p)
  end
  def GET_ALIGNED_TCP(feature,axis=2):
    tcp=get_actual_tcp_pose()
    return GET_ALIGNED_POSE(tcp,feature,axis)
  end
  
  $ 12 "スクリプト: ROTATE_CONTROL.script"
  def GET_TCP_FORCE_TOOL():
    force_torque=get_tcp_force()
    force_B=p[force_torque[0], force_torque[1], force_torque[2], 0, 0, 0]
    torque_B=p[force_torque[3], force_torque[4], force_torque[5], 0, 0, 0]
    tcp=get_actual_tcp_pose()
    rotation_BT=p[0, 0, 0, tcp[3], tcp[4], tcp[5]]
    force_T=pose_trans(pose_inv(rotation_BT), force_B)
    torque_T=pose_trans(pose_inv(rotation_BT), torque_B)
    force_torque_T=p[force_T[0], force_T[1], force_T[2], torque_T[0], torque_T[1], torque_T[2]]
    return force_torque_T
  end
  
  def CHECK_VALUE_RZ():
    return True
  end
  
  def GET_FORCE_VALUE_RZ(target):
    PoseSub= pose_sub (CurrPos_p,target)
    RYSub=r2d(PoseSub[4])
    RZSub=r2d(PoseSub[5])
  #  if (RYSub<RZSupRYRange[0] or RZSupRYRange[1]<RYSub):
  #    RZSupForceVal=0.0
  #    return RZSupForceVal
  #  end
    if (RZSub<0):
      RZMin=RZSupDegMin[0]
      RZRatio=RZSupRatio[0]
      RZOffset=RZSupOffset[0]
    else:
      RZMin=RZSupDegMin[1]
      RZRatio=RZSupRatio[1]
      RZOffset=-RZSupOffset[1]
    end
    if (norm(RZSub) >= norm(RZMin)):
      RZSupForceVal=(RZMin-RZSub)*RZRatio+RZOffset
    else:
      RZSupForceVal=0
    end
    if (RZSupForceVal<RZSupForceRange[0]):
      RZSupForceVal=RZSupForceRange[0]
    elif (RZSupForceRange[1]<RZSupForceVal):
      RZSupForceVal=RZSupForceRange[1]
    end
    if (RYSub<RZSupRYRange[0] or RZSupRYRange[1]<RYSub):
      RZSupForceVal=0
    end
    if ((not UseRZSupStep1) and (ForceStep==1)):
      RZSupForceVal=0
    end
    return RZSupForceVal
  end
  
  def GET_CVCORR_RZ(target):
    PoseSub=pose_sub(CurrPos_p,target)
    RYSub=r2d(PoseSub[4])
    if (RYSub<0):
      RYMin=-CVCorrDegMin[0]
      RZRatio=CVCorrRatio[0]
      RZOffset=-CVCorrOffset[0]
    else:
      RYMin=-CVCorrDegMin[1]
      RZRatio=CVCorrRatio[1]
      RZOffset=CVCorrOffset[1]
    end
    if (norm(RYSub) >= norm(RYMin)):
      CVCorrRZVal=RYSub*RZRatio+RZOffset
    else:
      CVCorrRZVal=0
    end
    return CVCorrRZVal
  end
  $ 209 "u12473u12524u12483u12489_2"
  thread u12473u12524u12483u12489_2():
    while (True):
      $ 210 "Sub3100_GPII18:=GPII_RunOption"
      global Sub3100_GPII18=read_input_integer_register(18)
      $ 211 "CurrPos=get_actual_tool_flange_pose()"
      CurrPos=get_actual_tool_flange_pose()
      $ 212 "CurrPos_p=get_actual_tcp_pose()"
      CurrPos_p= get_actual_tcp_pose ()
      $ 213 "Currpos_p_UF0=pose_trans(pose_inv(UF), CurrPos_p)"
      Currpos_p_UF0= pose_trans ( pose_inv (UF), CurrPos_p)
      $ 214 "TCPSpeed:=get_actual_tcp_speed()"
      global TCPSpeed=get_actual_tcp_speed()
      $ 215 "TCPForce:=get_tcp_force()"
      global TCPForce=get_tcp_force()
      $ 216 "設定 GPBO_RBHome=CHECK_HOME()"
      write_output_boolean_register(12, CHECK_HOME())
      $ 217 "設定 GPBO_AllowGoHom=CHECK_EVAC()"
      write_output_boolean_register(16, CHECK_EVAC())
      $ 218 "設定 GPBO_Zone01=CHECK_ZONE(1)"
      write_output_boolean_register(24, CHECK_ZONE(1))
      $ 219 "設定 GPBO_Zone02=CHECK_ZONE(2)"
      write_output_boolean_register(25, CHECK_ZONE(2))
      $ 220 "設定 GPBO_Zone03=CHECK_ZONE(3)"
      write_output_boolean_register(26, CHECK_ZONE(3))
      $ 221 "設定 GPBO_Zone04=CHECK_ZONE(4)"
      write_output_boolean_register(27, CHECK_ZONE(4))
      $ 222 "設定 GPBO_Zone05=CHECK_ZONE(5)"
      write_output_boolean_register(28, CHECK_ZONE(5))
      $ 223 "設定 GPBO_Zone06=CHECK_ZONE(6)"
      write_output_boolean_register(29, CHECK_ZONE(6))
      $ 224 "CHECK_VT_STATUS()"
      CHECK_VT_STATUS()
      $ 225 "sync()"
      sync()
    end
  end
  threadId_u12473u12524u12483u12489_2 = run u12473u12524u12483u12489_2()
  while (True):
    $ 14 "ロボットプログラム"
    $ 15 "position_deviation_warning(True,0.4)"
    position_deviation_warning(True,0.4)
    $ 16 "荷重の設定: k10"
    set_target_payload(0.100000, [0.135000, 0.000000, 0.225000], [10.000000, 10.000000, 10.000000, 0.000000, 0.000000, 0.000000])
    $ 17 "設定"
    set_tcp(p[0.0,0.09,0.42,0.0,0.0,0.0])
    $ 18 "CutOffTCP:=get_tcp_offset()"
    global CutOffTCP=get_tcp_offset()
    $ 19 "設定 GPIO_PrgNo=0"
    write_output_integer_register(0, 0)
    $ 20 "設定 GPBO_PrgBegin=オフ"
    write_output_boolean_register(4, False)
    $ 21 "設定 GPBO_PrgEnd=オフ"
    write_output_boolean_register(5, False)
    $ 22 "設定 GPBO_PrgRun=オフ"
    write_output_boolean_register(6, False)
    $ 23 "設定 GPBO_BKPosDone=オフ"
    write_output_boolean_register(13, False)
    $ 24 "設定 GPBO_BLStop=オフ"
    write_output_boolean_register(14, False)
    $ 25 "設定 GPBO_BLStart=オフ"
    write_output_boolean_register(15, False)
    $ 26 "設定 GPBO_Released=オフ"
    write_output_boolean_register(17, False)
    $ 27 "待機 GPBI_PrgStart=LO"
    while (read_input_boolean_register(4) == True):
      sync()
    end
    $ 28 "待機 GPBI_PrgStart=HI"
    while (read_input_boolean_register(4) == False):
      sync()
    end
    $ 29 "設定 GPIO_PrgResult=0"
    write_output_integer_register(1, 0)
    $ 30 "prg_no:=GPII_PrgNo"
    global prg_no=read_input_integer_register(0)
    $ 31 "If文 ( not GPBI_PrgStop≠ False )"
    global thread_flag_31=0
    thread Thread_if_31():
      $ 32 "CHECK_RB_POS(prg_no)"
      CHECK_RB_POS(prg_no)
      $ 33 "設定 GPIO_PrgNo=prg_no"
      write_output_integer_register(0, prg_no)
      $ 34 "待機: 0.1"
      sleep(0.1)
      $ 35 "設定 GPBO_PrgBegin=HI:Pulse 1.0"
      thread SinglePulse2258():
        write_output_boolean_register(4, True)
        sleep(1.0)
        write_output_boolean_register(4, False)
      end
      singlePulse2258 = run SinglePulse2258()
      $ 36 "SubPrgResult:=100"
      global SubPrgResult=100
      $ 37 "If文 (SubPrgResult≟100)"
      global thread_flag_37=0
      thread Thread_if_37():
        $ 38 "GET_REG(prg_no)"
        GET_REG(prg_no)
        $ 39 "スイッチ文 prg_no"
        switch_1 = prg_no
        $ 40 "ケース 1001"
        if (1001 == switch_1):
          $ 41 "CHECK_RB_POS(prg_no)"
          CHECK_RB_POS(prg_no)
          $ 42 "設定 GPIO_SubPrgNo=001"
          write_output_integer_register(2, 001)
          $ 43 "呼び出し SUB_001"
          SUB_001()
        elif (1002 == switch_1):
          $ 44 "ケース 1002"
          $ 45 "設定 GPIO_SubPrgNo=102"
          write_output_integer_register(2, 102)
          $ 46 "呼び出し SUB_002"
          SUB_002()
          $ 47 "設定 GPIO_SubPrgNo=001"
          write_output_integer_register(2, 001)
          $ 48 "呼び出し SUB_001"
          SUB_001()
        elif (1201 == switch_1):
          $ 49 "ケース 1201"
          $ 50 "設定 GPIO_SubPrgNo=101"
          write_output_integer_register(2, 101)
          $ 51 "呼び出し SUB_101"
          SUB_101()
          $ 52 "設定 GPIO_SubPrgNo=102"
          write_output_integer_register(2, 102)
          $ 53 "呼び出し SUB_102"
          SUB_102()
          $ 54 "設定 GPIO_SubPrgNo=104"
          write_output_integer_register(2, 104)
          $ 58 "呼び出し SUB_104RXFF"
          SUB_104RXFF()
          $ 59 "設定 GPIO_SubPrgNo=105"
          write_output_integer_register(2, 105)
          $ 60 "呼び出し SUB_105"
          SUB_105()
          $ 61 "設定 GPIO_SubPrgNo=106"
          write_output_integer_register(2, 106)
          $ 62 "呼び出し SUB_106"
          SUB_106()
          $ 63 "設定 GPIO_SubPrgNo=121"
          write_output_integer_register(2, 121)
          $ 64 "呼び出し SUB_121"
          SUB_121()
          $ 65 "設定 GPIO_SubPrgNo=122"
          write_output_integer_register(2, 122)
          $ 66 "呼び出し SUB_122"
          SUB_122()
          $ 67 "設定 GPIO_SubPrgNo=001"
          write_output_integer_register(2, 001)
          $ 68 "呼び出し SUB_001"
          SUB_001()
          $ 69 "If文 (CandCnt≟1)"
          if ((CandCnt == 1)):
            $ 70 "SubPrgResult:=990"
            global SubPrgResult=990
            $ 71 "待機: 999999.0"
            sleep(999999.0)
          end
        elif (1202 == switch_1):
          $ 72 "ケース 1202"
          $ 73 "設定 GPIO_SubPrgNo=102"
          write_output_integer_register(2, 102)
          $ 74 "呼び出し SUB_102"
          SUB_102()
          $ 75 "設定 GPIO_SubPrgNo=104"
          write_output_integer_register(2, 104)
          $ 80 "呼び出し SUB_104RXFF"
          SUB_104RXFF()
          $ 81 "設定 GPIO_SubPrgNo=105"
          write_output_integer_register(2, 105)
          $ 82 "呼び出し SUB_105"
          SUB_105()
          $ 83 "設定 GPIO_SubPrgNo=106"
          write_output_integer_register(2, 106)
          $ 84 "呼び出し SUB_106"
          SUB_106()
          $ 85 "設定 GPIO_SubPrgNo=121"
          write_output_integer_register(2, 121)
          $ 86 "呼び出し SUB_121"
          SUB_121()
          $ 87 "設定 GPIO_SubPrgNo=122"
          write_output_integer_register(2, 122)
          $ 88 "呼び出し SUB_122"
          SUB_122()
          $ 89 "設定 GPIO_SubPrgNo=001"
          write_output_integer_register(2, 001)
          $ 90 "呼び出し SUB_001"
          SUB_001()
          $ 91 "If文 (CandCnt≟1)"
          if ((CandCnt == 1)):
            $ 92 "SubPrgResult:=990"
            global SubPrgResult=990
            $ 93 "待機: 999999.0"
            sleep(999999.0)
          end
        elif (1203 == switch_1):
          $ 94 "ケース 1203"
          $ 95 "設定 GPIO_SubPrgNo=103"
          write_output_integer_register(2, 103)
          $ 96 "呼び出し SUB_103"
          SUB_103()
          $ 97 "設定 GPIO_SubPrgNo=104"
          write_output_integer_register(2, 104)
          $ 101 "呼び出し SUB_104RXFF"
          SUB_104RXFF()
          $ 102 "設定 GPIO_SubPrgNo=105"
          write_output_integer_register(2, 105)
          $ 103 "呼び出し SUB_105"
          SUB_105()
          $ 104 "設定 GPIO_SubPrgNo=106"
          write_output_integer_register(2, 106)
          $ 105 "呼び出し SUB_106"
          SUB_106()
          $ 106 "設定 GPIO_SubPrgNo=121"
          write_output_integer_register(2, 121)
          $ 107 "呼び出し SUB_121"
          SUB_121()
          $ 108 "設定 GPIO_SubPrgNo=122"
          write_output_integer_register(2, 122)
          $ 109 "呼び出し SUB_122"
          SUB_122()
          $ 110 "設定 GPIO_SubPrgNo=001"
          write_output_integer_register(2, 001)
          $ 111 "呼び出し SUB_001"
          SUB_001()
          $ 112 "If文 (CandCnt≟1)"
          if ((CandCnt == 1)):
            $ 113 "SubPrgResult:=990"
            global SubPrgResult=990
            $ 114 "待機: 999999.0"
            sleep(999999.0)
          end
        elif (1241 == switch_1):
          $ 115 "ケース 1241"
          $ 116 "設定 GPIO_SubPrgNo=106"
          write_output_integer_register(2, 106)
          $ 117 "呼び出し SUB_106"
          SUB_106()
          $ 118 "設定 GPIO_SubPrgNo=121"
          write_output_integer_register(2, 121)
          $ 119 "呼び出し SUB_121"
          SUB_121()
          $ 120 "設定 GPIO_SubPrgNo=122"
          write_output_integer_register(2, 122)
          $ 121 "呼び出し SUB_122"
          SUB_122()
          $ 122 "設定 GPIO_SubPrgNo=001"
          write_output_integer_register(2, 001)
          $ 123 "呼び出し SUB_001"
          SUB_001()
        elif (1251 == switch_1):
          $ 124 "ケース 1251"
          $ 125 "設定 GPIO_SubPrgNo=120"
          write_output_integer_register(2, 120)
          $ 126 "呼び出し SUB_120"
          SUB_120()
          $ 127 "設定 GPIO_SubPrgNo=121"
          write_output_integer_register(2, 121)
          $ 128 "呼び出し SUB_121"
          SUB_121()
          $ 129 "設定 GPIO_SubPrgNo=122"
          write_output_integer_register(2, 122)
          $ 130 "呼び出し SUB_122"
          SUB_122()
          $ 131 "設定 GPIO_SubPrgNo=001"
          write_output_integer_register(2, 001)
          $ 132 "呼び出し SUB_001"
          SUB_001()
        elif (1261 == switch_1):
          $ 133 "ケース 1261"
          $ 134 "設定 GPIO_SubPrgNo=161"
          write_output_integer_register(2, 161)
          $ 135 "呼び出し SUB_161"
          SUB_161()
          $ 136 "設定 GPIO_SubPrgNo=001"
          write_output_integer_register(2, 001)
          $ 137 "呼び出し SUB_001"
          SUB_001()
        elif (1281 == switch_1):
          $ 138 "ケース 1281"
          $ 139 "設定 GPIO_SubPrgNo=181"
          write_output_integer_register(2, 181)
          $ 140 "呼び出し SUB_181"
          SUB_181()
          $ 141 "設定 GPIO_SubPrgNo=001"
          write_output_integer_register(2, 001)
          $ 142 "呼び出し SUB_001"
          SUB_001()
        elif (1401 == switch_1):
          $ 143 "ケース 1401"
          $ 144 "設定 GPIO_SubPrgNo=141"
          write_output_integer_register(2, 141)
          $ 145 "呼び出し SUB_141"
          SUB_141()
          $ 146 "pBucket[WorkPosNo]=Y2"
          pBucket[WorkPosNo]=Y2
          $ 147 "設定 GPIO_SubPrgNo=143"
          write_output_integer_register(2, 143)
          $ 148 "呼び出し SUB_143"
          SUB_143()
          $ 149 "設定 GPBO_BKPosDone=HI:Pulse 1.0"
          thread SinglePulse2259():
            write_output_boolean_register(13, True)
            sleep(1.0)
            write_output_boolean_register(13, False)
          end
          singlePulse2259 = run SinglePulse2259()
        elif (1402 == switch_1):
          $ 150 "ケース 1402"
          $ 151 "設定 GPIO_SubPrgNo=142"
          write_output_integer_register(2, 142)
          $ 152 "呼び出し SUB_142"
          SUB_142()
          $ 153 "設定 GPIO_SubPrgNo=001"
          write_output_integer_register(2, 001)
          $ 154 "呼び出し SUB_001"
          SUB_001()
          $ 155 "pCV=Y2"
          pCV=Y2
        elif (3100 == switch_1):
          $ 156 "ケース 3100"
          $ 157 "設定 GPIO_SubPrgNo=3100"
          write_output_integer_register(2, 3100)
          $ 158 "呼び出し SUB_3100"
          SUB_3100()
        elif (6001 == switch_1):
          $ 159 "ケース 6001"
          $ 160 "設定 GPIO_SubPrgNo=6001"
          write_output_integer_register(2, 6001)
          $ 161 "呼び出し SUB_6001"
          SUB_6001()
        elif (6101 == switch_1):
          $ 162 "ケース 6101"
          $ 163 "CheckMST:=0"
          global CheckMST=0
          $ 164 "設定 GPIO_SubPrgNo=6101"
          write_output_integer_register(2, 6101)
          $ 165 "呼び出し SUB_6101"
          SUB_6101()
        elif (6102 == switch_1):
          $ 166 "ケース 6102"
          $ 167 "If文 (GPII_CheckMST>0)"
          if ((read_input_integer_register(23)>0)):
            $ 168 "CheckMST:=GPII_CheckMST"
            global CheckMST=read_input_integer_register(23)
            $ 169 "WorkPosNo:=-1"
            global WorkPosNo=-1
            $ 170 "CaptRowNo:=5"
            global CaptRowNo=5
            $ 172 "SET_BUCKET()"
            SET_BUCKET()
            $ 173 "設定 GPIO_SubPrgNo=6101"
            write_output_integer_register(2, 6101)
            $ 174 "呼び出し SUB_6101"
            SUB_6101()
          end
          $ 175 "設定 GPIO_SubPrgNo=6102"
          write_output_integer_register(2, 6102)
          $ 179 "呼び出し SUB_6102RXFF"
          SUB_6102RXFF()
        elif (6401 == switch_1):
          $ 180 "ケース 6401"
          $ 181 "設定 GPIO_SubPrgNo=141"
          write_output_integer_register(2, 141)
          $ 182 "呼び出し SUB_141"
          SUB_141()
          $ 183 "pBucketM=Y2"
          pBucketM=Y2
          $ 184 "pBucket[WorkPosNo]=Y2"
          pBucket[WorkPosNo]=Y2
        elif (6402 == switch_1):
          $ 185 "ケース 6402"
          $ 186 "設定 GPIO_SubPrgNo=142"
          write_output_integer_register(2, 142)
          $ 187 "呼び出し SUB_6402"
          SUB_6402()
        elif (7001 == switch_1):
          $ 188 "ケース 7001"
          $ 189 "設定 GPIO_SubPrgNo=7001"
          write_output_integer_register(2, 7001)
          $ 190 "呼び出し SUB_7001"
          SUB_7001()
        elif (7002 == switch_1):
          $ 191 "ケース 7002"
          $ 192 "設定 GPIO_SubPrgNo=7002"
          write_output_integer_register(2, 7002)
          $ 193 "呼び出し SUB_7002"
          SUB_7002()
        end
        thread_flag_37 = 1
      end
      if ((SubPrgResult == 100)):
        global thread_handler_37=run Thread_if_37()
        while (thread_flag_37 == 0):
          if not((SubPrgResult == 100)):
            kill thread_handler_37
            thread_flag_37 = 2
          else:
            sync()
          end
        end
      else:
        thread_flag_37 = 2
      end
      $ 194 "設定 GPIO_PrgResult=SubPrgResult"
      write_output_integer_register(1, SubPrgResult)
      thread_flag_31 = 1
    end
    if ((  not  read_input_boolean_register(5) !=   False  )):
      global thread_handler_31=run Thread_if_31()
      while (thread_flag_31 == 0):
        if not((  not  read_input_boolean_register(5) !=   False  )):
          kill thread_handler_31
          thread_flag_31 = 2
        else:
          sync()
        end
      end
    else:
      thread_flag_31 = 2
    end
    $ 195 "END_CYCLE()"
    END_CYCLE()
    $ 196 "If文 GPBI_PrgStop≟ True "
    if (read_input_boolean_register(5) ==   True  ):
      $ 197 "SubPrgResult:=800"
      global SubPrgResult=800
      $ 198 "設定 GPIO_PrgResult=SubPrgResult"
      write_output_integer_register(1, SubPrgResult)
      $ 199 "設定 GPBO_PrgRun= False "
      write_output_boolean_register(6,   False  )
    end
    $ 200 "待機: 0.1"
    sleep(0.1)
    $ 201 "prg_no:=0"
    global prg_no=0
    $ 202 "荷重の設定: k10"
    set_target_payload(0.100000, [0.135000, 0.000000, 0.225000], [10.000000, 10.000000, 10.000000, 0.000000, 0.000000, 0.000000])
    $ 203 "設定"
    set_tcp(p[0.0,0.09,0.42,0.0,0.0,0.0])
    $ 204 "If文 (GPIO_PrgNo≠0)"
    if ((read_output_integer_register(0) != 0)):
      $ 205 "設定 GPBO_PrgEnd=HI:Pulse 1.0"
      thread SinglePulse2260():
        write_output_boolean_register(5, True)
        sleep(1.0)
        write_output_boolean_register(5, False)
      end
      singlePulse2260 = run SinglePulse2260()
      $ 206 "設定 GPIO_PrgNo=0"
      write_output_integer_register(0, 0)
    end
    $ 207 "待機 GPBI_PrgStart=LO"
    while (read_input_boolean_register(4) == True):
      sync()
    end
    $ 208 "待機 GPBI_PrgStop=LO"
    while (read_input_boolean_register(5) == True):
      sync()
    end
  end
end
