def TEST_SUB_109():
  global _hidden_verificationVariable=0
  step_count_f65cffa9_f9fb_4d09_9cf1_ed9f973af655 = 0.0
  thread Step_Counter_Thread_c870f3ee_9241_4d3d_ba67_81f2c0b19245():
    while (True):
      step_count_f65cffa9_f9fb_4d09_9cf1_ed9f973af655 = step_count_f65cffa9_f9fb_4d09_9cf1_ed9f973af655 + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_c870f3ee_9241_4d3d_ba67_81f2c0b19245()
  set_tcp(p[0.0,0.09,0.42,1.894,0.0,0.0])
  set_safety_mode_transition_hardness(1)
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_runstate_gp_boolean_output_to_value(0, 3)
  set_gravity([0.0, 0.0, 9.82])
  set_target_payload(0.100000, [0.000000, -0.135000, 0.225000], [10.000000, 10.000000, 10.000000, 0.000000, 0.000000, 0.000000])
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  global DistPillar=0.18309
  global CandCnt=1
  global ReCaptZ=0.05
  global port=3000
  global socket_timeout=120
  global host="192.168.1.2"
  global is_popup=False
  global pBucket=[p[0.77767, 0.5373, 0.31184, 0, 0, -1.55683], p[-0.75412, -0.52239, 0.31991, 0, 0, 1.57758], p[0, 0, 0, 0, 0, 0]]
  global CaptStepZ=0.085
  global CaptIndex=[2, 0, 0]
  global pBucketM=p[-0.74555, -0.4962, 0.3233, 0, 0, 1.58584]
  global socket_name="vt"
  global rovi_err=923
  global SubPrgResult=923
  global CurrPos=p[-0.1737, -0.51482, 0.46613, -2.18946, 2.1301, 0.04262]
  global CurrPos_p=p[-0.24663, -0.48295, 0.04403, -2.18946, 2.1301, 0.04262]
  global ForceStartZ=0.49823
  global CutOffZ=0.24177
  global Sub3100_ZMax=0.74
  global ForceStartX=-0.90368
  global Sub3100_aRot=0.2
  global Sub3100_d=0.3
  global Sub3100_Option=90
  global Sub3100_a=0.2
  global Sub3100_XdV=0.1
  global Sub3100_XdRot=8
  global ZoneDistTh=0.05
  global BucketWidth=0.95
  global ZoneBucketGap=0
  global ZoneHomeX=0.2
  global UnloadZ=0.072
  global CaptPos=p[0.185, -0.41797, -0.0318, 3.14155, 0.01172, 0.00005]
  global BucketUpperPos=p[0.757, -0.41797, -0.0318, 3.14155, 0.01172, 0.00005]
  global Sub3100_GPII18=90
  global Zone6ThX=0.1
  global Zone6ThY=0.05
  global pCV=p[0, 0, 0, 0, 0, 0]
  global CaptRowNo=1
  global CrankDepthFull=0.025
  global CrankDepth=0.12089
  global Y1=[0, 0, 0, 0]
  global Y2=p[10000, 0, 0, 0, 0, 0]
  global EvacRadiusTh=0.3
  global EvacXTh=[-0.5, 0.5]
  global EvacYTh=[-0.8, 1]
  global EvacZTh=[-0.1, 5]
  global WorkPosNo=0
  global Zone1ZTh=0.1
  global ReCaptNo=0
  global DistPillarBak=0.18309
  global CaptIndexWk=1
  global PoseSub=p[0.49014, 0.3094, -0.20075, -0.06151, -0.00747, 0.12506]
  global PoseAdd=p[-0.24271, -0.50049, 0.07188, -2.20279, 2.11888, -0.06065]
  global RZTh=15
  global pBucketC=p[0.82756, 0.52809, 0.31225, 0, 0, -1.56214]
  global ReCaptZWk=0
  global CheckMST=1
  global RZSub=7.16554
  global DistPillarCOTh=0.16
  global DistPillarAPTh=0.26
  global CutOffZAdd=0.24177
  global CutOffZDef=0.09
  global Y8=0
  global BKWidth_Value=[998, 977, 0]
  global BKWidth_Name="/prepro/bucket_width"
  global LevelZ=-0.04453
  global NeighborZ=0.04177
  global Currpos_p_UF0=p[-0.38965, -0.96823, -0.13277, -2.16724, 2.07689, -0.03621]
  global TCPSpeed=p[-0, -0, 0, -0, 0, 0]
  global Sub3100_Xd=[0, 0, 0.1, 0, 0, 0]
  global Sub3100_q=2
  global Sub3100_e=1
  global Sub3100_t=0.5
  global IsShake=False
  global BeyondZ=0.2
  global ShakeCnt=-1
  global IsSteady_01=False
  global IsSteady_02=True
  global HandInZ=0.05
  global TCPSpeedThZ=0.0005
  global ShakeWaitSec=1
  global CutOffPos=p[0.74495, -0.05741, 0.23647, -2.14909, 2.29151, 0]
  global RelMoveZ=0.075
  global ForceFeature=p[0.77767, 0.5373, 0.22684, 0, 0, -1.55683]
  global ForceAxis=[1, 1, 1, 1, 1, 1]
  global ForceValue=[0, 0, -0.04, 0, 0, 1.44624]
  global ForceType=2
  global ForceLimit=[0.01, 0.01, -0.00005, 0.17453, 0.17453, 0.17453]
  global ForceStep=3
  global IsBLLoad=False
  global TM_BLLoad=0.5
  global Sub104__TiltZTh=[0.25, 0.4]
  global Sub104_TiltZTh=[-0.5, 0.5]
  global BucketDef=p[0.77767, 0.5373, 0.31184, 0, 0, -1.55683]
  global ForceLimitZ=[0.015, 0.05, 0.05]
  global gGD_pos5=p[0.78436, -0.00184, 0.50811, -2.19687, 2.16882, -0.10249]
  global CutOffTCP=p[0, 0.09, 0.42, 0, 0, 0]
  global UseCutOffTCP=False
  global UseZSlide=False
  global UseBaseZRotate=True
  global BKWidth=0.942
  global Test01=1
  global CaptPointL_dX=0.185
  global CaptPointR_dX=0.185
  global UseShake=False
  global UseNewCaptPos=True
  global RZSupDegMin=[-5, 5]
  global RZSupForceVal=-1.44624
  global UseRZSuppress=True
  global TCPForce=p[23.95649, -1.19972, 5.35259, -4.1105, 7.03785, -13.73568]
  global TCPForceBak=p[-5.55293, -2.93706, 2.53269, -1.33548, 1.16808, 2.05019]
  global CVCorrDegMin=[-0.1, 0.1]
  global RZSupRatio=[1, 1]
  global RZSupOffset=[0, 0]
  global CVCorrRatio=[1.5, 1.5]
  global CVCorrOffset=[0, 0]
  global CVCorrRZVal=-0.2857
  global RYSub=-0.19047
  global UseCVCorr=True
  global RZSupForceRange=[-5, 5]
  global DistBKUpperTh=0.1
  global DistBKUpper=0.42866
  global StopSpeed=[0.005, 0.005, 0.005, 99999, 99999, 0.054]
  global RZSupRYRange=[-5, 5]
  global UseRZSupStep1=False
  global UseZRotate=True
  global CVCorrRYSub=-0.19047
  global CVCorrYVal=0.0014
  global DistOrigin=0.54228
  global v1=True
  global v2=True
  global v3=True
  global CVXTh=[-0.45, 0.45]
  global CVYTh=[-1, -0.7]
  global CVZTh=[-0.07, 5]
  global ForceVZDecay=0.04
  global ForceVZDecayWk=0.04
  global ForceLZDecay=0.00005
  global ForceLZDecayWk=0.00005
  global gGD_2_LM_Offset=p[0, 0, 0, 0, 0, 0]
  global gGD_2_RM_Offset=p[0, 0, 0, 0, 0, 0]
  global ForceValueBak=[0, 0, 0, 0, 0]
  global TCPForceBak2=p[-2.37951, -1.96997, -0.0897, -0.14799, 0.15546, -1.46671]
  global TCPSpeedBak2=p[0.00713, 0.00506, 0.00096, 0.07126, -0.01149, 0.06226]
  global gGD_2_LM_p=p[0.55235, -0.13379, -0.08166, -0.96862, 1.2083, -1.05679]
  global gGD_2_RM_p=p[0.55235, -0.13552, -0.07855, -1.29125, 0.95904, -1.36401]
  global gGD_2_M_p=p[0.5525, -0.13474, -0.08073, -1.12927, 1.07241, -1.22602]
  global gGD_2_M_Offset=p[0, 0, 0, 0, 0, 0]
  global RXSub=-1.71284
  global RXTiltDegMin=[-15, 15]
  global UseChkRXTilt=True
  global RBArmLength=1.2
  global gGD_2_p=p[-0.12643, -0.77733, -0.33798, -0.06562, 2.06421, -2.31067]
  global PickPosFlange=p[-0.88913, 0.08009, -0.01145, 2.03148, 2.16031, 0.26382]
  global PickTCP=p[0, 0.09, 0.42, 1.894, 0, 0]
  global RBArmOffset=-0.05
  global PickPosDist=0.8928
  global WorkNoCV=10000
  global WorkNoTL=20000
  global UseCVCorrCam=False
  global WorkNoOffset=0
  global Bucket=p[0.32604,0.49174,0.0,-1.882900624652718E-5,2.8304179127934987E-5,-1.593185305749222]
  global BucketM=p[0.32604,0.49174,0.0,2.2353980716304163E-16,-3.5868426080024975E-16,-1.5931853071795856]
  global CV=p[0.0,0.0,0.0,0.0,0.0,0.0]
  global CaptPoint_C=p[-0.335,0.0,0.2915,-2.1962990605814006,-2.246289190961992,-5.664481053350347E-5]
  global CaptPoint_C2=p[0.32796661698047924,-0.010768520544682924,0.01931625281283378,2.2288103429550152,-2.213636886217198,8.598462540813273E-5]
  global CaptPoint_L=p[-0.335,-0.29,0.4,2.196198431950414,2.246349774520516,5.8693989933774055E-5]
  global CaptPoint_L2=p[0.327894307417917,-0.010799940826224014,0.01928712668893995,2.087717047309385,-2.0736781215133306,0.27365839887453103]
  global CaptPoint_R=p[-0.335,0.29,0.4,-2.1963472338807764,-2.2462285075856694,3.086531389441326E-5]
  global CaptPoint_R2=p[0.327926308680866,-0.010795166414457658,0.019300245403843563,-2.1186306375223185,2.1040550557443427,0.22023197678473694]
  global Capt_1BK_L=p[-0.395,-0.47,0.35,-2.1961210242572884,-2.2463362846055,-2.908274762447041E-4]
  global Capt_1BK_R=p[-0.395,0.51,0.35,2.196067754706757,2.246288285862388,2.8411291050601595E-5]
  global Capt_1BK_pos1=p[-0.4218793038724447,-0.003154429464978058,0.2915499891144615,-2.1963422029204875,-2.2438663520270015,-0.02197160668673838]
  global Capt_1BK_pos2=p[-0.42187829024618434,-0.0031710253373066375,0.29156503858953065,-2.196324918349679,-2.2439040699490773,-0.021928444416953782]
  global Capt_2BK_L=p[0.42186661528427194,0.4254738068040517,0.35042275762909847,2.239156309475874,-2.1837044610999294,0.002643817066643282]
  global Capt_2BK_R=p[0.4218208572756906,-0.5427676723257963,0.350372239919558,2.2392697861179327,-2.183553596194912,0.002410470905346486]
  global Capt_2BK_pos1=p[0.42193501458435656,0.004742683868356356,0.35045865974037793,2.2391012408536453,-2.1839704655717003,0.002677867056024068]
  global Capt_2BK_pos2=p[0.421903984494575,0.004707988774967922,0.35045218900915065,2.239114367170047,-2.183895515396197,0.002684056681074047]
  global Capt_CV_M=p[0.08968999999999999,-0.12412999999999999,0.03606,0.01700000000000003,-2.922000000000002,0.06700000000000009]
  global Capt_GD_M=p[-0.004053197679954899,-0.25261725691632436,-0.01970497430780127,0.0332779454553888,-3.140179196376707,-0.0034093680964018282]
  global HomePointL=p[-0.36789,-0.5117344641471838,0.78,-0.6278857271586024,3.0680899128661667,-8.649957362498864E-4]
  global Master_pos=p[0.17420708546475086,-0.17301042591844829,-0.008777844109543298,-2.24423465280469,2.1983717632141557,-1.6002142800500656E-4]
  global Master_posL=p[0.5167357246169499,-0.16711572462787128,0.001249934268365227,-2.2548155684563964,2.0875867552228136,0.4513413336581617]
  global Master_posR=p[0.5157858321964207,-0.1685488568363156,0.004259469956917117,2.0520153130285506,-1.982009406964637,0.021703940451737676]
  global Master_pos_1=p[0.11094339812903395,-0.23710672065782984,0.08047378202276018,-0.05666752666458696,3.1228966394147033,0.01312068089365201]
  global PickPos=p[0.10830682331105715,-1.3709505888096256,-0.18404188875951455,-0.00622194000158997,2.880236948927292,-0.00383636509397631]
  global Solve=p[-0.00368,-0.0021000000000000003,0.25739999999999996,0.0,0.0,0.0]
  global TCP3100TL=p[0.0,0.08,0.42,1.8939999999999997,0.0,0.0]
  global TEST=p[0.1,0.0,0.2,0.0,0.0,0.0]
  global TEST_ROTSUP=p[-0.07293017509777999,-0.3201239472424659,0.14015840016860298,-0.014967413338418362,-3.108805898474534,-0.035972414862118114]
  global UF=p[0.0,0.0,0.0,0.0,0.0,0.0]
  global g1CV_posL1=p[0.05028133628211688,-0.4526481033729615,0.1221845548632916,-2.213335080948508,-2.1937561336067057,-0.3280056759040735]
  global g1CV_posR1=p[0.03743870476062511,-0.53119407812668,0.11301901343688614,2.073418671558482,2.153257467049566,0.11656306439039889]
  global g1GD_pos1=p[0.15518019183109402,-0.6360044329537242,0.2714505325043806,2.2006040244311444,2.21554807672813,0.0172874948472804]
  global g1GD_pos2=p[-0.35819,-0.02943,0.47096,1.4569999999999905,-2.7779999999999774,-0.04499999999997864]
  global g1GD_pos3=p[-0.48339,-0.0294,0.47095,1.0040000000000016,-2.9520000000000053,0.060000000000001934]
  global g1GD_pos4=p[-0.42371,0.28374,0.47094,0.2209999999999993,3.116999999999984,-0.06800000000000145]
  global g1GD_pos5=p[-0.68487,0.00834,0.47095,-2.1257237385454,-2.218688212232914,0.11596599295040418]
  global g1GD_pos5_NEAR=p[-0.5143300000000001,-0.023002183632447833,0.4499678963159493,2.1476150413314157,2.292837734093618,6.185870865614646E-5]
  global g1GD_posL1=p[-0.08276848269606216,-0.3996147100031649,0.1488453551331823,2.286527078917204,1.8420745504477611,0.33698451773695576]
  global g1GD_posL2=p[-0.3253977027403738,-0.3024804624281039,0.16332814085945146,2.72312820760317,0.9631021078169197,0.32447452035226126]
  global g1GD_posL3=p[-0.6791033397183219,0.06787475590683856,0.16337212788108813,2.1383125299263996,2.086116032377724,0.4536080263755059]
  global g1GD_posR1=p[-0.09893370538053747,-0.4999608954567234,0.14329885217724153,2.43311852414254,1.4238397520832589,0.08559216753941556]
  global g1GD_posR2=p[-0.3729565201882258,-0.3752983669473301,0.143299052800563,2.6951655216297596,0.8130506811102118,-0.02387549506099888]
  global g1GD_posR3=p[-0.7385929502572233,-0.029472684480355026,0.1499650660949685,2.0484522752014467,1.9493695704119496,0.18368227556562683]
  global g2CV_posL1=p[0.3409386496330911,-0.4656338066361442,0.1250074988128972,2.209372209162659,2.1945371304665926,0.3160714960040194]
  global g2CV_posR1=p[0.3400736278759575,-0.531334269888987,0.1183415684753657,2.07314649492589,2.1532617466521136,0.11638666128062146]
  global g2GD_pos1=p[0.2541388115968006,-0.677503610088671,0.18526502532787942,-2.037688671369965,-2.388999479520465,-0.002109631087665523]
  global g2GD_pos2=p[-0.00738,-0.42322000000000004,0.50789,-2.674557869880867,1.6108694828583239,-0.13160051671999548]
  global g2GD_pos3=p[0.44297000000000003,-0.18666,0.50792,-2.9956656953837846,0.46431419741709457,0.033564881740994076]
  global g2GD_pos4=p[-0.4237103768620544,0.2837377548108938,0.47094480072207145,0.22087799356123947,3.116637898340823,-0.06806904180519051]
  global g2GD_pos5=p[0.7843600000000001,-0.00184,0.5081100000000001,-2.1968651108366264,2.168824138911335,-0.10249458703727483]
  global g2GD_pos5_NEAR=p[0.5968300000000001,0.0128,0.44997000000000004,2.250000000000808,-2.1920000000007867,0.0]
  global gCV_11_M=p[-0.2645121242098638,-0.4833860506650676,0.04400478340438663,2.134585181738791,-2.075732018102955,-0.23577218894381177]
  global gCV_12_M=p[-0.30624751212242896,-0.4833654235708219,0.04401473364214742,2.134530891479788,-2.0758017376272577,-0.23579068286411156]
  global gCV_13_M=p[-0.33430242573349916,-0.4833372157519018,0.04399770847657514,2.1345201608549584,-2.0758639592297956,-0.2358271050855353]
  global gCV_14_M=p[-0.32109527120019943,-0.5004663981319076,0.19963634392317048,2.149714288236819,-2.0889937589809824,-0.2756541935879951]
  global gCV_1_M=p[-0.2427052271108291,-0.5004883492261072,0.07188395719662338,-2.197571506016394,2.1244250648444796,-0.06097110108172042]
  global gCV_2_M=p[-0.24326599318796366,-0.5007079281746311,0.21040982718377504,-2.198353839179573,2.125086027030143,-0.06027000842734345]
  global gCV_3_M=p[0.29099390607376485,-0.6570558385379063,0.0722153583041818,1.9884242634571576,2.2321538498123994,0.15249643504377583]
  global gCV_pos5=p[0.3400172856834047,-0.9722754606605235,-0.18287928563575456,2.073394561413637,2.1531827558666565,0.11639000988241816]
  global gGD_1_LM=p[0.02419,-0.7289500000000001,-0.11494,-0.010169347158913017,2.870767181856166,0.2884627079222753]
  global gGD_1_LM_RX=p[0.02416,-0.7290503881876362,-0.11492000000000001,0.3044368416109271,1.9674275598429376,-2.2260150226690767]
  global gGD_1_LM_RXF=p[0.02413503458160308,-0.74534,-0.11578000000000001,0.2411332216392182,1.7407173006243832,-2.3674279033231747]
  global gGD_1_M=p[-0.2475,-0.503,0.089,-2.1867946270597205,2.1829241940914734,-0.009676082420618194]
  global gGD_1_M_RX=p[0.023469999999999998,-0.7267389086136226,-0.11653,-0.01497665825746678,-2.067091763806016,2.343829767295237]
  global gGD_1_M_RXF=p[0.02415523713330076,-0.7453200000000001,-0.11578426509069895,-0.012477314995716382,-1.853515977408631,2.515027308648709]
  global gGD_1_RM=p[0.023629999999999998,-0.72653,-0.11331000000000001,-0.06253229749015264,-2.8808212567082414,-0.28238046714011755]
  global gGD_1_RM_RX=p[0.023710000000000002,-0.7266791760279572,-0.11328,0.25928042729790574,-1.9492131299374433,2.2165015837642534]
  global gGD_1_RM_RXF=p[0.024158234647744328,-0.74536,-0.11577,0.21548497967238725,-1.726437707763004,2.3373117534316665]
  global gGD_2_LM=p[0.5405788700057893,-0.16711740498766156,0.0012630226104511921,-0.9494527320250519,1.1835800215556345,-1.067902833434953]
  global gGD_2_LM_RX=p[0.5523537458495452,-0.1337920501526673,-0.08165648205925163,-0.9686220896667714,1.2082974155097759,-1.0567883096171768]
  global gGD_2_LM_RXF=p[0.02518,-0.6822999999999999,-0.11982,0.24121310672797797,1.7407223643292684,-2.3672997334921986]
  global gGD_2_M=p[-0.2475,-0.503,0.173,-2.1866753153153162,2.1770253801197503,-0.009649935195564483]
  global gGD_2_M_RX=p[0.5524989440312932,-0.13473535222065958,-0.08073426708370812,-1.1292662989918367,1.0724104004079464,-1.2260194768642911]
  global gGD_2_M_RXF=p[0.02469,-0.68228,-0.11781,-0.012625584579695818,-1.8536977166603092,2.514979910589354]
  global gGD_2_RM=p[0.02429,-0.66916,-0.11353,-0.06253008389277029,-2.880917079483223,-0.28230802316028863]
  global gGD_2_RM_RX=p[0.5523544338597803,-0.1355221200134302,-0.0785456070210418,-1.291247692703859,0.9590362056184274,-1.3640065355139586]
  global gGD_2_RM_RXF=p[0.02418,-0.68221,-0.11985,0.21545635593876583,-1.7267658137434814,2.337110041109278]
  global gGD_3_LM=p[0.024149999999999998,-0.63442,-0.00372,-0.010168641563882792,2.8709293839329573,0.28786844960240987]
  global gGD_3_LM_RX=p[0.5224385760141339,-0.13377929161084173,-0.08164940540311921,-0.9685870267104454,1.2082676883522592,-1.056802849120239]
  global gGD_3_LM_RXF=p[0.02387752228160463,-0.5964211774687285,-0.05792315514989682,0.2704410553277331,1.9481847980902196,-2.214876983085744]
  global gGD_3_M=p[0.5162737093703246,-0.1680975910897044,0.00295207371319417,-1.1301529525923628,1.0734344274688743,-1.2255404947206459]
  global gGD_3_M_RX=p[0.5210880596893241,-0.13475872141251716,-0.0807408059394934,-1.1293162701791544,1.072408974024519,-1.2260108713848203]
  global gGD_3_M_RXF=p[0.02383447419609676,-0.5964085561522618,-0.0579509198373786,-0.014600929068906539,-2.066655165579624,2.3438719244209403]
  global gGD_3_RM=p[0.02428,-0.6347200000000001,-0.00846,-0.0624152449577923,-2.8809080008278345,-0.2823877130468296]
  global gGD_3_RM_RX=p[0.5216704844566085,-0.13571382105208324,-0.07853422383801895,-1.2911982828030932,0.9590014471393395,-1.3639799283188914]
  global gGD_3_RM_RXF=p[0.023773322279514588,-0.5964087734876792,-0.05795139315103717,0.24060086319727583,-1.933030903056379,2.187075285864524]
  global gGD_4_LM=p[0.4558725244150116,-0.3315349175282178,0.12430224498365094,-0.9552134159443576,1.1945893268359054,-1.0583456420464168]
  global gGD_4_LM_RX=p[-0.12533199352487323,-0.6346108123799734,-0.003643920282847657,0.304552460658092,1.9670859988240124,-2.226395027960848]
  global gGD_4_RM=p[0.479082808949415,0.04570685873676769,0.1117713349649056,-1.291235993487069,0.9590434198846431,-1.3639513643376988]
  global gHome_Position=p[-0.0029132599368372368,-0.33080698629649885,0.1956799981940841,-0.0210640347105142,-3.141449968474591,4.0491521881349786E-4]
  global gTAIHI_pos1=p[0.034435296708333146,-0.2890869270984411,0.28697762766096685,-0.9517096680276043,2.9907327255336362,-0.006242657270483182]
  global gTAIHI_pos2=p[0.46041690381401934,0.09562026346103787,0.3409455343940188,-2.575428180750575,1.7504967205574518,-0.009370784990557466]
  global gTAIHI_pos3=p[0.4777514786587304,0.10855417509450788,0.25667938190447326,-3.115092130529677,-0.059113053813058626,0.017060902648732133]
  global gTAIHI_pos4=p[0.47773948064032057,0.10853581553326999,-0.15133852019421468,-3.1151611852917296,-0.05914313994407087,0.017149581050184888]
  global gTAIHI_pos5=p[0.30588450070104545,0.17870028478253597,-0.38750721344025674,-3.115302721311487,-0.05927431563397507,0.01725874757592571]
  global p0507=p[-0.335,0.29,0.4,-2.152,-2.1999999999999993,-0.09000000000000297]
  rtde_set_watchdog("speed_slider_mask", 10.0, "ignore")
  # begin: URCap Installation Node
  #   Source: Ethernet/IP I/O Monitor URCap, 1.2.0, 
  #   Type: Ethernet/IP I/O Monitor
  conn = rpc_factory("xmlrpc", "http://127.0.0.1:" + to_str(61101) + "/RPC2")
  
  def show_monitor():
    return conn.eip_monitor.show()
  end
  # end: URCap Installation Node
  $ 2 "開始前シーケンス"
  $ 3 "スクリプト: ROVI_RESET.script"
  def ROVI_RESET():
    if (not socket_open(host,port,socket_name)):
      rovi_err=902
      return False
    end
    socket_send_line("X0()",socket_name)
    ret=socket_read_line(socket_name,socket_timeout)
    if (ret == "OK"):
      rovi_err=0
    elif (ret == "NG"):
      rovi_err=to_num(socket_read_line(socket_name,socket_timeout))
    else:
      ret="NG"
      rovi_err=903
    end
    socket_close(socket_name)
    if (rovi_err != 0):
      if (is_popup):
        popup(str_cat(ret,rovi_err),title="X0",warning=True,blocking=True)
      end
      return False
    else:
      return True
    end
  end
  $ 4 "スクリプト: ROVI_CAPTURE.script"
  def ROVI_CAPTURE():
    Y1=[0.0,0.0,0.0,0.0]
  #  p=get_actual_tool_flange_pose()
    p=Bucket
    if (not socket_open(host,port,socket_name)):
      rovi_err=902
      return False
    end
    socket_send_string("X1(",socket_name)
    socket_send_string(p[0],socket_name)
    socket_send_string(",",socket_name)
    socket_send_string(p[1],socket_name)
    socket_send_string(",",socket_name)
    socket_send_string(p[2],socket_name)
    socket_send_string(",",socket_name)
    socket_send_string(p[3],socket_name)
    socket_send_string(",",socket_name)
    socket_send_string(p[4],socket_name)
    socket_send_string(",",socket_name)
    socket_send_string(p[5],socket_name)
    socket_send_line(")",socket_name)
    ret=socket_read_line(socket_name,socket_timeout)
    if (ret == "OK"):
      rovi_err=0
      f=socket_read_ascii_float(4,socket_name,socket_timeout)
      while (f[0]!=4):
        sleep(0.3)
        f=socket_read_ascii_float(4,socket_name,socket_timeout)
      end
      i=0
      while (i<4):
        Y1[i]=f[i+1]
        i=i+1
      end
    elif (ret == "NG"):
      rovi_err=to_num(socket_read_line(socket_name,socket_timeout))
    else:
      ret="NG"
      rovi_err=903
    end
    socket_close(socket_name)
    if (rovi_err != 0):
      if (is_popup):
        popup(str_cat(ret,rovi_err),title="X1",warning=True,blocking=True)
      end
      return False
    else:
      return True
    end
  end
  $ 5 "スクリプト: ROVI_SOLVE.script"
  def ROVI_SOLVE(is_popup=is_popup):
    buf=p[10000.0,0.0,0.0,0.0,0.0,0.0]
    if (not socket_open(host,port,socket_name)):
      rovi_err=902
      return False
    end
    socket_send_line("X2()",socket_name)
    ret=socket_read_line(socket_name,socket_timeout)
    if (ret == "OK"):
      rovi_err=0
      f=socket_read_ascii_float(6,socket_name,socket_timeout)
      while (f[0]!=6):
        sleep(0.3)
        f=socket_read_ascii_float(6,socket_name,socket_timeout)
      end
      counter=0
      while (counter<6):
        buf[counter]=f[counter+1]
        counter=counter+1
      end
    elif (ret == "NG"):
      rovi_err=to_num(socket_read_line(socket_name,socket_timeout))
    else:
      ret="NG"
      rovi_err=903
    end
    sleep(1.0)
    socket_close(socket_name)
    if (rovi_err != 0):
      if (is_popup):
        popup(str_cat(ret,rovi_err),title="X2",warning=True,blocking=True)
      end
    end
    return buf
  end
  $ 6 "スクリプト: ROVI_RECIPE.script"
  def ROVI_RECIPE(recipe):
    if (not socket_open(host,port,socket_name)):
      rovi_err=902
      return False
    end
    socket_send_line(str_cat(str_cat("X3(",recipe),")"),socket_name)
    ret=socket_read_line(socket_name,socket_timeout)
    if (ret == "OK"):
      rovi_err=0
    elif (ret == "NG"):
      rovi_err=to_num(socket_read_line(socket_name,socket_timeout))
    else:
      ret="NG"
      rovi_err=903
    end
    socket_close(socket_name)
    if (rovi_err != 0):
      if (is_popup):
        popup(str_cat(ret,rovi_err),title="X3",warning=True,blocking=True)
      end
      return False
    else:
      return True
    end
  end
  $ 7 "スクリプト: ROVI_PARAM.script"
  def ROVI_PARAM(prm_name,prm_value=None):
    Y8=0.0
    if (not socket_open(host,port,socket_name)):
      rovi_err=902
      return False
    end
    socket_send_string("X8(",socket_name)
    socket_send_string(prm_name,socket_name)
    if (prm_value != None):
      socket_send_string(" ",socket_name)
      socket_send_string(prm_value,socket_name)
    end
    socket_send_line(")",socket_name)
    ret=socket_read_line(socket_name,socket_timeout)
    if (ret == "OK"):
      rovi_err=0
      if (prm_value == None):  # rosparam get
        Y8=to_num(socket_read_line(socket_name,socket_timeout))
      else:    # rosparam set
        f=1
      end
    elif (ret == "NG"):
      rovi_err=to_num(socket_read_line(socket_name,socket_timeout))
    else:
      ret="NG"
      rovi_err=903
    end
    socket_close(socket_name)
    if (rovi_err != 0):
      if (is_popup):
        popup(str_cat(ret,rovi_err),title="X8",warning=True,blocking=True)
      end
      return False
    else:
      return True
    end
  end
  $ 8 "スクリプト: CYCLE_CONTROL.script"
  def GET_REG(prg_no):
    WorkPosNo=read_input_integer_register(4)-1                       # GPII_WorkPosNo
    CaptIndex[WorkPosNo]=read_input_integer_register(21)-1           # GPII_CaptColNo
    CaptRowNo=read_input_integer_register(20)-1        # GPII_CaptRowNo
    CaptStepZ=read_input_integer_register(6) / 1000.0         # GPII_CaptStepZ
    ReCaptNo=0
    if (prg_no==1203):
      ReCaptNo=read_input_integer_register(22)                # GPII_ReCaptNo
    end
    ReCaptZ=read_input_integer_register(7) / 1000.0         # GPII_ReCaptZ
    CutOffZDef=read_input_integer_register(11) / 1000.0          # GPII_CutOffZ
    CrankDepthFull=read_input_integer_register(10) / 1000.0   # GPII_FullDepth
  end
  
  def POSE_SUB(p, teach_frame):
    return pose_trans(inv(teach_frame), p)
  end
  
  def GET_BUCKET_UPPER(pos=0):
    if UseNewCaptPos:
      p=POSE_SUB(CaptPoint_C, BucketM)
      pX=[BKWidth/2,CaptPointL_dX,BKWidth-CaptPointR_dX]
      p[0]=pX[pos]
    else:
      captpos=[CaptPoint_C,CaptPoint_L,CaptPoint_R]
      p=captpos[pos]
      p=POSE_SUB(p, BucketM)
    end
    return p
  end
  
  def SET_BUCKET_DEF():
    BucketM=pBucketM
    if (WorkPosNo<0):
      Bucket=pBucketC
    else:
      Bucket=pBucket[WorkPosNo]
    end
  end
  
  def SET_BUCKET():
    SET_BUCKET_DEF()
    Bucket[2]=Bucket[2]-CaptStepZ*CaptRowNo
  end
  
  def SET_CV():
    CV=pCV
  end
  
  def SET_CAPT_INDEX():
    CaptIndexWk=CaptIndex[WorkPosNo]
    ReCaptZWk=0
    if (prg_no==1203):
      if   (ReCaptNo==0):
        if (CaptIndexWk==0):
          if (0<=DistPillarBak):
            CaptIndexWk=1
          else:
            CaptIndexWk=2
          end
          ReCaptZWk=0
        else:
          CaptIndexWk=0
          ReCaptZWk=0
        end
      elif (ReCaptNo==1):
        if (CaptIndexWk==0):
          CaptIndexWk=0
          ReCaptZWk=-ReCaptZ
        else:
          CaptIndexWk=CaptIndexWk
          ReCaptZWk=-ReCaptZ
        end
      else:
        if (CaptIndexWk==0):
          CaptIndexWk=0
          ReCaptZWk=ReCaptZ
        else:
          CaptIndexWk=CaptIndexWk
          ReCaptZWk=ReCaptZ
        end
      end
    end
  end
  
  def GET_CAPTPOS():
    SET_BUCKET()
    SET_CAPT_INDEX()
    if UseNewCaptPos:
      p=GET_BUCKET_UPPER(CaptIndexWk)
      p[2]=p[2]-ReCaptZWk
    else:
      captpos=[CaptPoint_C,CaptPoint_L,CaptPoint_R]
      p=captpos[CaptIndexWk]
      p[2]=p[2]-ReCaptZWk
      p=POSE_SUB(p, BucketM)
    end
    return p
  end
  
  def CHECK_CAPTPOS():
    isOK=((CaptStepZ*(read_input_integer_register(20)-1)) < (read_input_integer_register(9) / 1000.0))
    return isOK
  end
  
  def GET_ZSLIDE_POS(p):
    p[2]=p[2]-CaptStepZ*CaptRowNo
    return p
  end
  
  def END_CYCLE():
    stopl(1.2)
    end_force_mode()
    end_freedrive_mode()
    socket_close(socket_name)
  end
  
  def CHECK_SPEED(smax,f=[1,1,1,1,1,1]):
    s=TCPSpeed
    i=0
    while (i<6):
      if ((f[i]==1) and (smax[i]<s[i])):
        return False
      end
      i=i+1
    end
    return True
  end
  $ 9 "スクリプト: ROTATE_CONTROL.script"
  def GET_TCP_FORCE_TOOL():
    force_torque=get_tcp_force()
    force_B=p[force_torque[0], force_torque[1], force_torque[2], 0, 0, 0]
    torque_B=p[force_torque[3], force_torque[4], force_torque[5], 0, 0, 0]
    tcp=get_actual_tcp_pose()
    rotation_BT=p[0, 0, 0, tcp[3], tcp[4], tcp[5]]
    force_T=pose_trans(pose_inv(rotation_BT), force_B)
    torque_T=pose_trans(pose_inv(rotation_BT), torque_B)
    force_torque_T=p[force_T[0], force_T[1], force_T[2], torque_T[0], torque_T[1], torque_T[2]]
    return force_torque_T
  end
  
  def CHECK_VALUE_RZ():
    return True
  end
  
  def GET_FORCE_VALUE_RZ(target):
    PoseSub= pose_sub (CurrPos_p,target)
    RYSub=r2d(PoseSub[4])
    RZSub=r2d(PoseSub[5])
  #  if (RYSub<RZSupRYRange[0] or RZSupRYRange[1]<RYSub):
  #    RZSupForceVal=0.0
  #    return RZSupForceVal
  #  end
    if (RZSub<0):
      RZMin=RZSupDegMin[0]
      RZRatio=RZSupRatio[0]
      RZOffset=RZSupOffset[0]
    else:
      RZMin=RZSupDegMin[1]
      RZRatio=RZSupRatio[1]
      RZOffset=-RZSupOffset[1]
    end
    if (norm(RZSub) >= norm(RZMin)):
      RZSupForceVal=(RZMin-RZSub)*RZRatio+RZOffset
    else:
      RZSupForceVal=0
    end
    if (RZSupForceVal<RZSupForceRange[0]):
      RZSupForceVal=RZSupForceRange[0]
    elif (RZSupForceRange[1]<RZSupForceVal):
      RZSupForceVal=RZSupForceRange[1]
    end
    if (RYSub<RZSupRYRange[0] or RZSupRYRange[1]<RYSub):
      RZSupForceVal=0
    end
    if ((not UseRZSupStep1) and (ForceStep==1)):
      RZSupForceVal=0
    end
    return RZSupForceVal
  end
  
  def GET_CVCORR_VALUE(target):
    PoseSub=pose_sub(CurrPos_p,target)
    RYSub=r2d(PoseSub[4])
    CVCorrRYSub=RYSub
    if (RYSub<0):
      RYMin=-CVCorrDegMin[0]
      RZRatio=CVCorrRatio[0]
      RZOffset=-CVCorrOffset[0]
    else:
      RYMin=-CVCorrDegMin[1]
      RZRatio=CVCorrRatio[1]
      RZOffset=CVCorrOffset[1]
    end
    if (norm(RYSub) >= norm(RYMin)):
      t=get_tcp_offset()
      CVCorrYVal=-t[2]*sin(d2r(RYSub))
      CVCorrRZVal=RYSub*RZRatio+RZOffset
    else:
      CVCorrYVal=0
      CVCorrRZVal=0
    end
  end
  
  def GET_CVCORR_POS(target):
    if UseCVCorr:
      pos= pose_add (p[0,0,0,0,0,d2r(-CVCorrRZVal)],p[0,0,0,target[3],target[4],target[5]])
      pos=p[target[0],target[1],target[2],pos[3],pos[4],pos[5]]
    else:
      pos=target
    end
    return pos
  end
  $ 10 "スクリプト: ZONE_CONTROL.script"
  def GET_DIST(P1, P2):
    return pose_dist(P1, P2)
  end
  def CHECK_DIST_NEAR(P1, P2, th):
    return (GET_DIST(P1, P2) < th)
  end
  def DIST_HOME():
    return pose_dist(gHome_Position,CurrPos_p)
  end
  
  def CHECK_HOME():
    return (DIST_HOME()<ZoneDistTh)
  end
  
  def DIST_CVFront():
    if (read_input_integer_register(4)==1):
      p=g2GD_pos1
    else:
      p=g1GD_pos1
    end
    return pose_dist(p,CurrPos_p)
  end
  
  def CHECK_CVFront():
    return (DIST_CVFront()<ZoneDistTh)
  end
  
  def CHECK_RB_POS(prg_no):
    ret=True
    if (prg_no==1001):
      ret=CHECK_ALLOW_GO_HOME(0)
    end
    if ((prg_no==1201) or (prg_no==1401) or (prg_no==1402) or (prg_no==6001) or (prg_no==6101) or (prg_no==6401) or (prg_no==6102) or (prg_no==7001)):
      ret=CHECK_HOME()
    end
    if ((prg_no==1002) or (prg_no==1241) or (prg_no==1261)):
      ret=CHECK_BKInside()
    end
    if (prg_no==1251):
      ret=(CHECK_HOME() or CHECK_CVUpper())
    end
    if (ret != True):
      SubPrgResult=801
      sleep(999999.0)
    end
  end
  
  def DIST_ORIGIN():
    p=CurrPos_p
    o=p
    o[0]=0.0
    o[1]=0.0
    DistOrigin=pose_dist(o,p)
    return pose_dist(o,p)
  end
  
  def CHECK_EVAC_ORG():
    return (EvacRadiusTh<DIST_ORIGIN())
  end
  
  def CHECK_EVAC_X():
    return (EvacXTh[0]<CurrPos_p[0] and CurrPos_p[0]<EvacXTh[1])
  end
  
  def CHECK_EVAC_Y():
    return (EvacYTh[0]<CurrPos_p[1] and CurrPos_p[1]<EvacYTh[1])
  end
  
  def CHECK_EVAC_Z():
    return (EvacZTh[0]<CurrPos_p[2] and CurrPos_p[2]<EvacZTh[1])
  end
  
  def CHECK_EVAC():
    ret=True
    ret=(ret and CHECK_EVAC_ORG())
    ret=(ret and CHECK_EVAC_X())
    ret=(ret and CHECK_EVAC_Y())
    ret=(ret and CHECK_EVAC_Z())
    return ret
  end
  
  def CHECK_BKInside():
    ret=True
    pos=read_input_integer_register(4)
    if (pos>2):
      ret=False
    else:
      if (not read_input_boolean_register(13+pos)):
        ret=False
        ver_3=read_input_boolean_register(13+pos)
      else:
        bk=pBucket[pos-1]
        if (pos==1):
          ret=(ret and CurrPos_p[0]>ZoneHomeX)
          ret=(ret and bk[1]-(BucketWidth-ZoneBucketGap)<CurrPos_p[1] and CurrPos_p[1]<bk[1]-ZoneBucketGap)
        elif (pos==2):
          ret=(ret and CurrPos_p[0]<-ZoneHomeX)
          ret=(ret and bk[1]+ZoneBucketGap<CurrPos_p[1] and CurrPos_p[1]<bk[1]+(BucketWidth-ZoneBucketGap))
        end
      end
    end
    return ret
  end
  
  def CHECK_CVOutside():
    ret=True
    ret=(ret and gCV_11_M[0]-Zone6ThX<CurrPos_p[0])
    ret=(ret and CurrPos_p[0]<gCV_11_M[0]+Zone6ThX)
    ret=(ret and gCV_11_M[1]-Zone6ThY<CurrPos_p[1])
    ret=(ret and CurrPos_p[1]<gCV_11_M[1]+Zone6ThY)
    return (not ret)
  end
  
  def CHECK_CVUpper():
    ret=True
    ret=(ret and (CVXTh[0]<CurrPos_p[0] and CurrPos_p[0]<CVXTh[1]))
    ret=(ret and (CVYTh[0]<CurrPos_p[1] and CurrPos_p[1]<CVYTh[1]))
    ret=(ret and (CVZTh[0]<CurrPos_p[2] and CurrPos_p[2]<CVZTh[1]))
    return ret
  end
  
  def CHECK_ALLOW_GO_HOME(no=0):
    ret=False
    if (no==0 or no==1):
      ret=(ret or CHECK_EVAC())
      v1=ret
    end
    if (no==0 or no==2):
      ret=(ret or CHECK_BKInside())
      v2=ret
    end
    if (no==0 or no==3):
      ret=(ret or CHECK_CVUpper())
      v3=ret
    end
    return ret
  end
  
  def CHECK_ZONE(no):
    if (no==1):
      return (CurrPos_p[2]>=Zone1ZTh)
    elif (no==2):
      return (CurrPos_p[0]>ZoneHomeX)
    elif (no==3):
      return (CurrPos_p[0]<-ZoneHomeX)
    elif (no==4):
      return CHECK_CVFront()
    elif (no==5):
      return CHECK_BKInside()
    elif (no==6):
      return CHECK_CVOutside()
    elif (no==7):
      return CHECK_CVUpper()
    end
  end
  $ 63 "u12473u12524u12483u12489_1"
  thread u12473u12524u12483u12489_1():
    while (True):
      $ 64 "TCPSpeed:=get_actual_tcp_speed()"
      global TCPSpeed=get_actual_tcp_speed()
      $ 65 "TCPForce:=GET_TCP_FORCE_TOOL()"
      global TCPForce=GET_TCP_FORCE_TOOL()
      $ 66 "sync()"
      sync()
    end
  end
  threadId_u12473u12524u12483u12489_1 = run u12473u12524u12483u12489_1()
  $ 11 "ロボットプログラム"
  $ 12 "prg_no:=1201"
  global prg_no=1201
  $ 13 "設定"
  set_tcp(p[0.0,0.09,0.42,1.894,0.0,0.0])
  $ 14 "荷重の設定: k2"
  set_target_payload(0.100000, [0.000000, -0.135000, 0.225000], [2.000000, 2.000000, 2.000000, 0.000000, 0.000000, 0.000000])
  $ 15 "ROVI_RECIPE"
  $ 16 "If文 (not ROVI_RECIPE(GPII_WorkNo+WorkNoTL))"
  if ((not ROVI_RECIPE(read_input_integer_register(2)+WorkNoTL))):
    $ 17 "SubPrgResult:=rovi_err"
    global SubPrgResult=rovi_err
    $ 18 "待機: 999999.0"
    sleep(999999.0)
  end
  $ 19 "ROVI_RESET"
  $ 20 "If文 (not ROVI_RESET())"
  if ((not ROVI_RESET())):
    $ 21 "SubPrgResult:=rovi_err"
    global SubPrgResult=rovi_err
    $ 22 "待機: 999999.0"
    sleep(999999.0)
  end
  $ 23 "ROVI_CAPTURE"
  $ 24 "設定 GPBO_BLStop=HI:Pulse 1.0"
  thread SinglePulse942():
    write_output_boolean_register(14, True)
    sleep(1.0)
    write_output_boolean_register(14, False)
  end
  singlePulse942 = run SinglePulse942()
  $ 25 "force_mode_set_damping(0)"
  force_mode_set_damping(0)
  $ 26 "force_mode_set_gain_scaling(0.5)"
  force_mode_set_gain_scaling(0.5)
  $ 27 "待機: 0.02"
  sleep(0.02)
  $ 28 "zero_ftsensor()"
  zero_ftsensor()
  $ 29 "フォース"
  sleep(0.02)
  zero_ftsensor()
  force_mode(tool_pose(), [0, 0, 0, 1, 0, 0], [0.0, 30.0, 0.0, 5.0, 10.0, 0.0], 2, [0.1, 0.1, 0.1, 0.08726646259971647, 0.3490658503988659, 0.3490658503988659])
  $ 30 "var_2:= True " "noBreak"
  global var_2=  True  
  $ 36 "ループ var_2" "noBreak"
  while (var_2):
    $ 37 "If文 TCPForce[3]<-2" "noBreak"
    global thread_flag_37=0
    thread Thread_if_37():
      $ 38 "待機: 1.0" "noBreak"
      sleep(1.0)
      $ 39 "var_2:= False " "noBreak"
      global var_2=  False  
      thread_flag_37 = 1
    end
    if (TCPForce[3]<-2):
      global thread_handler_37=run Thread_if_37()
      while (thread_flag_37 == 0):
        if not(TCPForce[3]<-2):
          kill thread_handler_37
          thread_flag_37 = 2
        else:
          sync()
        end
      end
    else:
      thread_flag_37 = 2
    end
    $ 40 "待機: 0.1" "noBreak"
    sleep(0.1)
  end
  end_force_mode()
  stopl(5.0)
  $ 41 "待機: 3.0"
  sleep(3.0)
  $ 42 "force_mode_set_gain_scaling(1)"
  force_mode_set_gain_scaling(1)
  $ 43 "force_mode_set_damping(0)"
  force_mode_set_damping(0)
  $ 44 "If文 ( not ROVI_CAPTURE())"
  if ((  not  ROVI_CAPTURE())):
    $ 45 "SubPrgResult:=rovi_err"
    global SubPrgResult=rovi_err
    $ 46 "待機: 999999.0"
    sleep(999999.0)
  end
  $ 47 "ROVI_SOLVE"
  $ 48 "Y2:=ROVI_SOLVE()"
  global Y2=ROVI_SOLVE()
  $ 49 "If文 (Y2[0]≟10000.)"
  if ((Y2[0] == 10000.)):
    $ 50 "SubPrgResult:=rovi_err"
    global SubPrgResult=rovi_err
    $ 51 "待機: 999999.0"
    sleep(999999.0)
  end
  $ 52 "荷重の設定: k10"
  set_target_payload(0.100000, [0.000000, -0.135000, 0.225000], [10.000000, 10.000000, 10.000000, 0.000000, 0.000000, 0.000000])
  $ 53 "UF:=Y2"
  global UF=Y2
  $ 54 "MoveL"
  $ 55 "待機: 1.0"
  sleep(1.0)
  $ 56 "gCV_11_M" "breakAfter"
  set_tcp(p[0.0,0.09,0.42,0.0,0.0,0.0])
  movel(pose_trans(UF, gCV_11_M), a=0.07, v=0.2)
  $ 57 "gCV_12_M" "breakAfter"
  set_tcp(p[0.0,0.09,0.42,0.0,0.0,0.0])
  movel(pose_trans(UF, gCV_12_M), a=0.07, v=0.2)
  $ 58 "MoveL"
  $ 59 "gCV_13_M" "breakAfter"
  set_tcp(p[0.0,0.09,0.42,0.0,0.0,0.0])
  movel(pose_trans(UF, gCV_13_M), a=0.03, v=0.03)
  $ 60 "設定 GPBO_BLStart=HI:Pulse 1.0"
  thread SinglePulse943():
    write_output_boolean_register(15, True)
    sleep(1.0)
    write_output_boolean_register(15, False)
  end
  singlePulse943 = run SinglePulse943()
  $ 62 "停止"
  halt
end
