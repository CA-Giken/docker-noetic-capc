def test():
  global _hidden_verificationVariable=0
  set_target_payload(1.000000, [0.000000, 0.000000, 0.000000], [11.100000, 11.000000, 11.100000, 0.000000, 0.000000, 0.000000])
  set_safety_mode_transition_hardness(1)
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_runstate_gp_boolean_output_to_value(0, 3)
  set_runstate_gp_boolean_output_to_value(1, 1)
  set_runstate_gp_boolean_output_to_value(2, 5)
  set_runstate_gp_boolean_output_to_value(3, 4)
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  set_tcp(p[0.0,0.0,0.0,0.0,0.0,0.0])
  set_gravity([0.0, 0.0, 9.82])
  global EI_var_1=1
  global A_var_1=1
  # begin: URCap Installation Node
  #   Source: Ethernet/IP I/O Monitor URCap, 1.0.0, 
  #   Type: Ethernet/IP I/O Monitor
  conn = rpc_factory("xmlrpc", "http://127.0.0.1:" + to_str(61101) + "/RPC2")
  
  def show_monitor():
    return conn.eip_monitor.show()
  end
  # end: URCap Installation Node
  step_count_61289a3c_2575_4fd7_be11_36c6bd8a7764 = 0.0
  thread Step_Counter_Thread_911082e8_94d0_4685_ac0c_518c9b8799de():
    while (True):
      step_count_61289a3c_2575_4fd7_be11_36c6bd8a7764 = step_count_61289a3c_2575_4fd7_be11_36c6bd8a7764 + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_911082e8_94d0_4685_ac0c_518c9b8799de()
  global Loop_1=0
  global var_1=  True  
  global var_2=10
  global Waypoint_1_p=p[-.189631536923, -.609683881651, .260971148694, -.001221359682, 3.116276528482, .038891915637]
  global Waypoint_1_q=[-1.6006999999999998, -1.7271, -2.2029999999999994, -0.8079999999999998, 1.5951, -0.030999999999999694]
  global Waypoint_2_p=p[.567021575240, -.293532091181, .260971148694, -2.016023022439, 2.404609301052, .055285539085]
  global Waypoint_2_q=[-0.20604255188244025, -1.7271, -2.2029999999999994, -0.8079999999999998, 1.5951, -0.030999999999999694]
  def sub():
    $ 21 "sub" "noBreak"
    $ 22 "Loop 10 times"
    Loop_3 = 0
    while (Loop_3 < 10):
      $ 23 "Wait: 1.0"
      sleep(1.0)
      Loop_3 = Loop_3 + 1
    end
    $ 24 "'789'"
    # '789'
    $ 25 "Loop_4≔100"
    global Loop_4=100
    $ 27 "Wait: 10.0"
    sleep(10.0)
    $ 28 "Popup: End sub"
    popup("End sub", "Message", False, False, blocking=True)
  end
  while (True):
    $ 2 "Robot Program"
    $ 3 "Set Payload: Payload"
    set_target_payload(1.000000, [0.000000, 0.000000, 0.000000], [11.100000, 11.000000, 11.100000, 0.000000, 0.000000, 0.000000])
    $ 4 "write_output_boolean_register(1,var_1)"
    write_output_boolean_register(1,var_1)
    $ 5 "write_output_boolean_register(3,var_1)"
    write_output_boolean_register(3,var_1)
    $ 6 "var_1≔ True "
    global var_1=  True  
    $ 7 "Popup"
    popup(str_cat("",var_2), "Message", False, False, blocking=True)
    $ 8 "Loop_2≔0"
    global Loop_2=0
    $ 9 "Loop"
    while (True):
      $ 10 "MoveJ"
      $ 11 "Waypoint_1" "breakAfter"
      movej(get_inverse_kin(Waypoint_1_p, qnear=Waypoint_1_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 12 "Waypoint_2" "breakAfter"
      movej(get_inverse_kin(Waypoint_2_p, qnear=Waypoint_2_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 13 "var_2≔read_input_integer_register(24)"
      global var_2=read_input_integer_register(24)
      $ 14 "Loop_1≔Loop_1+1"
      global Loop_1=Loop_1+1
      $ 15 "write_output_integer_register(0,Loop_1)"
      write_output_integer_register(0,Loop_1)
      $ 16 "write_output_integer_register(20,Loop_1+1)"
      write_output_integer_register(20,Loop_1+1)
      $ 17 "var_1≔read_input_boolean_register(64)"
      global var_1=read_input_boolean_register(64)
      $ 18 "write_output_boolean_register(0,var_1)"
      write_output_boolean_register(0,var_1)
      $ 19 "var_1≔read_input_boolean_register(65)"
      global var_1=read_input_boolean_register(65)
      $ 20 "write_output_boolean_register(1,var_1)"
      write_output_boolean_register(1,var_1)
    end
  end
end
